<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<META http-equiv="Content-Style-Type" content="text/css">
<META http-equiv="X-UA-Compatible" content="chrome=1">
<meta name="format-detection" content="telephone=no">
<meta name="format-detection" content="telephone=no, email=no, address=no">
	
	<meta name="viewport" content="target-densitydpi=medium-dpi, initial-scale=1, maximum-scale=1, user-scalable=no">

<script src="https://img-pmap.aquapal-cdn.net/js/jquery-2.1.3.min.js"></script>

<link rel="stylesheet" href="https://img-pmap.aquapal-cdn.net/js/leaflet-1.0.2.css" />
<script src="https://img-pmap.aquapal-cdn.net/js/leaflet-1.0.2.js"></script>
	
<script type="text/javascript" src="https://img-pmap.aquapal-cdn.net/js/pokemonlist.js?v=1"></script>
<script type="text/javascript" src="https://img-pmap.aquapal-cdn.net/js/pokebaselist.js?v=5"></script>
	
<script type="text/javascript" src="https://img-pmap.aquapal-cdn.net/js/common-1.0.1.js?v=1"></script>

<TITLE>P-GO SEARCH</TITLE>
	
<META name="Keywords" content="P-GO SEARCH,ぴごさーち,ピゴサ,P-GO,kukusama,くくさま">
<META name="Description" content="ピゴサGOは、現実世界に出現するモンスターをみんなで探して楽しむ新感覚地図ゲームです。">
	
<SCRIPT type="text/javascript">
<!--

var lock_zoom = false;
var lock_drag = false;

var map = null;
var popup = null;
var overlay = null;
var gps_marker;
var mapdrag_lasttime = 0;
function initMap(_p1, _p2, _zoom) {
	
	console.log("debug1");
	
	//ローカル設定読み込み
	loadLocalConfig();

	config_map_style = cookie.get("cookie_config_map_style");
	$("#area_config_map_style").val(config_map_style);
	
	config_navi_app = cookie.get("cookie_config_navi_app");
	$("#area_config_navi_app").val(config_navi_app);

	//地図初期化
	map = L.map('map-canvas').setView([_p1, _p2], _zoom);
	setupTileLayer();
	
	map.on('click', function(event) {
		console.log("map click!");
		
		closeDetailPopup();
	});
	
	map.on('zoomstart', function(event) {
		lock_zoom = true;
	});
	map.on('zoomend', function(event) {
		lock_zoom = false;
	});
		
	map.on('dragstart', function(event) {
		lock_drag = true;
	});
	map.on('dragend', function(event) {
		lock_drag = false;
	});
	
	console.log("debug2");
		
	document.getElementsByClassName( "leaflet-control-attribution" )[0].innerHTML = document.getElementsByClassName( "leaflet-control-attribution" )[0].innerHTML.split('<a ').join('<a target="_blank" ');
	
	//カスタムアイコン
//■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
//	config_custom_icon_url = cookie.get("cookie_config_custom_icon_url");
	config_custom_icon_url = "http://appmedia.jp/wp-content/themes/appmedia/pokemon/PokemonZukan/@ID@.png";
//■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	if (config_custom_icon_url.indexOf("https://img-pmap.aquapal-cdn.net/") != -1) {
		config_custom_icon_url = "";
	}
	$("#config_custom_icon").val(config_custom_icon_url);
	
	/*
	//カスタムアイコン251まであるかチェック
	var _chkurl = getIconImage(251);
	console.log("_chkurl: "+_chkurl);
	if (_chkurl.indexOf("https://img-pmap.aquapal-cdn.net/gateway.png/") != -1) {
		$("#area_customicon_viewtest").html("<img src='"+_chkurl+"' width='1' height='1' onerror='error_nextgen_pokemons=true;console.log(\"error_nextgen_pokemons = true\");'>");
	}
	*/
	
	//カスタム名称
//■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
//	config_custom_name_url = cookie.get("cookie_config_custom_name_url");
	config_custom_name_url = "http://www.dotup.org/uploda/www.dotup.org1018983.txt";
//■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	$("#config_custom_name").val(config_custom_name_url);
	try{
		if (config_custom_name_url) {
			if (config_custom_name_url.indexOf("http") == 0) {
				
				var _loadsuccess = false;
				
				try{
					var _tmp = localStorage.getItem('cache_config_custom_name_url');
					if (_tmp) {
						if (_tmp == config_custom_name_url) {
							var _tmp = localStorage.getItem('cache_config_custom_name');
							if (_tmp) {
								if (parseCustomNameData(_tmp)) {
									_loadsuccess = true;
									console.log("config_custom_name: from cache");
								}
							}
						}
					}
				}catch(e){
					console.log("error: localStorage.setItem: cache_config_custom_*");
				}
				
				var _tmpurl = config_custom_name_url;
				_tmpurl = _tmpurl.trim();
				
				$.ajax({
				    url: "https://img-pmap.aquapal-cdn.net/gateway.name/?url="+encodeURIComponent(_tmpurl),
				    type: "GET",
				    timeout: 10000,
				    cache: false
				}).done(function(data, status, xhr) {
					if (parseCustomNameData(data)) {
						//読み込み成功
						console.log("config_custom_name: from http");
						
						try{
							localStorage.setItem('cache_config_custom_name_url', ''+config_custom_name_url);
							localStorage.setItem('cache_config_custom_name', ''+data);
						}catch(e){
							console.log("error: localStorage.setItem: cache_config_custom_*");
						}
						
													if (push_cnt > 0) {
								setTimeout(function(){
									updateToken();
								}, 1000);
							}
											} else {
						
						if (!_loadsuccess) {
							openAlertWindow("カスタム種類名ファイルの読み込みに失敗しました。ファイル形式が不正です。", function(){}, false);
							config_custom_name_url = "";
						}
					}
				}).fail(function(xhr, status, error) {
				    openAlertWindow("カスタム種類名ファイルの読み込みに失敗しました。サーバが混雑しているか、ファイル形式が不正か、URLが間違っています。", function(){}, false);
				});
			}
		}
	} catch(e) {
		openAlertWindow("カスタム種類名ファイルの読み込みに失敗しました。サーバが混雑しているか、ファイル形式が不正か、URLが間違っています。", function(){}, false);
	}
	
	//設定ボタン
	var customControl = L.Control.extend({
	  options: {
	    position: 'bottomleft' 
	    //control position - allowed: 'topleft', 'topright', 'bottomleft', 'bottomright'
	  },

	  onAdd: function (map) {
	    var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom leaflet-control-command-interior');
	   	container.id = "button_customcontrol_config";
		container.innerHTML = "設定";
	    container.style.backgroundColor = 'white';
	    container.style.width = '130px';
	    container.style.height = '35px';
	    container.style.padding = '10px';
	    //container.style.fontSize = '150%';
	    container.style.textAlign = 'center';
		container.style.fontColor = '#999999';
		container.style.cursor = 'pointer';

	    container.onclick = function(){
	      console.log('buttonClicked');
	      openConfigWindow();
	    }
	    return container;
	  },
	});
	map.addControl(new customControl());
	
	//地点ボタン
	var customControl2 = L.Control.extend({
	  options: {
	    position: 'topright' 
	    //control position - allowed: 'topleft', 'topright', 'bottomleft', 'bottomright'
	  },

	  onAdd: function (map) {
	    var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom leaflet-control-command-interior');
	   	container.id = "button_customcontrol_area";
		container.innerHTML = "地図ジャンプ";
	    container.style.backgroundColor = 'white';
	    container.style.width = '130px';
	    container.style.height = '35px';
	    container.style.padding = '10px';
	    //container.style.fontSize = '150%';
	    container.style.textAlign = 'center';
		container.style.fontColor = '#999999';
		container.style.cursor = 'pointer';

	    container.onclick = function(){
	      console.log('buttonClicked');
	      openAreaWindow();
	    }
	    return container;
	  },
	});
	map.addControl(new customControl2());
	
	
	//設定ボタン
	var customControl4 = L.Control.extend({
	  options: {
	    position: 'bottomleft' 
	    //control position - allowed: 'topleft', 'topright', 'bottomleft', 'bottomright'
	  },

	  onAdd: function (map) {
	    var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom leaflet-control-command-interior');
	   	container.id = "button_customcontrol_history";
		container.innerHTML = "出現記録";
	    container.style.backgroundColor = 'white';
	    container.style.width = '130px';
	    container.style.height = '35px';
	    container.style.padding = '10px';
	    //container.style.fontSize = '150%';
	    container.style.textAlign = 'center';
		container.style.fontColor = '#999999';
		container.style.cursor = 'pointer';

	    container.onclick = function(){
	      console.log('buttonClicked');
	      openHistoryWindow();
	    }
	    return container;
	  },
	});
	map.addControl(new customControl4());
	
	console.log("debug3");
	
			//設定ボタン
		var customControl5 = L.Control.extend({
		  options: {
		    position: 'bottomright' 
		    //control position - allowed: 'topleft', 'topright', 'bottomleft', 'bottomright'
		  },

		  onAdd: function (map) {
		    var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom leaflet-control-command-interior');
		   	container.id = "button_customcontrol_push";
			container.innerHTML = "プッシュ通知";
		    container.style.backgroundColor = 'white';
		    container.style.width = '130px';
		    container.style.height = '35px';
		    container.style.padding = '10px';
		    //container.style.fontSize = '150%';
		    container.style.textAlign = 'center';
			container.style.fontColor = '#999999';
			container.style.cursor = 'pointer';

		    container.onclick = function(){
		      console.log('buttonClicked');
		      //openPushWindow();
		      request_push_token();
		    }
		    return container;
		  },
		});
		map.addControl(new customControl5());
			
	console.log("debug4");
	
	//設定読み込み
	var _tmp = cookie.get("cookie_config_viewdenylist");
	if (_tmp) {
		try{
			localStorage.setItem('viewdenylist', ''+_tmp);
			cookie.del("cookie_config_viewdenylist");
		}catch(e){
			console.log("error: localStorage.setItem: viewdenylist");
		}
	}
	try{
		var _tmp = localStorage.getItem('viewdenylist');
	}catch(e){
		console.log("error: localStorage.getItem: viewdenylist");
	}
	if (_tmp) {
		config_viewlist = parseValue(_tmp);
	}
	
	func_pokemondisable = cookie.get("cookie_func_pokemondisable");
	updateConfigButton();
	
	console.log("debug5");
	
	//捕獲済み
	try{
		var _tmp = localStorage.getItem('checklist');
	}catch(e){
		console.log("error: localStorage.getItem: checklist");
	}
	if (_tmp) {
		config_checklist = parseValue(_tmp);
	}
	
	//履歴
	var _tmp = cookie.get("cookie_config_history");
	config_history = parseValue(_tmp);
	func_historydisable = cookie.get("cookie_func_historydisable");
	updateHistoryButton();
	
	//新ポケソース設定
	func_ps = cookie.get("cookie_func_ps"); //ポケソース有効
	func_ps_onlynearby = cookie.get("cookie_func_ps_onlynearby"); //近隣のポケソースのみ
	func_ps_viewunpop = cookie.get("cookie_func_ps_viewunpop"); //出現時間外のポケソース表示
	
	/*
	//古いポケソース設定を移行
	var func_pokesource = cookie.get("cookie_func_pokesource");
	var func_pokesourceover = cookie.get("cookie_func_pokesourceover");
	if (func_pokesource == "1" || func_pokesourceover == "1") {
		cookie.del("cookie_func_pokesource");
		cookie.del("cookie_func_pokesourceover");
		cookie.del("cookie_func_pokesourcetol");
		
		//どちらかポケソース設定が有効な場合
		if (func_pokesource == "1" || func_pokesourceover == "1") {
			func_ps = "1";
			cookie.set("cookie_func_ps", func_ps);
		}
		//近隣のみ設定中の場合
		if (func_pokesource == "1" && func_pokesourceover != "1") {
			func_ps_onlynearby = "1";
			cookie.set("cookie_func_ps_onlynearby", func_ps_onlynearby);
		}
	}
	*/
	
	func_fortpokestop = cookie.get("cookie_func_fortpokestop");
	func_fortgym = cookie.get("cookie_func_fortgym");
	
	//func_disabledanger = cookie.get("cookie_func_disabledanger");
	
			//トークン取得前に環境設定を読み込んでおく
		func_pushdisable = cookie.get("cookie_func_pushdisable");
		
		config_push_ivfilter = getLocalConfig("push_ivfilter");
		if (config_push_ivfilter) {
			config_push_ivfilter = parseValue(config_push_ivfilter);
		} else {
			config_push_ivfilter = new Array();
		}
		
		configpush_movemethod = cookie.get("cookie_config_push_movemethod");
		if (!configpush_movemethod) {
			configpush_movemethod = "5";
		}
		
		configpush_distkm = cookie.get("cookie_config_push_distkm");
		if (!configpush_distkm) {
			configpush_distkm = "3";
		}
		if (parseInt(configpush_distkm) >= 8) configpush_distkm = 8;
		
		configpush_sound = cookie.get("cookie_config_push_sound");
		if (!configpush_sound || configpush_sound == "null" || configpush_sound == "undefined") configpush_sound = "";
		
		//GPSオーバーライド
		try{
			var _tmp = cookie.get("cookie_func_push_gpsoverride");
			if (_tmp) {
				func_push_gpsoverride = _tmp.split(",");
				//console.log(func_push_gpsoverride);
				
				console.log("地点ロック設定中: "+func_push_gpsoverride[0]+","+func_push_gpsoverride[1]);
				
				$("#area_customcontrol_push_mailnow_gpslocation").html("(地点ロック設定中)");
			} else {
				$("#area_customcontrol_push_mailnow_gpslocation").html("(GPSを使用)");
			}
		} catch(e) {
			console.log("ERROR: 地点ロック: "+e);
		}
		
		//トークンを読み込む
		var _tmp = cookie.get("cookie_config_push");
		config_push = parseValue(_tmp);
		if (push_cnt > 0) {
					}
		
							var _tmp = cookie.get("cookie_webpush_token");
			if (_tmp) {
				push_token = _tmp;
			} else {
				push_token = "WEBPUSH:"+uuid();
				cookie.set("cookie_webpush_token", push_token);
			}
			
			updateToken();
				
		//地点ロック中はGPS位置を置換(PCのみ)
					if (func_push_gpsoverride) {
				updateGPSLocation(parseFloat(func_push_gpsoverride[0]), parseFloat(func_push_gpsoverride[1]));
			}
				
		updatePushButton();
		
		
	try{
		var _tmp = localStorage.getItem('area_favgym');
		if (_tmp) {
			area_favgym = _tmp;
		}
	}catch(e) {
	}
	
			
	updateShortcutIcon();
		
	updateFooterHeight();
		
	setInterval(timeoutCountdown, 1000);
	
			<!-- ブラウザモード -->
					if (start_gps) {
				GPSenable();
			} else {
				GPSdisable();
			}
				
	/*
	setTimeout(function(){
		checkResizeEnd();
	}, 100);
	*/
	
	$('#area_topmessage').html('<a href="http://magical.kuku.lu/?100" target="_blank">使い方はこちら★</a>');
}

function updateShortcutIcon() {
	if (getLocalConfig("shortcut") != "1") {
		$("#area_window_leftshortcuts").css({"display": "none"});
		return;
	}
	
	$("#area_window_leftshortcuts").css({"display": "block"});
	
	var _tmp = true;
	if (func_pokemondisable == "1") {
		 _tmp = false;
	}
	setShortcutIconStyle("#icon_shortcut_pop", _tmp);
	
	_tmp = true;
	if (func_ps != "1") {
		_tmp = false;
	}
	setShortcutIconStyle("#icon_shortcut_pokesource", _tmp);
	
	_tmp = true;
	if (func_historydisable == "1") {
		_tmp = false;
	}
	setShortcutIconStyle("#icon_shortcut_history", _tmp);
	
	_tmp = true;
	if (func_fortpokestop != "1") {
		_tmp = false;
	}
	setShortcutIconStyle("#icon_shortcut_pokestop", _tmp);
	
	_tmp = true;
	if (func_fortgym != "1") {
		_tmp = false;
	}
	setShortcutIconStyle("#icon_shortcut_gym", _tmp);
}
	function setShortcutIconStyle(_target, _enable) {
		if (_enable) {
			$(_target).css({"opacity":  1, "borderLeft": "2px solid #FF7639"});
		} else {
			$(_target).css({"opacity":  0.25, "borderLeft": "2px solid #666666"});
		}
	}
	
function requestDBServerReload(_reloadwait) {
	if (!_reloadwait) _reloadwait = 300;
	
	if (timeout_requestDBServer) clearTimeout( timeout_requestDBServer );
	timeout_requestDBServer = setTimeout(function() {
		requestDBServer('viewData');
	}, _reloadwait);
}

function requestDBServerReloadWithCache() {
	if (last_protPokemonData != "") {
		protPokemon(last_protPokemonData);
		requestDBServerReload(2500);
		return;
	} else {
		requestDBServerReload(false);
	}
}

function parseCustomNameData(data) {
	var data = data.split("\n");
	var data_check = 0;
	for (var i=1; i<=151; i++) {
		if (data[i-1]) {
			if (data[i-1].indexOf("<") == -1 && data[i-1].indexOf(">") == -1) {
				data_check ++;
			}
		}
	}
	
	if (data_check >= 75.5) {
		for (var i=1; i<=151; i++) {
			if (data[i-1]) {
				if (data[i-1].indexOf("<") == -1 && data[i-1].indexOf(">") == -1) {
					var _tmpline = data[i-1];
					_tmpline = _tmpline.split("\t").join("");
					_tmpline = _tmpline.split("\r").join("");
					pokemon_table_ja[i] = ""+_tmpline;
				}
			}
		}
		
		return true;
	}
	
	return false;
}

function saveLocalConfig(_key, _value) {
	localconfig[_key] = _value;
	
	var _newconfig = "";
	for (var i in localconfig) {
		if (!localconfig[i]) continue;
		_newconfig += ""+i+"="+encodeURIComponent(localconfig[i])+";";
	}
	
	try{
		localStorage.setItem('localconfig', _newconfig);
	}catch(e) {
		console.log("error: saveLocalConfig: "+e);
	}
}

function getLocalConfig(_key) {
	try{
		if (localconfig[_key]) {
			return decodeURIComponent(localconfig[_key]);
		}
	}catch(e) {
		console.log("error: getLocalConfig: "+e);
	}
	
	return false;
}

var localconfig = new Array();
function loadLocalConfig() {
	try{
		var _tmp = localStorage.getItem('localconfig');
		if (_tmp) {
			localconfig = parseValue(_tmp);
		}
	}catch(e) {
		console.log("error: loadLocalConfig: "+e);
	}
}

//var mode_smarticon = false;
var push_cnt = 0;

function updateSmarticon() {
	
	//if (mode_smarticon) {
		//$("#area_buttonsearch").css({"display": "none"});
		
		if (denylist_cnt > 0) {
			$("#button_customcontrol_config").html("<div style='position:fixed;z-index:100;text-align:right;width:30px;font-weight:bold;color:red;padding-top:14px;'>"+denylist_cnt+"</div><img src='https://img-pmap.aquapal-cdn.net/img/icon_config.png' width='30'>");
		} else {
			$("#button_customcontrol_config").html("<img src='https://img-pmap.aquapal-cdn.net/img/icon_config.png' width='30'>");
		}
		$("#button_customcontrol_config").css({"width": "40px", "padding": "2px"});
		
		$("#button_customcontrol_area").html("<img src='https://img-pmap.aquapal-cdn.net/img/icon_area.png' width='30'>");
		$("#button_customcontrol_area").css({"width": "40px", "padding": "2px"});
		
		if (history_cnt > 0) {
			$("#button_customcontrol_history").html("<div style='position:fixed;z-index:100;text-align:right;width:30px;font-weight:bold;color:green;padding-top:14px;'>"+history_cnt+"</div><img src='https://img-pmap.aquapal-cdn.net/img/icon_history.png' width='30'>");
		} else {
			$("#button_customcontrol_history").html("<img src='https://img-pmap.aquapal-cdn.net/img/icon_history.png' width='30'>");
		}
		$("#button_customcontrol_history").css({"width": "40px", "padding": "2px"});
		
		if (push_cnt > 0) {
			$("#button_customcontrol_push").html("<div style='position:fixed;z-index:100;text-align:right;width:30px;font-weight:bold;color:green;padding-top:14px;'>"+push_cnt+"</div><img src='https://img-pmap.aquapal-cdn.net/img/icon_push.png' width='30'>");
		} else {
			$("#button_customcontrol_push").html("<img src='https://img-pmap.aquapal-cdn.net/img/icon_push.png' width='30' style='opacity:0.5;'>");
		}
		$("#button_customcontrol_push").css({"width": "40px", "padding": "2px"});
	}


var _tilelayer;
function setupTileLayer() {
	if (_tilelayer) {
		_tilelayer.remove();
		_tilelayer = null;
	}
	
	var _maxzoom = 18;
	var _minzoom = 6;
	var _opacity = 1;
	var _maptile_path = "https://{s}-pmap.aquapal-cdn.net/maptile2/{z}/{x}/{y}.png";
	var _attribution = '&copy; <a href="http://openstreetmap.org" target="_blank">OpenStreetMap</a>';
	if (config_map_style != "") {
		if (config_map_style == "maptile3") {
			_maptile_path = "https://{s}-pmap.aquapal-cdn.net/maptile3/{z}/{x}/{y}.png";
			_attribution = '&copy; <a href="http://openstreetmap.org" target="_blank">OpenStreetMap</a>';
			_opacity = 0.65;
		}
		if (config_map_style == "skyphoto") {
			_maptile_path = "https://cyberjapandata.gsi.go.jp/xyz/ort/{z}/{x}/{y}.jpg";
			_attribution = '&copy; <a href="http://maps.gsi.go.jp/development/ichiran.html" target="_blank">国土地理院</a>';
			_opacity = 0.65;
		}
		if (config_map_style == "skyphoto_old") {
			_maptile_path = "https://cyberjapandata.gsi.go.jp/xyz/gazo1/{z}/{x}/{y}.jpg";
			_attribution = '&copy; <a href="http://maps.gsi.go.jp/development/ichiran.html" target="_blank">国土地理院</a>';
			_maxzoom = 17;
			_minzoom = 10;
			_opacity = 0.65;
		}
	}
	
	_tilelayer = L.tileLayer(_maptile_path, {
	    attribution: _attribution,
	    maxZoom: _maxzoom,
	    minZoom: _minzoom,
	    reuseTiles: true,
	    opacity: _opacity
	}).addTo(map);
}

var areaviewbox_buffer = new Array();
function drawRectMap(_loc1, _loc2) {
	var _areaviewbox = L.rectangle([[_loc1 - 0.004, _loc2 - 0.0055], [_loc1 + 0.004, _loc2 + 0.0055]], {color: "#fbaf4a", weight: 2, opacity:0.5, fillOpacity:0.3, dashArray: "5 5"});
	_areaviewbox.addTo(map);
	
	areaviewbox_buffer[ areaviewbox_buffer.length ] = _areaviewbox;
}

	function clearRectMapAll() {
		for (var i in areaviewbox_buffer) {
			areaviewbox_buffer[i].remove();
		}
		
		areaviewbox_buffer = new Array();
	}

var Table_AreaData = new Array();
	
var Table_MoveMethod = new Array();
	Table_MoveMethod[1] = "ほふく";
	Table_MoveMethod[5] = "徒歩";
	Table_MoveMethod[8] = "競歩";
	Table_MoveMethod[10] = "走り";
	Table_MoveMethod[15] = "自転車";
	Table_MoveMethod[17] = "猫ひろし";
	Table_MoveMethod[20] = "立ち漕ぎ";
	Table_MoveMethod[30] = "原付";
	Table_MoveMethod[40] = "車";
	Table_MoveMethod[44] = "ウサインボルト";
	Table_MoveMethod[110] = "チーター";
	Table_MoveMethod[140] = "プロボックス";
	Table_MoveMethod[270] = "新幹線";
	Table_MoveMethod[1000] = "飛行機";
	Table_MoveMethod[12144] = "X-43";
	
	
	

	function openPushWindow() {
		try {
			var _masterarea = document.getElementById('area_customcontrol_push');
			if (_masterarea.style.display == "block") {
				closePushWindow();
			} else {
				_masterarea.style.width = '100%';
				_masterarea.style.left = '0px';
				
				_masterarea.style.top = '70px';
				updateFooterHeight();
				
				_masterarea.style.display = "block";
				viewWindowCloseButton(true);
				
				var _viewhtml = "";
				for (var i=1; i<=151; i++) {
					var _color = "rgba(221,216,213,0.5)";
					if (config_push[i] == "1") {
						_color = "rgba(251,157,0,0.8)";
					}
					_viewhtml += "<div id='area_pushwindow_list_"+i+"'><div id='area_pushwindow_list_button_"+i+"' style='clear:both;float:left;width:240px;font-size:13px;cursor:pointer;padding:3px;margin:3px;background-color:"+_color+";' onclick='togglePushList("+i+");'><img src='"+getIconImage(i)+"' width='20'> "+pokemon_table_ja[i]+"</div><div style='float:left;padding:3px;width:80px;font-size:12px;cursor:pointer;' onclick='togglePushIVFilter("+i+");'><img id='icon_pushconf_iv_"+i+"' src='https://img-pmap.aquapal-cdn.net/img/icon_push_iv"+getPushIVFilterNumber(i)+".png?v=3' height='33'></div></div>";
				}
				
				$("#area_customcontrol_push_list").html(_viewhtml+"<div style='clear:both;'></div>");
				
				old_search_push_filter = "";
				
				$("#area_configpush_movemethod").val(""+configpush_movemethod);
				$("#area_configpush_distkm").val(""+configpush_distkm);
				$("#area_configpush_sound").val(""+configpush_sound);
				
				clearInterval(timer_checkPushWindow);
				timer_checkPushWindow = setInterval(checkPushWindow, 100);
				checkPushWindow();
			}
		} catch(e) {
			console.log("openPushWindow(): error: "+e);
		}
	}
	
		var config_push_ivfilter = new Array();
		function togglePushIVFilter(_target) {
			if (config_push_ivfilter[_target]) { config_push_ivfilter[_target] = parseInt(config_push_ivfilter[_target]); }
			
			if (config_push_ivfilter[_target] == 100) {
				config_push_ivfilter[_target] = 0;
			} else if (config_push_ivfilter[_target] == 95 || config_push_ivfilter[_target] == 90 || config_push_ivfilter[_target] == 85 || config_push_ivfilter[_target] == 80 || config_push_ivfilter[_target] == 75 || config_push_ivfilter[_target] == 70) {
				config_push_ivfilter[_target] += 5;
			} else {
				//config_push_ivfilter[_target] = 70;
				config_push_ivfilter[_target] = 85;
			}
			
			document.getElementById("icon_pushconf_iv_"+_target+"").src = "https://img-pmap.aquapal-cdn.net/img/icon_push_iv"+config_push_ivfilter[_target]+".png?v=3";
			
			var _newconfig = "";
			for (var i in config_push_ivfilter) {
				if (!config_push_ivfilter[i] || config_push_ivfilter[i] == undefined) continue;
				_newconfig += ""+i+"="+config_push_ivfilter[i]+";";
			}
			saveLocalConfig("push_ivfilter", _newconfig);
		}
		function getPushIVFilterNumber(_target) {
			if (config_push_ivfilter[_target]) {
				return parseInt(config_push_ivfilter[_target]);
			}
			
			return "0";
		}
	
		var timer_checkPushWindow = false;
		var old_search_push_filter = "";
		function checkPushWindow() {
			if (old_search_push_filter != $("#search_push_filter").val()) {
				old_search_push_filter = $("#search_push_filter").val();
				
				checkPokemonFilter("area_pushwindow_list", old_search_push_filter);
			}
		}
	
		var timer_failed_request_push_token = false;
		function request_push_token() {
						
			next_push_window_open = true;
			
						
							openPushWindow();
					}
		
			function openPushMailnowLoginWindow() {
				try {
					var _masterarea = document.getElementById('area_customcontrol_push_mailnowlogin');
					_masterarea.style.width = '100%';
					_masterarea.style.left = '0px';
					
					_masterarea.style.top = '70px';
					updateFooterHeight();
						
					_masterarea.style.display = "block";
				} catch(e) {
					console.log("openPushMailnowLoginWindow(): error: "+e);
				}
			}
			
			function closePushMailnowLoginWindow() {
				try {
					$("#area_customcontrol_push_mailnowlogin").css({"display": "none"});
				} catch(e) {
					console.log("closePushMailnowLoginWindow(): error: "+e);
				}
			}
			
				var mailnowlogin_number = "";
				var mailnowlogin_password = "";
				function MailNowLogin() {
					if ($("#mailnowlogin_password").val() != "") {
						mailnowlogin_password = $("#mailnowlogin_password").val();
					}
					if ($("#mailnowlogin_id").val() != "") {
						mailnowlogin_number = $("#mailnowlogin_id").val();
					}
					
					if (mailnowlogin_number != "" && mailnowlogin_password != "") {
					
						closePushMailnowLoginWindow();
						
						$.ajax({
						    url: "_mailnow_login.php",
						    type: "POST",
						    data: "action=checkAccountLogin2&number="+encodeURIComponent(mailnowlogin_number)+"&userpass="+encodeURIComponent(mailnowlogin_password),
						    timeout: 10000,
						    cache: false
						}).done(function(data, status, xhr) {
							var _ent = parseValue(data);
							if (_ent["result"] == "OK") {
								//mailnowlogin_number = $("#mailnowlogin_id").val();
								//mailnowlogin_password = $("#mailnowlogin_password").val();
								push_token = "MAILNOW2:"+mailnowlogin_number+":"+mailnowlogin_password;
								
								$("#area_customcontrol_push_mailnow_targetaddr").html(mailnowlogin_number);
								
								cookie.set("cookie_mailnowlogin_number", mailnowlogin_number);
								cookie.set("cookie_mailnowlogin_password", mailnowlogin_password);
								
								openPushWindow();
							} else if (_ent["result"] == "NG") {
								openAlertWindow("捨てメアドのIDまたはパスワードが間違っています。再度ご確認ください。", 
								function(){
									openPushMailnowLoginWindow();
								}, 
								false);
							} else {
								openAlertWindow("通信エラーが発生しました。再度お試しください。", 
								function(){
									openPushMailnowLoginWindow();
								}, 
								false);
							}
						}).fail(function(xhr, status, error) {
							openAlertWindow("通信エラーが発生しました。再度お試しください。", 
							function(){
								openPushMailnowLoginWindow();
							}, 
							false);
						});
					
					} else {
						
						openPushMailnowLoginWindow();
						
					}
				}
				
				function MailNowLogout() {
					$("#mailnowlogin_password").val("");
					mailnowlogin_password = "";
					push_token = "";
					
					closePushWindow();
					openPushMailnowLoginWindow();
				}
		
		function failed_request_push_token() {
			if (push_token == "" || push_token == "deny") {
				openAlertWindow("プッシュ通知を有効にできませんでした。iOSのアプリ設定を確認してください。", 
				function(){}, 
				false);
			}
		}
			
		var push_token = "";
		var next_push_window_open = false;
		function setPushToken(_token) {
			push_token = _token;
			
			clearTimeout(timer_failed_request_push_token);
			
			if (push_token == "" || push_token == "deny") {
				failed_request_push_token();
				return;
			}
			
			updateToken();
			
			if (next_push_window_open) {
				next_push_window_open = false;
				openPushWindow();
			}
		}
		
		var lasttime_serverRequestPushLocation = 0;
		function serverRequestPushLocation(_loc1, _loc2, _reloadwait) {
			console.log("serverRequestPushLocation: "+_loc1+", "+_loc2);
			
			if (func_push_gpsoverride) {
				_loc1 = func_push_gpsoverride[0];
				_loc2 = func_push_gpsoverride[1];
			}
			
			if (push_token == "" || push_token == "deny") {
				console.log("serverRequestPushLocation: token ERROR: "+push_token);
				return;
			}
			if (func_pushdisable == "1") {
				console.log("serverRequestPushLocation: func_pushdisable != 1");
				return;
			}
				
			if (_reloadwait) {
				if (push_cnt <= 0) {
					console.log("serverRequestPushLocation: push_cnt = 0");
					return;
				}
			
				if ((new Date()).getTime() - lasttime_serverRequestPushLocation <= 5*1000) {
					//5秒以内に更新している
					console.log("serverRequestPushLocation: reloadwait");
					return;
				}
			}
			lasttime_serverRequestPushLocation = (new Date()).getTime();
			
			console.log("serverRequestPushLocation: "+_loc1+", "+_loc2);
			
			
			var _config_push_enables = "";
			for (var i in config_push) {
				if (!i || config_push[i] != "1") continue;
				
				if (_config_push_enables != "") _config_push_enables += ",";
				
				_config_push_enables += ""+i;
				
				if (config_push_ivfilter[i] && parseInt(config_push_ivfilter[i]) > 0) {
					_config_push_enables += "@"+parseInt(config_push_ivfilter[i]);
				}
			}
			var _pid_namelist = "";
			if (_config_push_enables != "") {
				var _pids = _config_push_enables.split(",");
				for (var i=0; i<_pids.length; i++) {
					if (_pids[i]) {
						var _tmp = _pids[i].split("@");
						_pid_namelist = "" + _pid_namelist + _tmp[0] +"="+ pokemon_table_ja[_tmp[0]]+";";
					}
				}
				
				console.log("_pid_namelist: "+_pid_namelist);
			}
			
			console.log("_config_push_enables: "+_config_push_enables);
			
			$.ajax({
			    url: "https://sv-pushsv-db1-web.pmap.kuku.lu/_pushserver.php",
			    type: "GET",
			    data: "action=updateLocation&movemethod="+encodeURIComponent(configpush_movemethod)+"&distkm="+encodeURIComponent(configpush_distkm)+"&sound="+encodeURIComponent(configpush_sound)+"&pid_namelist="+encodeURIComponent(_pid_namelist)+"&token="+encodeURIComponent(push_token)+"&loc1="+encodeURIComponent(_loc1)+"&loc2="+encodeURIComponent(_loc2),
			    timeout: 10000,
			    cache: false
			}).done(function(data, status, xhr) {
				
				if (data.indexOf("OK:") == 0) {
					var _tmploc = data.split("OK:");
					if (_tmploc[1]) {
						
						//alert("プッシュ更新成功!");
						
						if (func_push_gpsoverride) {
							$("#area_customcontrol_push_mailnow_gpslocation").html("地点ロック: <a href='javascript:closePushWindow();jumpMapArea(\""+_tmploc[1]+"\");'>"+_tmploc[1]+"</a>");
						} else {
							$("#area_customcontrol_push_mailnow_gpslocation").html("GPS: <a href='javascript:closePushWindow();jumpMapArea(\""+_tmploc[1]+"\");'>"+_tmploc[1]+"</a>");
						}
					} else {
						$("#area_customcontrol_push_mailnow_gpslocation").html("(現在位置更新: サーバ側エラーで失敗しました)");
					}
				} else {
					$("#area_customcontrol_push_mailnow_gpslocation").html("(現在位置更新: サーバ側エラーで失敗しました)");
				}
				//alert("debug1: "+data);
			}).fail(function(xhr, status, error) {
			});
		}
	
		function serverRequestPushConfig(_pid_list) {
			if (push_token == "" || push_token == "deny") {
				return;
			}
			
			var _latlng = getCenterMap();
			
			if (func_pushdisable == "1") {
				_pid_list = "";
			}
			
			var _pid_namelist = "";
			if (_pid_list != "") {
				var _pids = _pid_list.split(",");
				for (var i=0; i<_pids.length; i++) {
					if (_pids[i]) {
						var _tmp = _pids[i].split("@");
						_pid_namelist = "" + _pid_namelist + _tmp[0] +"="+ pokemon_table_ja[_tmp[0]]+";";
					}
				}
				
				console.log("_pid_namelist: "+_pid_namelist);
			}

			$.ajax({
			    url: "https://sv-pushsv-db1-web.pmap.kuku.lu/_pushserver.php",
			    type: "GET",
			    data: "action=registerToken&func_disabledanger="+encodeURIComponent(func_disabledanger)+"&movemethod="+encodeURIComponent(configpush_movemethod)+"&sound="+encodeURIComponent(configpush_sound)+"&distkm="+encodeURIComponent(configpush_distkm)+"&token="+encodeURIComponent(push_token)+"&pid_list="+encodeURIComponent(_pid_list)+"&pid_namelist="+encodeURIComponent(_pid_namelist)+"&loc1="+encodeURIComponent(_latlng[0])+"&loc2="+encodeURIComponent(_latlng[1]),
			    timeout: 10000,
			    cache: false
			}).done(function(data, status, xhr) {
				
				if (data.indexOf("result=OK;") != -1) {
					var _ent = parseValue(data);
					
					if (_ent["pushstatus"] == "ENABLED") {
						if (func_push_gpsoverride) {
							$("#area_customcontrol_push_mailnow_gpslocation").html("ロック: <a href='javascript:closePushWindow();jumpMapArea(\""+_ent["loc"]+"\");'>"+_ent["loc"]+"</a>");
						} else {
							$("#area_customcontrol_push_mailnow_gpslocation").html("GPS記録: <a href='javascript:closePushWindow();jumpMapArea(\""+_ent["loc"]+"\");'>"+_ent["loc"]+"</a>");
						}
					} else if (_ent["pushstatus"] == "NOLOCATION") {
						$("#area_customcontrol_push_mailnow_gpslocation").html("(位置情報登録なし)");
					}
				}
				
			}).fail(function(xhr, status, error) {
			});
			

			if (func_push_gpsoverride) {
				serverRequestPushLocation(func_push_gpsoverride[0], func_push_gpsoverride[1], false);
			}
		}

		function allChangePush(_new) {
			for (var i=1; i<=151; i++) {
				if ((_new == "0" && config_push[i] != "0" && config_push[i]) || (_new == "1" && config_push[i] != "1")) {
					togglePushList(i);
				}
			}
		}

		var config_push = new Array();
		function togglePushList(_target) {
			try {
				if (config_push[_target] == "1") {
					config_push[_target] = "0";
				} else {
					if (push_cnt >= 16) {
						return;
					}

					config_push[_target] = "1";
				}
				
				var _color = "";
				var _display = "";
				if (config_push[_target] == "1") {
					//ON
					_color = "rgba(251,157,0,0.8)";
					_display = "block";
				} else {
					//OFF
					_color = "rgba(221,216,213,0.5)";
				}
				document.getElementById("area_pushwindow_list_button_"+_target).style.backgroundColor = _color;
				document.getElementById("icon_pushconf_iv_"+_target).style.display = "";
				
				//設定保存
				var _newconfig = "";
				for (var i in config_push) {
					if (!i || config_push[i] != "1") continue;
					_newconfig += ""+i+"="+config_push[i]+";";
				}
				cookie.set("cookie_config_push", _newconfig);
				
				updatePushButton();
			
			} catch(e) {
				console.log("togglePushList(): error: "+e);
			}
			
		}
		
		var configpush_movemethod = "";
		var configpush_distkm = "";
		var configpush_sound = "";
		function closePushWindow() {
			try {
				var _masterarea = document.getElementById('area_customcontrol_push');
				if (_masterarea.style.display != "block") return;
				
				_masterarea.style.display = "none";
				
				clearInterval(timer_checkConfigWindow);
				
				configpush_movemethod = $("#area_configpush_movemethod").val();
				cookie.set("cookie_config_push_movemethod", configpush_movemethod);
				
				configpush_distkm = $("#area_configpush_distkm").val();
				cookie.set("cookie_config_push_distkm", configpush_distkm);
				
				configpush_sound = $("#area_configpush_sound").val();
				cookie.set("cookie_config_push_sound", configpush_sound);
				
				$("#area_push_log").css({"display": "none"});
				
				updateToken();
				
				viewWindowCloseButton(false);
			} catch(e) {
				console.log("closePushWindow(): error: "+e);
			}
		}
		
		var push_setpid = new Array();
		function updateToken() {
			var _config_push_enables = "";
			for (var i in config_push) {
				if (!i || config_push[i] != "1") continue;
				
				if (_config_push_enables != "") _config_push_enables += ",";
				_config_push_enables += ""+i;
				
				if (config_push_ivfilter[i] && parseInt(config_push_ivfilter[i]) > 0) {
					_config_push_enables += "@"+parseInt(config_push_ivfilter[i]);
				}
				
				push_setpid[i] = true;
			}
			
			console.log("updateToken(): _config_push_enables: "+_config_push_enables);
			
			serverRequestPushConfig(_config_push_enables);
		}
		
		var func_pushdisable = "";
		function togglePushDisable() {
			if (func_pushdisable == "1") {
				func_pushdisable = "";
			} else {
				func_pushdisable = "1";
			}
			
			cookie.set("cookie_func_pushdisable", func_pushdisable);
			
			updatePushButton();
		}
		
		function updatePushButton() {
			var _push_cnt = 0;
			if (func_pushdisable == "1") {
				$("#area_push_data").css({"display": "none"});
				$("#button_push_disable").val("オンにする");
			} else {
				$("#area_push_data").css({"display": "block"});
				$("#button_push_disable").val("オフにする");
				
				for (var i=1; i<=151; i++) {
					if (config_push[i] == "1") {
						_push_cnt ++;
					}
				}
			}
			
			/*
			if (_push_cnt > 0) {
				$("#button_customcontrol_push").html("プッシュ通知 <span style='color:green'>("+_push_cnt+")</span>");
			} else {
				$("#button_customcontrol_push").html("プッシュ通知");
			}
			*/
			
			push_cnt = _push_cnt;
			
			updateSmarticon();
		}
		
		function requestPushLog() {
			if ($("#area_push_log").css("display") == "block") {
				$("#area_push_log").css({"display": "none"});
				return;
			}
			
			$("#area_push_log").css({"display": "block"});
			$("#area_push_log_list").html("<font color='#cccccc'>(データ受信中...)</font>");
			
			$.ajax({
			    url: "https://sv-pushsv-db1-web.pmap.kuku.lu/_pushserver.php",
			    type: "GET",
			    data: "&action=getPushLog&token="+encodeURIComponent(push_token),
			    timeout: 10000,
			    cache: false
			}).done(function(data, status, xhr) {
				var _viewhtml = "";
				
				if (data.indexOf("action=pushlog;") != -1) {
					var data = data.split("\n");
					for (var i=0; i<data.length; i++) {
						var _ent = parseValue(data[i]);
						if (_ent["action"] == "pushlog") {
							
							var _bgcolor = "rgba(221,216,213,0.5)";
							if (_ent["result"] == 1) {
								_bgcolor = "rgba(251,157,0,0.5)";
							}
							
							_viewhtml += "<div onclick='closePushWindow();jumpMapArea(\""+_ent["pokemon_loc"]+"\");' style='width:80%;background-repeat:no-repeat;background-image:url("+getIconImage(_ent["pid"])+");background-color:"+_bgcolor+";cursor:pointer;font-size:80%;margin-bottom:3px;padding:5px;padding-left:50px;'>";
							
							_viewhtml += "["+_ent["date"]+"] ";
							
							
							_viewhtml += "<b>"+pokemon_table_ja[_ent["pid"]]+"</b> ";
							
							if (_ent["lure"] == "1") {
								_viewhtml += "(ルアー) ";
							} else {
								_viewhtml += "";
							}
							
							_viewhtml += "残り"+viewSecToTime(_ent["timeleft"])+", ";
							
							var _tmp_pokemon_loc = _ent["pokemon_loc"].split(",");
							var _tmp_my_loc = _ent["my_loc"].split(",");
							var _tmp_dist = getDistance(parseFloat(_tmp_pokemon_loc[0]), parseFloat(_tmp_pokemon_loc[1]), parseFloat(_tmp_my_loc[0]), parseFloat(_tmp_my_loc[1]));
							_viewhtml += '距離'+viewmeter(_tmp_dist)+", ";
							
							_viewhtml += "所要時間"+viewSecToTime(MeterToMoveMethodSec(_tmp_dist, _ent["movemethod"]))+"";
							
							if (_ent["result"] == 1) {
								_viewhtml += '<div style="font-size:70%;">'+_ent["date"]+'に通知を送信しました。</div>';
							} else {
								_viewhtml += '<div style="font-size:70%;">消滅時間までに間に合わないため通知されませんでした。</div>';
							}
							
							_viewhtml += '</div>';
						}
					}
				}
				
				if (_viewhtml != "") {
					$("#area_push_log_list").html(_viewhtml);
				} else {
					$("#area_push_log_list").html("<font color='green'>(記録なし)</font>");
				}
			}).fail(function(xhr, status, error) {
			    $("#area_push_log_list").html("<font color='red'>データ受信エラー</font>");
			});
		}
	
	
var _reportloc = "";
function openReport(_key) {
	try {
		var _masterarea = document.getElementById('area_report');

		_masterarea.style.width = '100%';
		_masterarea.style.top = '70px';
		
		var _tmp = _key.split(",");
		_reportloc = ""+_tmp[0]+","+_tmp[1];
		$("#area_report_loc").html("<a href='javascript:jumpMapArea(\""+_tmp[0]+","+_tmp[1]+"\");'>"+_tmp[0]+", "+_tmp[1]+"</a>");
		
		_masterarea.style.display = "block";
		viewWindowCloseButton(true);
	} catch(e) {
		console.log("openReport(): error: "+e);
	}
}

	function sendReport() {
		if (!$("#area_report_reason").val() || $("#area_report_reason").val() == "") {
			return;
		}
		
		$.ajax({
		    url: "https://sv-webdb1.pmap.kuku.lu/webdb._server.php",
		    type: "POST",
		    data: "&uukey=39aa0e9c09e006a6d0ce427a33f84135&sysversion=1001&action=sendReport&loc="+encodeURIComponent(_reportloc)+"&reason="+encodeURIComponent($("#area_report_reason").val()),
		    timeout: 10000,
		    cache: false
		}).done(function(data, status, xhr) {
			if (data == "OK") {
				closeReport();
			    openAlertWindow("報告が完了しました。ありがとうございました！ お寄せいただきました情報はキッズトレーナーの安全確保に役立てさせていただきます。", function(){}, false);
		    } else {
		    	openAlertWindow("申請に失敗しました。非対応地域（日本国外）であるか、サーバー側エラーです。再度お試しください。", function(){}, false);
		    }
		}).fail(function(xhr, status, error) {
		    openAlertWindow("ネットワーク接続に失敗しました。再度お試しください。", function(){}, false);
		});
	}

	function closeReport() {
		try {
			var _masterarea = document.getElementById('area_report');
			if (_masterarea.style.display != "block") return;
			
			_masterarea.style.display = "none";
			
			viewWindowCloseButton(false);
		} catch(e) {
			console.log("closeReport(): error: "+e);
		}
	}
	
var timer_checkAreaWindow = false;
var loaded_arealists = false;
function openAreaWindow() {
	try {
		var _masterarea = document.getElementById('area_customcontrol_area');
		if (_masterarea.style.display == "block") {
			closeAreaWindow();
		} else {
			closeSearchmobResult();
			
			_masterarea.style.width = '100%';
			_masterarea.style.right = '0px';
			
			_masterarea.style.top = '70px';
			updateFooterHeight();
			
			viewWindowCloseButton(true);
			
		   	//お気に入りジム
			if ($("#area_favgymlist_master").css("display") == "block") {
				requestFavGymList();
			}
		   	
		   	//お気に入り地点
	   		$("#area_customcontrol_area_favarea").html("");
	   		$("#area_customcontrol_area_favarea").css({"display": "none"});
	   				
		   	var _tmp = localStorage.getItem('area_fav');
		   	if (_tmp) {
		   		var _viewhtml = "";
		   		var _areafav = parseValue(_tmp);
		   		for (var i in _areafav) {
	   				_viewhtml += "<div id='area_favarea_"+i+"' style='clear:both;float:left;width:300px;cursor:pointer;padding:3px;margin:3px;margin-bottom:10px;background-color:rgba(251,157,0,0.5);' onclick='jumpMapArea(\""+i+"\");'>"+_areafav[i]+"</div><div style='float:left;padding:3px;width:30px;' onclick='confirmDeleteFavArea(\""+i+"\");'><img src='img/icon_close.png' height='30'></div>";
	   			}
	   	
	   			if (_viewhtml != "") {
	  		 		$("#area_customcontrol_area_favarea").html(_viewhtml+"<div style='clear:both;'></div>");
	  		 		$("#area_customcontrol_area_favarea").css({"display": "block"});
	  		 	}
		   	}
		   	
		   	//出現中個体検索
			_viewhtml = "";
			for (var i=1; i<=151; i++) {
				_color = "rgba(251,157,0,0.8)";
				_viewhtml += "<div id='area_searchmob_list_"+i+"' style='width:260px;cursor:pointer;padding:3px;margin:3px;background-color:"+_color+";' onclick='jumpSearchMobList("+i+");'><img src='"+getIconImage(i)+"' width='20'> "+pokemon_table_ja[i]+"</div>";
			}
			$("#area_customcontrol_searchmob_data_list").html(_viewhtml);
		   	
		   	//
		   	old_search_area_filter = "";
		   	old_search_searchmob_filter = "";
			
			clearInterval(timer_checkAreaWindow);
			timer_checkAreaWindow = setInterval(checkAreaWindow, 100);
			checkAreaWindow();
			
			_masterarea.style.display = "block";
			
			//getAreaGeolocationRanking();
		}
	} catch(e) {
		console.log("openAreaWindow(): error: "+e);
	}
}

	function openFavGymList() {
		toggleView("area_favgymlist_master");
		if ($("#area_favgymlist_master").css("display") == "none") return;
		
		requestFavGymList();
	}
	
		function requestFavGymList() {
			
			$("#area_customcontrol_area_favgym").html("");
	   				
		   	var _tmp = localStorage.getItem('area_favgym');
		   	if (_tmp) {
		   		
	  			$("#area_customcontrol_area_favgym").html("<div style='padding:15px;text-align:center;color:#666666;'>読み込み中...</div>");
		   		
		   		var _viewhtml = "";
		   		var _gymfav = parseValue(_tmp);
		   		
	  		 	var _locs = "";
	  		 	for (var i in _gymfav) {
	  		 		if (_locs) { _locs += ";"; }
	  		 		_locs += ""+i;
	  		 	}
	  		 	
				$.ajax({
				    url: "https://"+using_dbserver+"/_dbserver.php?uukey=39aa0e9c09e006a6d0ce427a33f84135&sysversion=1001&action=getGymLists&locs="+encodeURIComponent(_locs),
				    type: "GET",
				    data: "",
				    timeout: 10000,
				    cache: false
				}).done(function(data, status, xhr) {
					var _viewhtml = "";
					var _getdata = new Array();
					if (data.indexOf("action=fort;") != -1) {
						
						var data = data.split("\n");
						for (var i=0; i<data.length; i++) {
							var _ent = parseValue(data[i]);
							if (_ent["action"] == "fort") {
						   		_getdata[_ent["loc"]] = _ent;
							}
						}
					}
						
			   		for (var i in _gymfav) {
			   			var _loc = i.split(",");
			   			var _ent = _getdata[ mRound(_loc[0],9)+","+mRound(_loc[1],9) ];
			   			_ent["gym_level"] = viewGymLevel(_ent["gym_points"]);
			   			var _lefttime = (new Date()).getTime() - (_ent["time_update"]*1000);
			   			
			   			var _gymname = _gymfav[i];
			   			if (_gymname == i) {
			   				_gymname = "";
			   			}
			   			
			   			_gymdata = "<div style='font-size:90%;'>"+_gymname+"<span style='font-size:90%;'> ("+comma(_ent["gym_points"])+" / "+comma(viewNextGymLevelPoint(_ent["gym_points"]))+")</span></div>";
			   			
			   			_addmsg = "";
						if (gpslog_loc) {
							var _meter = parseInt(getDistance(gpslog_loc.latitude, gpslog_loc.longitude, parseFloat(_loc[0]), parseFloat(_loc[1])));
							_addmsg = "距離 "+viewmeter(_meter)+"";
							
							try{
								var _movetime = MeterToMoveMethodSec(_meter,4);
																	if (configpush_movemethod) {
										_movetime = MeterToMoveMethodSec(_meter,parseInt(configpush_movemethod));
									}
																	
								_addmsg = "所要時間 "+viewSecToTime(_movetime)+" ("+viewmeter(_meter)+")";
							} catch(e) {
								console.log("error: 移動手段検出(searchmobhit):"+e);
							}
							
							_gymdata += "<div style='font-size:80%;'>"+_addmsg+"</div>";
						}
			   			
			   			_gymdata += "<div style='font-size:70%;'>取得後 "+viewSecToTime(Math.ceil(_lefttime/1000))+" 経過した情報です</div>";
			   			
						var _iconimg = "gym_white.png";
						var _bgcolor = "#E5E5E5";
						if (_ent["owned_by_team"] == 1) {
							_iconimg = "gym/blue"+_ent["gym_level"]+".png";
							_bgcolor = "#B8DCFF";
						} else if (_ent["owned_by_team"] == 2) {
							_iconimg = "gym/red"+_ent["gym_level"]+".png";
							_bgcolor = "#FFCAD9";
						} else if (_ent["owned_by_team"] == 3) {
							_iconimg = "gym/yellow"+_ent["gym_level"]+".png?v=1";
							_bgcolor = "#FFF89F";
						}
			   			
		   				_viewhtml += "<div id='area_favgym_"+i+"' style='background-repeat:no-repeat;background-size:40px auto;background-image:url(https://img-pmap.aquapal-cdn.net/img/"+_iconimg+");clear:both;float:left;width:300px;cursor:pointer;padding:3px;margin:3px;margin-bottom:10px;padding-left:40px;background-color:"+_bgcolor+";' onclick='jumpMapArea(\""+i+"\");'>"+_gymdata+"</div><div style='float:left;padding:3px;width:30px;' onclick='confirmDeleteFavGym(\""+i+"\");'><img src='img/icon_close.png' height='30'></div>";
		   			}
		   	
		   			if (_viewhtml != "") {
		  		 		$("#area_customcontrol_area_favgym").html(_viewhtml+"<div style='clear:both;'></div>");
		  		 		$("#area_customcontrol_area_favgym").css({"display": "block"});
		  		 	}
					
				}).fail(function(xhr, status, error) {
	  		 		$("#area_customcontrol_area_favgym").html("<div style='padding:15px;text-align:center;color:red;'>データ受信エラー</div>");
	  		 		$("#area_customcontrol_area_favgym").css({"display": "block"});
				});
		   	}
			
		}

	function openAreaList() {
		//トレーナーの多い地点
		if (!loaded_arealists) {
			$.ajax({
			    url: "./index._arealists.php",
			    type: "GET",
			    data: "&action=getAreaLists",
			    timeout: 10000,
			    cache: false
			}).done(function(data, status, xhr) {
				if (data.indexOf("action=arealist;") != -1) {
					var data = data.split("\n");
					for (var i=0; i<data.length; i++) {
						var _ent = parseValue(data[i]);
						if (_ent["action"] == "arealist") {
							Table_AreaData[parseInt(_ent["cnt"])] = {name: _ent["name"], loc1: parseFloat(_ent["loc1"]), loc2: parseFloat(_ent["loc2"])};
						}
					}
					
					loaded_arealists = true;
					setupAreaLists();
				}
			}).fail(function(xhr, status, error) {
			    openAlertWindow("「トレーナーの多い地域」をサーバから取得できませんでした。再度お試しください。", function(){}, false);
			});
		} else {
			setupAreaLists();
		}
		
		toggleView("area_arealist_master");
	}

	var area_fav_list = "";
	function openAddFavArea() {
		closeAreaWindow();
		
		var _tmp = localStorage.getItem('area_fav');
		if (_tmp) {
			if (count(parseValue(_tmp)) >= 256) {
				openAlertWindow('お気に入り地点への登録数が多すぎます。古いものを削除してから登録してください。', function(){
				}, false);
				
				return;
			}
		}
		
		openAlertWindow('<div>現在地図で表示している地点をお気に入り地点として登録します。あとでわかりやすいよう、名前をつけることができます。</div><div style="padding:5px;">場所の名称: <input id="input_addfav_name" type="text" style="width:300px;" value="" placeholder="例）バケモンの巣"></div>', function(){
			
			var _latlng = map.getCenter();
			
			var _areaname = $("#input_addfav_name").val();
			if (_areaname == "") {
				_areaname = "座標("+mRound(_latlng.lat, 5)+", "+mRound(_latlng.lng, 5)+")";
			}
			
			var _keyname = ""+_latlng.lat+","+_latlng.lng;
			
			_areaname = _areaname.split("=").join("＝");
			_areaname = _areaname.split(";").join("；");
			
			var _tmp = localStorage.getItem('area_fav');
			var _area_fav_list = "";
			if (_tmp) {
				_area_fav_list += ""+_tmp;
			}
			_area_fav_list = parseValue(_area_fav_list);
			_area_fav_list[_keyname] = _areaname;
			
			var _newsave = "";
			for (var i in _area_fav_list) {
				if (!i || !_area_fav_list[i]) continue;
				_newsave += ""+i+"="+_area_fav_list[i]+";";
			}
			
			localStorage.setItem('area_fav', ''+_newsave);
			
			console.log(""+localStorage.getItem('area_fav'));
			
		}, 
		function(){
			
		}
		);
	}


	function confirmDeleteFavArea(_keyname) {
		closeAreaWindow();
		
		var _tmp = localStorage.getItem('area_fav');
		var _area_fav_list = "";
		if (_tmp) {
			_area_fav_list += ""+_tmp;
		}
		_area_fav_list = parseValue(_area_fav_list);
		
		openAlertWindow('お気に入り地点に登録している「'+_area_fav_list[_keyname]+'」を削除してもよろしいですか？', function(){
			
			var _tmp = localStorage.getItem('area_fav');
			var _area_fav_list = "";
			if (_tmp) {
				_area_fav_list += ""+_tmp;
			}
			_area_fav_list = parseValue(_area_fav_list);
			_area_fav_list[_keyname] = "";
			
			var _newsave = "";
			for (var i in _area_fav_list) {
				if (!i || !_area_fav_list[i]) continue;
				_newsave += ""+i+"="+_area_fav_list[i]+";";
			}
			
			localStorage.setItem('area_fav', ''+_newsave);
			
			openAreaWindow();
			
		}, 
		function(){
			openAreaWindow();
		}
		);
	}
	
	var area_favgym = "";
	function openAddFavGym(_loc1, _loc2) {
		
		var _tmp = localStorage.getItem('area_favgym');
		if (_tmp) {
			area_favgym = _tmp;
			var _gym_fav_list = parseValue(_tmp);
			
			//既に登録されている場合は削除に飛ばす
			for (var i in _gym_fav_list) {
				console.log("tes: "+i);
				if (i == ""+mRound(_loc1,9)+","+mRound(_loc2,9)) {
					favgym_disable_toggle_areawindow = true;
					confirmDeleteFavGym(i);
					return;
				}
			}
			
			if (count(_gym_fav_list) >= 10) {
				openAlertWindow('お気に入りジムへの登録数が多すぎます。古いものを削除してから登録してください。', function(){
				}, false);
				
				return;
			}
		}
		
		openAlertWindow('<div>お気に入りジムとして登録します。あとでわかりやすいよう、名前をつけることができます。</div><div style="padding:5px;">場所の名称: <input id="input_addfav_name" type="text" style="width:300px;" value="" placeholder="例）メガネ自転車赤色"></div>', function(){
			
			
			var _keyname = ""+mRound(_loc1,9)+","+mRound(_loc2,9);
			
			try{
				document.getElementById("icon_gymfav_add_"+_keyname).style.opacity = "0.5";
			}catch(e){}
			
			var _areaname = $("#input_addfav_name").val();
			if (_areaname == "") {
				_areaname = ""+_keyname;
			}
			
			_areaname = _areaname.split("=").join("＝");
			_areaname = _areaname.split(";").join("；");
			
			var _area_fav_list = "";
			if (_tmp) {
				_area_fav_list += ""+_tmp;
			}
			_area_fav_list = parseValue(_area_fav_list);
			_area_fav_list[_keyname] = ""+_areaname;
			
			var _newsave = "";
			for (var i in _area_fav_list) {
				if (!i || !_area_fav_list[i]) continue;
				_newsave += ""+i+"="+_area_fav_list[i]+";";
			}
			
			localStorage.setItem('area_favgym', ''+_newsave);
			area_favgym = _newsave;
			
			console.log(""+localStorage.getItem('area_favgym'));
			
		}, 
		function(){
			
		}
		);
	}
	
	var favgym_disable_toggle_areawindow = false;
	function confirmDeleteFavGym(_keyname) {
		if (!favgym_disable_toggle_areawindow) closeAreaWindow();
		
		var _tmp = localStorage.getItem('area_favgym');
		var _area_fav_list = "";
		if (_tmp) {
			_area_fav_list += ""+_tmp;
		}
		_area_fav_list = parseValue(_area_fav_list);
		
		openAlertWindow('お気に入りジムに登録している「'+_area_fav_list[_keyname]+'」を削除してもよろしいですか？', function(){
			
			try{
				document.getElementById("icon_gymfav_add_"+_keyname).style.opacity = "1";
			}catch(e){}
			
			var _tmp = localStorage.getItem('area_favgym');
			var _area_fav_list = "";
			if (_tmp) {
				_area_fav_list += ""+_tmp;
			}
			_area_fav_list = parseValue(_area_fav_list);
			_area_fav_list[_keyname] = "";
			
			var _newsave = "";
			for (var i in _area_fav_list) {
				if (!i || !_area_fav_list[i]) continue;
				_newsave += ""+i+"="+_area_fav_list[i]+";";
			}
			
			localStorage.setItem('area_favgym', ''+_newsave);
			area_favgym = _newsave;
			
			if (!favgym_disable_toggle_areawindow) openAreaWindow();
			
			favgym_disable_toggle_areawindow = false;
			
		}, 
		function(){
			if (!favgym_disable_toggle_areawindow) openAreaWindow();
			
			favgym_disable_toggle_areawindow = false;
		}
		);
	}

	function setupAreaLists() {
    	if (gpslog_loc) {
		   	for (var i in Table_AreaData) {
				var _meter = parseInt(getDistance(gpslog_loc.latitude, gpslog_loc.longitude, Table_AreaData[i].loc1, Table_AreaData[i].loc2));
				Table_AreaData[i].distance = _meter;
			}
    		
			Table_AreaData.sort(function(a,b){
			    if(a.distance<b.distance) return -1;
			    if(a.distance > b.distance) return 1;
			    return 0;
			});
    	}
	    
	    var _viewhtml = "";
	   	for (var i in Table_AreaData) {
	   		var _addmsg = "";
			if (Table_AreaData[i].distance) {
				_addmsg = " <span style='font-size:90%;'>("+mRound(Table_AreaData[i].distance/1000, 1)+" km)</span>";
			}
	   		
	   		_viewhtml += "<div id='area_area_item_"+i+"' style='width:300px;cursor:pointer;padding:3px;margin:3px;margin-bottom:10px;background-color:rgba(251,157,0,0.5);' onclick='jumpMapArea(\""+Table_AreaData[i].loc1+","+Table_AreaData[i].loc2+"\");'>"+Table_AreaData[i].name+_addmsg+"</div>";
	   	}
	   	
	   	$("#area_customcontrol_area_arealist").html(_viewhtml);
	}

	function searchAreaGeolocation() {
		var _address = $("#search_area_geolocation").val();
		_address = _address.split("　").join(" ");
		_address = _address.split("	").join(" ");
		if (_address.split(" ").join("") == "") {
			return;
		}
		
		if (_address == "現在地" || _address == "ここ" || _address == "gps" || _address == "GPS" || _address == "いまいる場所") {
			
			closeAreaWindow();
			
	    	if (gpslog_loc) {
			   	jumpMapArea(""+gpslog_loc.latitude+","+gpslog_loc.longitude);
	    		GPSenable();
			} else {
				GPSenable();
				setTimeout(function(){
			    	if (gpslog_loc) {
					   	jumpMapArea(""+gpslog_loc.latitude+","+gpslog_loc.longitude);
			    		GPSenable();
			    	}
				}, 1000);
			}
			
		} else {
		
			$.ajax({
			    url: "https://sv-webdb1.pmap.kuku.lu/_geodbserver.php",
			    type: "GET",
			    data: "&action=searchGeoLocation&address="+encodeURIComponent(_address),
			    timeout: 6000,
			    cache: false
			}).done(function(data, status, xhr) {
				if (data.indexOf("result=OK;") == -1) {
					closeAreaWindow();
					
					openAlertWindow("キーワード「"+_address+"」に該当する場所が発見できませんでした。できるだけ正式名称でご記入ください。<br>（有名な場所でもこのエラーがでる場合は、利用者が多すぎて制限数を超過した可能性があります。しばらく待ってから再度お試しください。）", function(){
						openAreaWindow();
					}, false);
				} else {
					var _tmp = parseValue(data);
					if (_tmp["location"]) {
						jumpMapArea(_tmp["location"]);
					}
				}
			}).fail(function(xhr, status, error) {
			    
			});
		
		}
	}
	
		function searchAreaGeolocationCheck(e) {
		    if (!e) { var e = window.event; }
		    if (e.keyCode == 13) {
		    	searchAreaGeolocation();
		    }
		}
		
	function jumpMap(_target, _zoom) {
		var _tmp = _target.split(",");
		
		if (_zoom) {
			map.setView( [parseFloat(_tmp[0]), parseFloat(_tmp[1])], 17 );
		} else {
			map.setView( [parseFloat(_tmp[0]), parseFloat(_tmp[1])] );
		}
	}

	function jumpMapArea(_target) {
		GPSdisable();
		jumpMap(_target, 17);

		closeAreaWindow();
	}
	
	function jumpMapAreaByPush(_target) {
		
		var _tmp = _target.split(",");
		
		openAlertWindow("通知設定している「"+pokemon_table_ja[_tmp[2]]+"」が出現しました。地図を移動しますか？", 
		function(){
			GPSdisable();
			jumpMap(_target, 17);
			
			requestDBServerReload(300);
		}, 
		function(){});
	}


	var old_search_area_filter = "";
	var old_search_area_geolocation = "";
	function checkAreaWindow() {
		//地点検索
		if (old_search_area_filter != $("#search_area_filter").val()) {
			old_search_area_filter = $("#search_area_filter").val();
			
			for (var i in Table_AreaData) {
				if (old_search_area_filter == "" || Table_AreaData[i].name.indexOf(old_search_area_filter) != -1) {
					$("#area_area_item_"+i+"").css({"display": "block"});
				} else {
					$("#area_area_item_"+i+"").css({"display": "none"});
				}
			}
		} else if (old_search_area_geolocation != $("#search_area_geolocation").val()) {
			old_search_area_geolocation = $("#search_area_geolocation").val();
			
			for (var i in Table_AreaData) {
				if (Table_AreaData[i].name.indexOf(old_search_area_geolocation) != -1) {
					$("#area_area_item_"+i+"").css({"display": "block"});
				} else {
					$("#area_area_item_"+i+"").css({"display": "none"});
				}
			}
		}
		
		//出現中個体検索
		if (old_search_searchmob_filter != $("#search_searchmob_filter").val()) {
			old_search_searchmob_filter = $("#search_searchmob_filter").val();
			
			checkPokemonFilter("area_searchmob_list", old_search_searchmob_filter);
		}
	}

	function closeAreaWindow() {
		try {
			var _masterarea = document.getElementById('area_customcontrol_area');
			if (_masterarea.style.display != "block") return;
			
			_masterarea.style.display = "none";
			
			clearInterval(timer_checkAreaWindow);
			
			viewWindowCloseButton(false);
		} catch(e) {
			console.log("closeAreaWindow(): error: "+e);
		}
	}
	
	//出現中個体検索開始
	function jumpSearchMobList(_pid) {
		
		closeAreaWindow();

		var _loc1 = -1;
		var _loc2 = -1;
		if (gpslog_loc) {
			_loc1 = gpslog_loc.latitude;
			_loc2 = gpslog_loc.longitude;
		} else {
			var latlng = getCenterMap();
			_loc1 = latlng[0];
			_loc2 = latlng[1];
		}
		
		console.log("jumpSearchMobList: pid="+_pid+", loc1="+_loc1+", loc2="+_loc2);
		
		$.ajax({
		    url: "https://"+using_dbserver+"/_dbserver.php?uukey=39aa0e9c09e006a6d0ce427a33f84135&sysversion=1001&action=getSearchMob&pid="+_pid+"&loc1="+encodeURIComponent(parseFloat(_loc1))+"&loc2="+encodeURIComponent(parseFloat(_loc2)),
		    type: "GET",
		    data: "",
		    timeout: 10000,
		    cache: false
		}).done(function(data, status, xhr) {
			var _viewhtml = "";
			if (data.indexOf("action=found_searchmob;") != -1) {
				
				var data = data.split("\n");
				for (var i=0; i<data.length; i++) {
					var _ent = parseValue(data[i]);
					if (_ent["action"] == "found_searchmob") {
						var _loc = _ent["loc"].split(",");
						
				   		var _addmsg = "";
				   		var _bgcolor = "rgba(251,157,0,0.8)";
				   		
						_addmsg += "残り"+viewLeftToL(_ent["tol"])+" ";
				   		
						if (gpslog_loc) {
							var _meter = parseInt(getDistance(gpslog_loc.latitude, gpslog_loc.longitude, parseFloat(_loc[0]), parseFloat(_loc[1])));
							_addmsg += "<br>";
							try{
								_addmsg += "<img src='https://img-pmap.aquapal-cdn.net/img/icon_az.png?v=1' style='transform:rotate("+((0-getAzimuth(gpslog_loc.latitude, gpslog_loc.longitude, parseFloat(_loc[0]), parseFloat(_loc[1])))+90)+"deg);width:15px;'> ";
							} catch(e) {
								console.log("error: jumpSearchMobList: 方位角検出: "+e);
							}
							_addmsg += ""+viewmeter(_meter)+"";
							
							try{
								var _movetime = MeterToMoveMethodSec(_meter,4);
																	if (configpush_movemethod) {
										_movetime = MeterToMoveMethodSec(_meter,parseInt(configpush_movemethod));
									}
																if ((new Date()).getTime() + _movetime * 1000 <= parseInt(_ent["tol"])) {
									_bgcolor = "rgba(251,157,0,0.8)";
								} else {
									_bgcolor = "rgba(221,216,213,0.5)";
								}
							} catch(e) {
								console.log("error: 移動手段検出(searchmobhit):"+e);
							}
							
						}
						
						if (getLocalConfig("disableviewiv") != "1") {
							_ent["iv"] = getMobIV(_ent);
							if (_ent["iv"]) {
								_addmsg += "<div style='font-size:11px;'>"+dressNumberColor(_ent["iv"], 100)+"％ ("+dressNumberColor(_ent["individual_attack"],15)+"/"+dressNumberColor(_ent["individual_defense"],15)+"/"+dressNumberColor(_ent["individual_stamina"],15)+")</div>";
							}
						}
				   		
				   		_viewhtml += "<div id='area_searchmobhit_item_"+i+"' style='font-size:90%;width:100%;cursor:pointer;padding:3px;margin:3px;margin-bottom:10px;background-color:"+_bgcolor+";' onclick='clickSearchmobResultItem(\"area_searchmobhit_item_"+i+"\");jumpMapArea(\""+_ent["loc"]+"\");'>"+_addmsg+"</div>";

					}
				}
			}
				
			if (_viewhtml != "") {
				openSearchmobResult("<div style='font-size:90%;'>最寄りの<br>"+pokemon_table_ja[_pid]+"</div>"+_viewhtml+"<br><div style='width:100%;cursor:pointer;padding:3px;margin:3px;margin-bottom:10px;background-color:rgba(251,157,0,0.5);' onclick='jumpSearchMobList("+_pid+");'>再検索</div>");
			} else {
				openAlertWindow("検索結果がありませんでした。近くに「"+pokemon_table_ja[_pid]+"」は出現(捕捉)していないようです。再度検索を行いますか？", 
				function(){
					jumpSearchMobList(_pid);
				}, 
				function(){});
			}
		}).fail(function(xhr, status, error) {
			openAlertWindow("データ受信エラーが発生しました。混雑している恐れがあります。再度「"+pokemon_table_ja[_pid]+"」を検索しますか？", 
			function(){
				jumpSearchMobList(_pid);
			}, 
			function(){});
		});
	}
		
		var clickSearchmobResultItem_oldtarget = false;
		function clickSearchmobResultItem(_target) {
			try{
				if (clickSearchmobResultItem_oldtarget) {
					if ($("#"+clickSearchmobResultItem_oldtarget)) {
						$("#"+clickSearchmobResultItem_oldtarget).css({"border": "0px solid green"});
					}
				}
			}catch(e) {
			}
			
			if ($("#"+_target)) {
				$("#"+_target).css({"border": "2px solid green"});
			}
			
			clickSearchmobResultItem_oldtarget = _target;
		}
		
		function openSearchmobResult(_html) {
			try {
				var _masterarea = document.getElementById('area_searchmob_result');

				_masterarea.style.width = '150px';
				_masterarea.style.left = '0px';
				
				_masterarea.style.top = '70px';
				updateFooterHeight();
				
				$("#area_searchmob_result_html").html(_html);
				
				_masterarea.style.display = "block";
				viewWindowCloseButton(true);
			} catch(e) {
				console.log("openSearchmobResult(): error: "+e);
			}
		}

			function closeSearchmobResult() {
				try {
					var _masterarea = document.getElementById('area_searchmob_result');
					if (_masterarea.style.display != "block") return;
					
					_masterarea.style.display = "none";
					
					viewWindowCloseButton(false);
				} catch(e) {
					console.log("closeSearchmobResult(): error: "+e);
				}
			}
	
var timer_checkHistoryWindow = false;
function openHistoryWindow() {
	try {
		var _masterarea = document.getElementById('area_customcontrol_history');
		if (_masterarea.style.display == "block") {
			closeHistoryWindow();
		} else {
			_masterarea.style.width = '100%';
			_masterarea.style.left = '0px';
			
			_masterarea.style.top = '70px';
			updateFooterHeight();
			
			var _color = "rgba(221,216,213,0.5)";
			if (func_ps_onlynearby == "1") {
				_color = "rgba(251,157,0,0.8)";
			}
			$("#area_configwindow_func_ps_onlynearby").css({"backgroundColor": _color});
			
			var _color = "rgba(221,216,213,0.5)";
			if (func_ps_viewunpop == "1") {
				_color = "rgba(251,157,0,0.8)";
			}
			$("#area_configwindow_func_ps_viewunpop").css({"backgroundColor": _color});
			
			updatePokesourceButton();
			
			_viewhtml = "";
			for (var i=1; i<=151; i++) {
				var _color = "rgba(221,216,213,0.5)";
				if (config_history[i] == "1") {
					_color = "rgba(251,157,0,0.8)";
				}
				_viewhtml += "<div id='area_historywindow_list_"+i+"' style='width:260px;cursor:pointer;padding:3px;margin:3px;background-color:"+_color+";' onclick='toggleHistoryList("+i+");'><img src='"+getIconImage(i)+"' width='20'> "+pokemon_table_ja[i]+"</div>";
			}
			$("#area_customcontrol_history_data_list").html(_viewhtml);
			
			old_search_history_filter = "";
			
			clearInterval(timer_checkHistoryWindow);
			timer_checkHistoryWindow = setInterval(checkHistoryWindow, 100);
			checkHistoryWindow();
			
			_masterarea.style.display = "block";
			viewWindowCloseButton(true);
			
			updateHistoryButton();
		}
	} catch(e) {
		console.log("openHistoryWindow(): error: "+e);
	}
}

	var old_search_history_filter = "";
	function checkHistoryWindow() {
		if (old_search_history_filter != $("#search_history_filter").val()) {
			old_search_history_filter = $("#search_history_filter").val();
			
			checkPokemonFilter("area_historywindow_list", old_search_history_filter);
		}
	}

	//新ポケソース設定
	var func_ps = false;
	var func_ps_onlynearby = false;
	var func_ps_viewunpop = false;
	
	function toggleConfigPokeSourceOnlyNearby() {
		var _color = "rgba(221,216,213,0.5)";
		if (func_ps_onlynearby == "1") {
			func_ps_onlynearby = "";
		} else {
			func_ps_onlynearby = "1";
			_color = "rgba(251,157,0,0.8)";
		}
		
		deletePokeSourceMarker();
		
		cookie.set("cookie_func_ps_onlynearby", func_ps_onlynearby);
		$("#area_configwindow_func_ps_onlynearby").css({"backgroundColor": _color});
	}
	
	function toggleConfigPokeSourceViewUnPop() {
		var _color = "rgba(221,216,213,0.5)";
		if (func_ps_viewunpop == "1") {
			func_ps_viewunpop = "";
		} else {
			func_ps_viewunpop = "1";
			_color = "rgba(251,157,0,0.8)";
		}
		
		deletePokeSourceMarker();
		
		cookie.set("cookie_func_ps_viewunpop", func_ps_viewunpop);
		$("#area_configwindow_func_ps_viewunpop").css({"backgroundColor": _color});
	}
	
	function updatePokesourceButton() {
		if (func_ps != "1") {
			$("#area_pokesource_data").css({"display": "none"});
			$("#button_pokesource_enable").val("オンにする");
		} else {
			$("#area_pokesource_data").css({"display": "block"});
			$("#button_pokesource_enable").val("オフにする");
		}
	}
	
	function togglePokesourceEnable() {
		if (func_ps != "1") {
			//オンにした
			func_ps = "1";
		} else {
			func_ps = "";
		}
		
		deletePokeSourceMarker();
		
		cookie.set("cookie_func_ps", func_ps);
		
		updatePokesourceButton();
		updateShortcutIcon();
	}
	
	function closeHistoryWindow() {
		try {
			var _masterarea = document.getElementById('area_customcontrol_history');
			if (_masterarea.style.display != "block") return;
			
			_masterarea.style.display = "none";
			
			clearInterval(timer_checkHistoryWindow);
				
			old_latlng = ""+old_latlng+",dummy";
			viewWindowCloseButton(false);
			
			requestDBServerReload(300);
		} catch(e) {
			console.log("closeHistoryWindow(): error: "+e);
		}
	}
	
	function deletePokeSourceMarker() {
		for (var i in pokemon_list) {
			if (!pokemon_list[i]) continue;
			if (pokemon_list[i]["delete"]) continue;
			if (pokemon_list[i]["action"] != "found_ps" && pokemon_list[i]["action"] != "found_ps_older" && pokemon_list[i]["action"] != "found_ps_uncert") continue;
			
			deleteMarker(i);
			pokemon_list[i]["delete"] = true;
			
			pokemon_list[i] = null;
		}
		
	}

	function allChangeHistory(_new) {
		for (var i=1; i<=151; i++) {
			if ((_new == "0" && config_history[i] != "0" && config_history[i]) || (_new == "1" && config_history[i] != "1")) {
				toggleHistoryList(i);
			}
		}
	}

	var config_history = new Array();
	function toggleHistoryList(_target) {
		try {
			if (config_history[_target] == "1") {
				config_history[_target] = "0";
			} else {
				if (history_cnt >= 5) {
					return;
				}
				config_history[_target] = "1";
			}
			
			var _color = "";
			if (config_history[_target] == "1") {
				//ON
				_color = "rgba(251,157,0,0.8)";
				

				//redrawMap();
			} else {
				//OFF
				_color = "rgba(221,216,213,0.5)";
				
				deleteHistoryMarkerByPokemonId(_target);
				redrawMap();
			}
			document.getElementById("area_historywindow_list_"+_target).style.backgroundColor = _color;
			
			//設定保存
			var _newconfig = "";
			for (var i in config_history) {
				if (!i || config_history[i] != "1") continue;
				_newconfig += ""+i+"="+config_history[i]+";";
			}
			cookie.set("cookie_config_history", _newconfig);
			
			updateHistoryButton();
		
		} catch(e) {
			console.log("toggleHistoryList(): error: "+e);
		}
		
	}
	
	function deleteHistoryMarkerByPokemonId(_target) {
		for (var i in pokemon_list) {
			if (!pokemon_list[i]) continue;
			if (pokemon_list[i]["delete"]) continue;
			if (pokemon_list[i]["action"] != "found_history") continue;
			
			if (pokemon_list[i]["id"] == _target || _target == -1) {
				deleteMarker(i);
				pokemon_list[i]["delete"] = true;
				pokemon_list[i] = null;
			}
		}
	}
	
	var history_cnt = 0;
	function updateHistoryButton() {
		var _history_cnt = 0;
		if (func_historydisable == "1") {
			$("#area_history_data").css({"display": "none"});
			$("#button_history_disable").val("オンにする");
		} else {
			$("#area_history_data").css({"display": "block"});
			$("#button_history_disable").val("オフにする");
				
			for (var i=1; i<=151; i++) {
				if (config_history[i] == "1") {
					_history_cnt ++;
				}
			}
		}
		
		history_cnt = _history_cnt;
		
		updateSmarticon();
	}
	
	var func_historydisable = "";
	function toggleHistoryDisable() {
		if (func_historydisable == "1") {
			//オンにした
			func_historydisable = "";
		} else {
			//オフにした
			func_historydisable = "1";
			deleteHistoryMarkerByPokemonId(-1);
		}
		
		cookie.set("cookie_func_historydisable", func_historydisable);
		
		updateHistoryButton();
		updateShortcutIcon();
	}
	
	

var timer_checkConfigWindow = false;
function openConfigWindow() {
	try {
		var _masterarea = document.getElementById('area_customcontrol_config');
		if (_masterarea.style.display == "block") {
			closeConfigWindow();
		} else {
			_masterarea.style.width = '100%';
			_masterarea.style.left = '0px';
		    	
			_masterarea.style.top = '70px';
			updateFooterHeight();
			
			//var _viewhtml = "";
			//_viewhtml += "<div style='padding:5px;border-bottom:2px solid #eeeeee;font-weight:bold;color:green;'>■ 非表示設定</div><div style='padding:5px;'>不要なモンスターは非表示にできます。</div><div style='padding-top:10px;padding-bottom:10px;margin:3px;'><input type='button' onclick='allChangeConfigView(\"0\");' value='すべて表示' style='width:50%;height:30px;border:1px solid #eeeeee;'><input type='button' onclick='allChangeConfigView(\"1\");' value='すべて非表示' style='width:50%;height:30px;border:1px solid #eeeeee;'></div><div style='padding-bottom:10px;margin:3px;'><input id='search_config_filter' type='search' placeholder='モンスターの名前で検索' style='width:100%;font-size:120%;'></div>";
			//$("#area_customcontrol_config_data").html(_viewhtml);
			
			//ポケスト
			var _color = "rgba(221,216,213,0.5)";
			if (func_fortpokestop == "1") {
				_color = "rgba(251,157,0,0.8)";
			}
			$("#area_configwindow_func_fortpokestop").css({"backgroundColor": _color});
			
			//ジム
			var _color = "rgba(221,216,213,0.5)";
			if (func_fortgym == "1") {
				_color = "rgba(251,157,0,0.8)";
			}
			$("#area_configwindow_func_fortgym").css({"backgroundColor": _color});
			
			//ラピュタ光
			var _color = "rgba(251,157,0,0.8)";
			if (getLocalConfig("disablepolyline") == "1") {
				_color = "rgba(221,216,213,0.5)";
			}
			$("#area_configwindow_func_disablepolyline").css({"backgroundColor": _color});
			
			//サーチ可能範囲
			var _color = "rgba(221,216,213,0.5)";
			if (getLocalConfig("searchcircle") == "1") {
				_color = "rgba(251,157,0,0.8)";
			}
			$("#area_configwindow_func_searchcircle").css({"backgroundColor": _color});
			
			//出現限界範囲
			var _color = "rgba(221,216,213,0.5)";
			if (getLocalConfig("spawncircle") == "1") {
				_color = "rgba(251,157,0,0.8)";
			}
			$("#area_configwindow_func_spawncircle").css({"backgroundColor": _color});
			
			//ショートカット
			var _color = "rgba(221,216,213,0.5)";
			if (getLocalConfig("shortcut") == "1") {
				_color = "rgba(251,157,0,0.8)";
			}
			$("#area_configwindow_func_shortcut").css({"backgroundColor": _color});
			
			//個体値表示設定
			var _color = "rgba(251,157,0,0.8)";
			if (getLocalConfig("disableviewiv") == "1") {
				_color = "rgba(221,216,213,0.5)";
			}
			$("#area_configwindow_func_viewiv").css({"backgroundColor": _color});
			
			//個体値非表示無視
			var _color = "rgba(221,216,213,0.5)";
			if (getLocalConfig("noviewforceiv") == "1") {
				_color = "rgba(251,157,0,0.8)";
			}
			$("#area_configwindow_func_noviewforceiv").css({"backgroundColor": _color});
				
			var _viewhtml = "";
			for (var i=1; i<=151; i++) {
				var _color = "rgba(251,157,0,0.8)";
				if (config_viewlist[i] == "1") {
					_color = "rgba(221,216,213,0.5)";
				}
				_viewhtml += "<div id='area_configwindow_list_"+i+"' style='width:260px;cursor:pointer;padding:3px;margin:3px;background-color:"+_color+";' onclick='toggleConfigViewList("+i+");'><img src='"+getIconImage(i)+"' width='20'> "+pokemon_table_ja[i]+"</div>";
			}
			$("#area_customcontrol_config_data_list").html(_viewhtml);
			
			old_search_config_filter = "";
			
			clearInterval(timer_checkConfigWindow);
			timer_checkConfigWindow = setInterval(checkConfigWindow, 100);
			checkConfigWindow();
			
			_masterarea.style.display = "block";
			viewWindowCloseButton(true);
		}
	} catch(e) {
		console.log("openConfigWindow(): error: "+e);
	}
}

	var old_search_config_filter = "";
	function checkConfigWindow() {
		if (old_search_config_filter != $("#search_config_filter").val()) {
			old_search_config_filter = $("#search_config_filter").val();
			
			checkPokemonFilter("area_configwindow_list", old_search_config_filter);
		}
	}
	
	function checkPokemonFilter(_target, _search) {

		for (var i=1; i<=151; i++) {
			if (_search == "" || encodeHiraToKata(pokemon_table_ja[i]).indexOf(encodeHiraToKata(_search)) != -1) {
				$("#"+_target+"_"+i+"").css({"display": "block"});
			} else {
				$("#"+_target+"_"+i+"").css({"display": "none"});
			}
		}
	}
	
	function deletePokestopMarker() {
		for (var i in pokemon_list) {
			if (!pokemon_list[i]) continue;
			if (pokemon_list[i]["delete"]) continue;
			if (pokemon_list[i]["action"] != "fort") continue;
			if (pokemon_list[i]["type"] != "1") continue;
			
			deleteMarker(i);
			pokemon_list[i]["delete"] = true;
			pokemon_list[i] = null;
			
			fort_list_enable --;
		}
		
		//fort_list_enable = 0;
	}
	
	function deleteGymMarker() {
		for (var i in pokemon_list) {
			if (!pokemon_list[i]) continue;
			if (pokemon_list[i]["delete"]) continue;
			if (pokemon_list[i]["action"] != "fort") continue;
			if (pokemon_list[i]["type"] != "0") continue;
			
			deleteMarker(i);
			pokemon_list[i]["delete"] = true;
			pokemon_list[i] = null;
			
			fort_list_enable --;
		}
		
		//fort_list_enable = 0;
	}
	
	function closeConfigWindowWithReload() {
		force_reload = true;
		closeConfigWindow();
	}

	var config_map_style = "";
	var config_navi_app = "";
	
	var config_custom_icon_url = "";
	var config_custom_name_url = "";
	var force_reload = false;
	function closeConfigWindow() {
		try {
			var _masterarea = document.getElementById('area_customcontrol_config');
			if (_masterarea.style.display != "block") return;
			
			_masterarea.style.display = "none";
			
			clearInterval(timer_checkConfigWindow);
			
			if ($("#area_config_map_style").val() != config_map_style) {
				config_map_style = $("#area_config_map_style").val();
				cookie.set("cookie_config_map_style", config_map_style);
				setupTileLayer();
			}
			
			if ($("#area_config_navi_app").val() != config_navi_app) {
				config_navi_app = $("#area_config_navi_app").val();
				cookie.set("cookie_config_navi_app", config_navi_app);
			}
			
			if ($("#config_custom_name").val() != config_custom_name_url) {
				config_custom_name_url = $("#config_custom_name").val();
				cookie.set("cookie_config_custom_name_url", config_custom_name_url);
				force_reload = true;
			}

			if ($("#config_custom_icon").val() != config_custom_icon_url) {
				
				if (($("#config_custom_icon").val()).indexOf("https://img-pmap.aquapal-cdn.net/") != -1) {
					openAlertWindow("この「カスタムアイコンファイルのURL」は使用できません。他のURLを入力してください。", function(){}, false);
					openConfigWindow();
					return;
				}
				
				if ($("#config_custom_icon").val() != "") {
					openAlertWindow("<div>カスタムアイコンのプレビューは下記の通りです。このカスタムアイコンに切り替えてもよろしいですか？</div><div>"+getCustomIconPreview()+"</div>",
					function(){
						config_custom_icon_url = $("#config_custom_icon").val();
						cookie.set("cookie_config_custom_icon_url", config_custom_icon_url);
						force_reload = true;
					
						openConfigWindow();
						closeConfigWindow();
					}, 
					function() {
						openConfigWindow();
					});
					
					force_reload = false;
				} else {
					config_custom_icon_url = "";
					cookie.set("cookie_config_custom_icon_url", config_custom_icon_url);
					force_reload = true;
				}
			}
			
			if (force_reload) {
				location.reload();
			}
			
			requestDBServerReload(300);
				
			viewWindowCloseButton(false);
		} catch(e) {
			console.log("closeConfigWindow(): error: "+e);
		}
	}
	
	function getCustomIconPreview() {
		var _tmpbuffer = "";
		if ($("#config_custom_icon").val() != "") {
			var _tmp_config_custom_icon_url = config_custom_icon_url;
			config_custom_icon_url = $("#config_custom_icon").val();
			
			//151まで
			for (var i=1; i<=20; i++) {
				_tmpbuffer += "<img src='"+getIconImage(i)+"' width='30' onerror='errorCustomIconPreview();'>";
			}
			
			//251まで
			//for (var i=1; i<=10; i++) {
			//	_tmpbuffer += "<img src='"+getIconImage(i)+"' width='30' onerror='errorCustomIconPreview();'>";
			//}
			//for (var i=151; i<=151+10; i++) {
			//	_tmpbuffer += "<img src='"+getIconImage(i)+"' width='30' onerror='errorCustomIconPreview();'>";
			//}
			
			config_custom_icon_url = _tmp_config_custom_icon_url;
		}
		
		custonicon_preview_stop = false;
		
		return _tmpbuffer;
	}
	
	var custonicon_preview_stop = false;
	function errorCustomIconPreview() {
		if (custonicon_preview_stop) return;
		
		custonicon_preview_stop = true;
		
		openAlertWindow("カスタムアイコンファイルのロードに失敗しました。カスタムアイコンのURLが間違っているか、サーバの調子がよくないようです。再度ご確認ください。", 
		function(){
			openConfigWindow();
		}, false);
	}

	function allChangeConfigView(_new) {
		for (var i=1; i<=151; i++) {
			if ((_new == "0" && config_viewlist[i] != "0" && config_viewlist[i]) || (_new == "1" && config_viewlist[i] != "1")) {
				toggleConfigViewList(i);
			}
		}
	}

	var func_fortpokestop = false;
	function toggleConfigFortPokestop() {
		var _color = "rgba(221,216,213,0.5)";
		if (func_fortpokestop == "1") {
			func_fortpokestop = "";
			deletePokestopMarker();
		} else {
			func_fortpokestop = "1";
			_color = "rgba(251,157,0,0.8)";
		}
		
		cookie.set("cookie_func_fortpokestop", func_fortpokestop);
		$("#area_configwindow_func_fortpokestop").css({"backgroundColor": _color});
		
		updateShortcutIcon();
	}
	
	var func_fortgym = false;
	function toggleConfigFortGym() {
		var _color = "rgba(221,216,213,0.5)";
		if (func_fortgym == "1") {
			func_fortgym = "";
			deleteGymMarker();
		} else {
			func_fortgym = "1";
			_color = "rgba(251,157,0,0.8)";
		}
		
		cookie.set("cookie_func_fortgym", func_fortgym);
		$("#area_configwindow_func_fortgym").css({"backgroundColor": _color});
		
		updateShortcutIcon();
	}
	
	function toggleConfigPolyline() {
		var _color = "rgba(251,157,0,0.8)";
		var _newconfig = "";
		if (getLocalConfig("disablepolyline") == "1") {
			_newconfig = "0";
		} else {
			_newconfig = "1";
			_color = "rgba(221,216,213,0.5)";
			
			clearPolylineFromGPS();
		}
		
		saveLocalConfig("disablepolyline", _newconfig);
		$("#area_configwindow_func_disablepolyline").css({"backgroundColor": _color});
	}
	
	function toggleConfigSearchCircle() {
		var _color = "rgba(221,216,213,0.5)";
		var _newconfig = "";
		if (getLocalConfig("searchcircle") == "1") {
			_newconfig = "0";
		} else {
			_newconfig = "1";
			_color = "rgba(251,157,0,0.8)";
		}
		
		saveLocalConfig("searchcircle", _newconfig);
		$("#area_configwindow_func_searchcircle").css({"backgroundColor": _color});
		
		old_latlng = false;
		checkMapViewMoved();
	}
	
	function toggleConfigSpawnCircle() {
		var _color = "rgba(221,216,213,0.5)";
		var _newconfig = "";
		if (getLocalConfig("spawncircle") == "1") {
			_newconfig = "0";
		} else {
			_newconfig = "1";
			_color = "rgba(251,157,0,0.8)";
		}
		
		saveLocalConfig("spawncircle", _newconfig);
		$("#area_configwindow_func_spawncircle").css({"backgroundColor": _color});
		
		updateSpawnCircle();
	}
	
	function toggleConfigShortcut() {
		var _color = "rgba(221,216,213,0.5)";
		var _newconfig = "";
		if (getLocalConfig("shortcut") == "1") {
			_newconfig = "0";
		} else {
			_newconfig = "1";
			_color = "rgba(251,157,0,0.8)";
		}
		
		saveLocalConfig("shortcut", _newconfig);
		$("#area_configwindow_func_shortcut").css({"backgroundColor": _color});
		
		updateShortcutIcon();
	}
	
	function toggleConfigViewIV() {
		var _color = "rgba(251,157,0,0.8)";
		var _newconfig = "";
		if (getLocalConfig("disableviewiv") == "1") {
			_newconfig = "0";
		} else {
			_newconfig = "1";
			_color = "rgba(221,216,213,0.5)";
		}
		
		saveLocalConfig("disableviewiv", _newconfig);
		$("#area_configwindow_func_viewiv").css({"backgroundColor": _color});
	}
	
	function toggleConfigNoviewForceIV() {
		var _color = "rgba(221,216,213,0.5)";
		var _newconfig = "";
		if (getLocalConfig("noviewforceiv") == "1") {
			_newconfig = "0";
		} else {
			_newconfig = "1";
			_color = "rgba(251,157,0,0.8)";
		}
		
		saveLocalConfig("noviewforceiv", _newconfig);
		$("#area_configwindow_func_noviewforceiv").css({"backgroundColor": _color});
		
		changeViewMarkerByPokemonId(-1);
	}
	
	var func_disabledanger = false;

	function changeViewMarkerByPokemonId(_target) {
		for (var i in pokemon_list) {
			if (!pokemon_list[i]) continue;
			if (pokemon_list[i]["delete"]) continue;
			if (pokemon_list[i]["action"] != "found") continue;
			
			//if (pokemon_list[i]["tol"] < (new Date()).getTime()) continue;
			if (pokemon_list[i]["id"] == _target || _target == -1) {
				
				var _visible = false;
				
				if (func_pokemondisable != "1") { //個体表示がオフではない
					//非表示設定されていない
					if (config_viewlist[pokemon_list[i]["id"]] != "1") {
						_visible = true;
					}
				
					if (getLocalConfig("noviewforceiv") == "1") { //高個体値非表示無視がオン
						if (pokemon_list[i]["iv"] >= 85) { //個体値が高い
							_visible = true;
						}
					}
				}
				
				if (func_pokemondisable != "1" && _visible) {
					//表示
					if (checkBoundsDiffOver(i)) {
						//遠すぎ
					} else {
						//距離問題なし
						if (!pokemon_list[i]["overlay"]) {
							genOverlayAndView(i);
						}
						
						pokemon_list[i]["overlay"].addTo( map ).on('click', onClickMarkerMap);
						if (pokemon_list[i]["overlay_circle"]) { pokemon_list[i]["overlay_circle"].addTo( map ); }
					}
					pokemon_list[i]["noview"] = false;
				} else {
					//非表示
					if (pokemon_list[i]["overlay"]) {
						pokemon_list[i]["overlay"].remove();
						if (pokemon_list[i]["overlay_circle"]) { pokemon_list[i]["overlay_circle"].remove(); }
					}
					
					pokemon_list[i]["noview"] = true;
				}
			}
		}
	}

	var config_viewlist = new Array();
	function toggleConfigViewList(_target) {
		try {
			if (config_viewlist[_target] == "1") {
				config_viewlist[_target] = "0";
			} else {
				config_viewlist[_target] = "1";
			}
			
			changeViewMarkerByPokemonId(_target);
			redrawMap();
			
			var _color = "";
			if (config_viewlist[_target] == "1") {
				//OFF
				_color = "rgba(221,216,213,0.5)";
			} else {
				//ON
				_color = "rgba(251,157,0,0.8)";
			}
			
			try{
				document.getElementById("area_configwindow_list_"+_target).style.backgroundColor = _color;
			} catch(e) {
				console.log("toggleConfigViewList(): error: "+e);
			}
			
			//設定保存
			var _newconfig = "";
			for (var i in config_viewlist) {
				if (!i || config_viewlist[i] != "1") continue;
				_newconfig += ""+i+"="+config_viewlist[i]+";";
			}
			
			try{
				localStorage.setItem('viewdenylist', ''+_newconfig);
			} catch(e) {
				//localStorageが使えない場合はcookieに保存
				cookie.set("cookie_config_viewdenylist", _newconfig);
			}
		
		} catch(e) {
			console.log("toggleConfigViewList(): error: "+e);
		}
		
		updateConfigButton();
	}
	
	var func_pokemondisable = "";
	function togglePokemonDisable() {
		if (func_pokemondisable == "1") {
			//オフにした
			func_pokemondisable = "";
		} else {
			//オンにした
			func_pokemondisable = "1";
		}
		
		changeViewMarkerByPokemonId(-1);
		
		cookie.set("cookie_func_pokemondisable", func_pokemondisable);
		
		updateConfigButton();
		updateShortcutIcon();
	}

	var denylist_cnt = 0;
	function updateConfigButton() {
		var _denylist_cnt = 0;
		
		if (func_pokemondisable == "1") {
			$("#area_pokemon_data").css({"display": "none"});
			$("#button_pokemon_disable").val("出現中モンスター表示機能をオンにする");
			
			_denylist_cnt = 151;
		} else {
			$("#area_pokemon_data").css({"display": "block"});
			$("#button_pokemon_disable").val("出現中モンスター表示機能をオフにする");
				
			for (var i=1; i<=151; i++) {
				if (config_viewlist[i] == "1") {
					_denylist_cnt ++;
				}
			}
		}
		
		denylist_cnt = _denylist_cnt;
		
		updateSmarticon();
		
		/*
		if (_denylist_cnt > 0) {
			$("#button_customcontrol_config").html("設定 <span style='color:red'>("+_denylist_cnt+" 非表示)</span>");
		} else {
			$("#button_customcontrol_config").html("設定");
		}
		*/
	}

var AlertWindow_Accept;
var AlertWindow_Cancel;
function openAlertWindow(_msg, _func_accept, _func_cancel) {
	try {
		var _masterarea = document.getElementById('area_alert');
		//if (_masterarea.style.display == "block") {
		//	closeAlertWindow();
		//} else {
			if (_func_accept) {
				AlertWindow_Accept = _func_accept;
				$("#button_alert_ok").css({"display": "block"});
			} else {
				$("#button_alert_ok").css({"display": "none"});
			}
			if (_func_cancel) {
				AlertWindow_Cancel = _func_cancel;
				$("#button_alert_cancel").css({"display": "block"});
			} else {
				$("#button_alert_cancel").css({"display": "none"});
			}
			
			_masterarea.style.width = '100%';
			_masterarea.style.left = '0px';
		    	
			_masterarea.style.top = '70px';
		    	
		    $("#area_alert_message").html(""+_msg);
			
			_masterarea.style.display = "block";
		//}
	} catch(e) {
		console.log("openAlertWindow(): error: "+e);
	}
}

	function acceptAlertWindow() {
		var _masterarea = document.getElementById('area_alert');
		_masterarea.style.display = "none";
		
		setTimeout(AlertWindow_Accept, 10);
	}

	function closeAlertWindow() {
		var _masterarea = document.getElementById('area_alert');
		_masterarea.style.display = "none";
		
		setTimeout(AlertWindow_Cancel, 10);
	}

	function confirmHidePokemonID(_pid) {
		closeDetailPopup();
		
		openAlertWindow("モンスター「"+getPokemonLocal(_pid)+"」を非表示にしてもよろしいですか？（同じ種類のモンスターがすべて非表示になります。）", 
		function(){
			toggleConfigViewList(_pid);
		}, 
		function(){});
	}
	
	function confirmHistoryTurnoffPokemonID(_pid) {
		closeDetailPopup();
		
		openAlertWindow("モンスター「"+getPokemonLocal(_pid)+"」の出現記録表示を無効にしてもよろしいですか？", 
		function(){
			toggleHistoryList(_pid);
			updateHistoryButton();
		}, 
		function(){});
	}
	
	var config_checklist = new Array();
	function confirmCheckLocID(_key) {
		if (!pokemon_list[_key]) return false;
		if (pokemon_list[_key]["delete"]) return false;
		
		closeDetailPopup();
		
		try{
			if (checkCheckMonster(_key)) {
				delCheckMonster(_key);
				return;
			}
		} catch(e) {
			console.log("confirmCheckLocID: "+e);
		}
		
		addCheckMonster(_key);
	}
		function addCheckMonster(_key) {
			console.log("addCheckMonster: "+_key);
			var _ent = _key.split(",");
			var _checkkey = _ent[0]+","+_ent[1]+","+_ent[3]+","+_ent[4]; //座標1、座標2、モンスID、出現ID
			console.log("checkkey: "+_checkkey);
			if (!config_checklist[_checkkey]) {
				try{
					if (pokemon_list[_key]["no_tol"]) {
						//ToL未判明は60分保護
						config_checklist[_checkkey] = (new Date().getTime()) + (60*60*1000);
					} else {
						config_checklist[_checkkey] = pokemon_list[_key]["tol"];
					}
					
					//アイコン再生成
					redrawFoundIcon(_key);
					
					updateCheckListConfig();
				}catch(e){
					console.log("Error: addCheckMonster: "+e);
				}
			}
		}
		function delCheckMonster(_key) {
			console.log("delCheckMonster: "+_key);
			var _ent = _key.split(",");
			
			//新バージョン
			var _checkkey = _ent[0]+","+_ent[1]+","+_ent[3]+","+_ent[4]; //座標1、座標2、モンスID、出現ID
			if (config_checklist[_checkkey]) {
				try{
					config_checklist[_checkkey] = false;
					
					//アイコン再生成
					redrawFoundIcon(_key);
					
					updateCheckListConfig();
					
					return;
				}catch(e){
					console.log("Error: delCheckMonster: "+e);
				}
			}
			
			//旧バージョン
			_checkkey = _ent[0]+","+_ent[1]+","+_ent[3]; //座標1、座標2、モンスID
			if (config_checklist[_checkkey]) {
				try{
					config_checklist[_checkkey] = false;
					
					updateCheckListConfig();
					
					//アイコン再生成
					redrawFoundIcon(_key);
					
					return;
				}catch(e){
					console.log("Error: delCheckMonster: "+e);
				}
			}
		}
		function updateCheckListConfig() {
			try{
				var _savetext = "";
				for (var i in config_checklist) {
					if (!config_checklist[i]) continue;
					if (config_checklist[i] <= (new Date().getTime())) continue;
					_savetext += ""+i+"="+config_checklist[i]+";";
				}
				localStorage.setItem('checklist', ''+_savetext);
			}catch(e){
				console.log("Error: updateCheckListConfig: "+e);
			}
		}
		function redrawFoundIcon(_key) {
			try{
				//地図からアイコン消して再生成
				deleteMarker(_key);
				if (!pokemon_list[_key]["noview"] && !pokemon_list[_key]["diffover"]) {
					genOverlayAndView(_key);
				} else {
					console.log("(noview) redrawFoundIcon:"+_key);
				}
			}catch(e){
				console.log("Error: redrawFoundIcon: "+e);
			}
		}
		function checkCheckMonster(_key) {
			var _ent = _key.split(",");
			
			//新バージョン
			var _checkkey = _ent[0]+","+_ent[1]+","+_ent[3]+","+_ent[4]; //座標1、座標2、モンスID、出現ID
			if (config_checklist[_checkkey]) {
				if (config_checklist[_checkkey] > (new Date().getTime())) {
					console.log("checkCheckMonster: hit(new): "+_checkkey);
					return true;
				}
			}
			
			//旧バージョン
			_checkkey = _ent[0]+","+_ent[1]+","+_ent[3]; //座標1、座標2、モンスID
			if (config_checklist[_checkkey]) {
				if (config_checklist[_checkkey] > (new Date().getTime())) {
					console.log("checkCheckMonster: hit(old): "+_checkkey);
					return true;
				}
			}
			
			return false;
		}
		
	
function viewWindowCloseButton(_visible) {
	if (_visible) {
		$("#area_header_left").css({"visible": "hidden"});
		$("#area_topmessage").css({"visible": "hidden"});
		
		$("#area_window_close").css({
			"display": "block",
			"top": "29px",
		});
	} else {
		$("#area_window_close").css({
			"display": "none"
		});
			
		setTimeout(function(){
			$("#area_header_left").css({"visible": "visible"});
			$("#area_topmessage").css({"visible": "visible"});
		}, 100);
	}
}

function closeWindowAll() {
	viewWindowCloseButton(false);
	
	closeConfigWindow();
	closeHistoryWindow();
	closeAreaWindow();
			closePushWindow();
		//closeRequestareaWindow();
	closeReport();
	closeSearchmobResult();
	
	}

function view_maker(_p1, _p2) {
	var _icon = L.divIcon({
				html: '●', 
			    iconSize: [5, 5],
			    iconAnchor: [5, 5],
			    popupAnchor: [0, -5]
			});
	var markerOverlay = L.marker([_p1, _p2], 
	{
		icon: _icon
	});
		
	markerOverlay.addTo(map);
}


var set_searcharea = 6; //6*6
var set_searchonestep = 0.0015;

var pokemon_list = new Array();
var pokemon_list_lastid = new Array();
var pokemon_mark = [];

var last_popup_window = false;

function clearData() {
	closeDetailPopup();
	
	for (var i=0; i<pokemon_mark.length; i++) {
		pokemon_mark[i].setMap(null);
	}
	
	pokemon_list = new Array();
	pokemon_mark = [];
}

function closeDetailPopup() {
	console.log("closeDetailPopup()");
	
	if (last_popup_window) {
		//popup.hide();
		//overlay.setPosition(undefined);
		map.closePopup();
		last_popup_window = false;
	}
	
	closePoptimelines();
	
	/*
	if (pokesource_single_circle) {
		pokesource_single_circle.remove();
		pokesource_single_circle = null;
	}
	*/
}

function deleteMarker(_key) {
	try{
		//console.log("deleteMarker: "+_key);
		
		if (pokemon_list[""+_key]["overlay"]) {
			map.removeLayer(pokemon_list[""+_key]["overlay"]);
			pokemon_list[""+_key]["overlay"] = null;
			
			if (pokemon_list[""+_key]["overlay_circle"]) {
				map.removeLayer(pokemon_list[""+_key]["overlay_circle"]);
				pokemon_list[""+_key]["overlay_circle"] = null;
			}
		}
	}catch(e){
		console.log("error: deleteMarker: "+_key+"");
	}
	
	
	/*
	for (var i=0; i<pokemon_mark.length; i++) {
		//console.log("pokemon_mark[i]._key: "+pokemon_mark[i]._key);
		if (pokemon_mark[i]._key == _key) {
			pokemon_mark[i].setMap(null);
			return;
		}
	}
	*/
}

function checkLocIsLure(_loc1, _loc2) {
	_loc1 = parseFloat(_loc1);
	_loc2 = parseFloat(_loc2);
	//console.log("checkLocIsLure: "+_loc1+", "+_loc2);
	
	var _tmp1 = (_loc1.toString()).split(".");
	if (_tmp1.length >= 2) {
		if (_tmp1[1].length <= 7) {
			
			var _tmp2 = (_loc2.toString()).split(".");
			if (_tmp2.length >= 2) {
				if (_tmp2[1].length <= 7) return true;
			}
			
		}
	}
	
	return false;
}

var last_popup_to_gps_polyline_viewmeter = false;
function protPolylineFromGPS(_loc1, _loc2) {
	clearPolylineFromGPS();
	if (!gpslog_loc) return false;
	if (getLocalConfig("disablepolyline") == "1") return false;
	
	var _linecolor = "green";
	if (config_map_style != "") {
		if (config_map_style == "skyphoto" || config_map_style == "skyphoto_old") {
			_linecolor = "#39FFF0";
		}
	}
	
	var latlngs = [
	    [_loc1, _loc2],
	    [gpslog_loc.latitude, gpslog_loc.longitude],
	];
	last_popup_to_gps_polyline_target = { latitude: _loc1, longitude: _loc2 };
	last_popup_to_gps_polyline = L.polyline(latlngs, {color: _linecolor, dashArray:'3 6', weight: 2}).addTo(map);
	
	var _meter = parseInt(getDistance(gpslog_loc.latitude, gpslog_loc.longitude, _loc1, _loc2));
	if (_meter < 1000*1000) {
		var _icon = L.divIcon({
			className: 'polyline-viewmeter-icon',
			html: "<span style='color:"+_linecolor+";'>"+viewmeter(_meter)+"</span>", 
			iconSize: [70, 15]
		});
		last_popup_to_gps_polyline_viewmeter = L.marker(
			[gpslog_loc.latitude, gpslog_loc.longitude], 
			{icon: _icon}
		).addTo(map);
	}
}
function clearPolylineFromGPS() {
	if (last_popup_to_gps_polyline) {
		last_popup_to_gps_polyline.remove();
		last_popup_to_gps_polyline = false;
		last_popup_to_gps_polyline_target = false;
		
		if (last_popup_to_gps_polyline_viewmeter) {
			last_popup_to_gps_polyline_viewmeter.remove();
			last_popup_to_gps_polyline_viewmeter = false;
		}
	}
}

//var pokesource_single_circle = false;
var last_popup_to_gps_polyline = false;
var last_popup_to_gps_polyline_target = false;

var last_popup_to_spawncircle = false;
function openDetailPopup(_key) {
	
	//if (pokemon_list[_key]["action"] == "fort") {
	//	return;
	//}
	
	console.log("openDetailPopup: "+_key);
	
	var _pos = _key.split(",");
	var next_PokeSourcePokemons = false;
	
	//ポップアップ位置とGPS位置ガイドライン
	var _skip_polyline = false;
	if (last_popup_to_gps_polyline_target) {
		if (last_popup_to_gps_polyline_target.latitude == _pos[0] && last_popup_to_gps_polyline_target.longitude == _pos[1]) {
			//同じポップアップを連続して開いた場合はガイドラインを消す
			clearPolylineFromGPS();
			_skip_polyline = true;
			last_popup_to_gps_polyline_target = false;
		}
	}
	if (!_skip_polyline) {
		protPolylineFromGPS(_pos[0], _pos[1]);
	}
	
	//出現限界点
	if (last_popup_to_spawncircle) {
		last_popup_to_spawncircle.remove();
		last_popup_to_spawncircle = false;
	}
	if (!_skip_polyline) {
		//45mサークル
		if (getLocalConfig("spawncircle") == "1") {
			
			last_popup_to_spawncircle = L.circle(
				[_pos[0], _pos[1]], 
				45,
				{
					"fill": false,
					"opacity": 0.8,
					"weight": 2,
					"color": "#FC5151"
				}
			).addTo(map);
			
			last_popup_to_gps_polyline_target = { latitude: _pos[0], longitude: _pos[1] };

		}
	}
	
	closeDetailPopup();
	
	if (pokemon_list[_key]["action"] == "found") {
		var _add_view_pokesource = "";
		var _caution = "";
		
		try {
			//同じ位置のポケソース情報を抽出
			if (func_ps == "1") {
				var _key_pokesource = _pos[0]+","+_pos[1]+","+"found_ps";
				if (pokemon_list[_key_pokesource]) {
					var _poptimes_view = getPokeSourcePoptimesView(_key_pokesource);
					var _pokemon_ids_view = getPokeSourcePokemonsView(_key_pokesource);
					next_PokeSourcePokemons = true;
					
					var _plogname = "ポケソース出現ログ";
					var _addpoptime = "";
					if (pokemon_list[_key_pokesource]["longtime"] == "1") {
						_addpoptime = " (ロングソース)";
					}
					
					_add_view_pokesource = "<div class='area_pokesource_poptimes_view'>出現周期(毎時): "+_poptimes_view+_addpoptime+"</div><div>"+_plogname+":<br>"+_pokemon_ids_view+"</div>";
				} else {
					var _pokemon_ids_view = getPokeSourcePokemonsView(_key_pokesource);
					next_PokeSourcePokemons = true;
					_add_view_pokesource = "<div>ポケソース出現ログ:<br>"+_pokemon_ids_view+"</div>";
					
					var _key_pokesource = _pos[0]+","+_pos[1]+","+"found_ps_uncert";
					if (pokemon_list[_key_pokesource]) {
						requestPokeSourcePokemonsNextUncert = true;
					}
				}
			}
		} catch(e) {
		}
		
		//if (pokemon_list[_key]["pop2nd"] == 1) {
		//	_caution = "<div style='background-color:#cc00cc;color:white;padding:5px;'>現在2重ポケソースからの2回目の出現です。1時間に2度同じ個体が出現しますが、1回目に捕まえた場合は2回目に出現しません。無駄足にならないよう注意してください。</div>";
		//}
		
		if (pokemon_list[_key]["danger"] == "1") {
			_caution = _caution + "<div style='background-color:red;color:white;padding:5px;'>危険な場所または立入禁止であると多数の報告が寄せられています。</div>";
		}
		
		var _luremsg = "";
		if (checkLocIsLure(_pos[0], _pos[1])) {
			_luremsg = " <b style='color:#f96f9f;'>(ルアーで出現)</b>";
		}
		
		var _buffer = "<div style='font-size:12px;font-weight:bold;'><div><b>"+getPokemonLocal(pokemon_list[_key].id)+"</b></div><div>";
		_buffer += "<a onclick='confirmCheckLocID(\""+_key+"\");'><img src='https://img-pmap.aquapal-cdn.net/img/icon_check.png' border='0' width='25' style='cursor:pointer;'></a>　";
		_buffer += "<a onclick='confirmHidePokemonID("+pokemon_list[_key].id+");'><img src='https://img-pmap.aquapal-cdn.net/img/icon_close.png' border='0' width='25' style='cursor:pointer;'></a>　";
		_buffer += "<a target='_blank' href='http://133.130.106.30/t.php?loc1="+_pos[0]+"&loc2="+_pos[1]+"&pid="+pokemon_list[_key].id+"&pname="+encodeURIComponent(getPokemonLocal(pokemon_list[_key].id))+"'><img src='https://img-pmap.aquapal-cdn.net/img/icon_twitter.png' border='0' width='25'></a>　";
		_buffer += "<a target='_blank' href='http://133.130.106.30/t.php?loc1="+_pos[0]+"&loc2="+_pos[1]+"&pid="+pokemon_list[_key].id+"&pname="+encodeURIComponent(getPokemonLocal(pokemon_list[_key].id))+"&line=1'><img src='https://img-pmap.aquapal-cdn.net/img/icon_line.png' border='0' width='25'></a>　";
		_buffer += "<a href='"+getURLNavigation(_pos[0], _pos[1])+"' target='_blank'><img src='https://img-pmap.aquapal-cdn.net/img/icon_navi.png' border='0' width='25'></a>　";
		_buffer += "<img src='https://img-pmap.aquapal-cdn.net/img/icon_danger2.png' border='0' width='25' onclick='openReport(\""+_key+"\");' style='cursor:pointer;'>";
		_buffer += "</div>";
		
		_buffer += "<div style='color:gray;'>座標: "+mRound(_pos[0],9)+", "+mRound(_pos[1],9)+" "+_luremsg+"</div>";
		
		if (getLocalConfig("disableviewiv") != "1") {
			if (pokemon_list[_key]["iv"]) {
				_buffer += "<div style='padding:5px;padding-bottom:0px;margin-top:2px;margin-bottom:3px;border:1px solid #eeeeee;'>";
				_buffer += "<div>個体値: 攻 "+dressNumberColor(pokemon_list[_key]["individual_attack"],15)+" / 防 "+dressNumberColor(pokemon_list[_key]["individual_defense"],15)+" / 体 "+dressNumberColor(pokemon_list[_key]["individual_stamina"],15)+" (計"+dressNumberColor(pokemon_list[_key]["iv"],100)+"％)</div>";
				_buffer += "<div>最大CP: "+viewMobCP(pokemon_list[_key].id, pokemon_list[_key]["individual_attack"], pokemon_list[_key]["individual_defense"], pokemon_list[_key]["individual_stamina"])+"</div>";
				if (pokemon_list[_key]["move_1"] || pokemon_list[_key]["move_2"]) {
					_buffer += "<div>わざ: "+viewMobMove(pokemon_list[_key]["move_1"])+" ＆ "+viewMobMove(pokemon_list[_key]["move_2"])+"</div>";
				}
				if (pokemon_list[_key]["height_m"] && pokemon_list[_key]["weight_kg"] && pokemon_list[_key]["height_m"] != "undefined" && parseFloat(pokemon_list[_key]["height_m"]) >= 0) {
					_buffer += "<div style='font-weight:normal;padding:1px;font-size:11px;color:#444444;text-align:right;'>"+mRound(pokemon_list[_key]["height_m"],2)+"m / "+mRound(pokemon_list[_key]["weight_kg"],2)+"kg</div>";
				} else {
					_buffer += "<img src='img/sp.gif' height='5'>";
				}
				_buffer += "</div>";
			}
		}
		
		if (pokemon_list[_key]["no_tol"] == "1") {
			_buffer += ""+_caution+_add_view_pokesource+"<div id='"+_key+"' class='area_popupdetail'></div><div style='background-color:red;color:white;padding:5px;'>この個体は未確定のポケソースから出現したため消滅時刻は不明です。既に消滅している恐れがあります。</div></div>";
		} else {
			_buffer += ""+_caution+_add_view_pokesource+"<div>消滅時刻: "+viewToL(pokemon_list[_key].tol)+"</div><div id='"+_key+"' class='area_popupdetail'><div><b style='color:"+getColorFromToL(pokemon_list[_key].tol)+";'>消滅まで "+viewLeftToL(pokemon_list[_key].tol)+"</b></div></div></div>";
		}
	} else if (pokemon_list[_key]["action"] == "found_history") {
		var _luremsg = "";
		if (checkLocIsLure(_pos[0], _pos[1])) {
			_luremsg = " <b style='color:#f96f9f;'>(ルアーで出現)</b>";
		}
		
		var _tolview = ""+viewToLDate(pokemon_list[_key].tol)+" に消滅済み";
		if (pokemon_list[_key]["no_tol"] == "1") {
			_tolview = ""+viewToLDate(pokemon_list[_key].tol)+" に存在を確認（消滅時刻未確定）";
		}
		
		var _buffer = "<div style='font-size:12px;font-weight:bold;'><div><b>"+getPokemonLocal(pokemon_list[_key].id)+"</b>　<a onclick='confirmHistoryTurnoffPokemonID("+pokemon_list[_key].id+");'><img src='https://img-pmap.aquapal-cdn.net/img/icon_close.png' border='0' width='20'></a></div><div style='color:gray;'>座標: "+mRound(_pos[0],9)+", "+mRound(_pos[1],9)+" "+_luremsg+"</div><div>"+_tolview+"</div><div id='"+_key+"' class='area_popupdetail'><div></div></div>";
	} else if (pokemon_list[_key]["action"] == "found_ps" || pokemon_list[_key]["action"] == "found_ps_older" || pokemon_list[_key]["action"] == "found_ps_uncert") {
		
		var _poplog_html = "";
		var _caution = "";
		var _addpoptime = "";
		
		if (pokemon_list[_key]["action"] == "found_ps_uncert") {
			var _poptimes_view = "(不明)";
			
			var _lastmin = "";
			if (pokemon_list[_key]["lastfound"]) {
				_lastmin = "毎時「"+Num2(new Date(parseInt(pokemon_list[_key]["lastfound"])*1000).getMinutes())+"」分あたりに出現する可能性が高いです。";
			}
			
			_caution = "<div style='background-color:#666666;color:white;padding:5px;'>このポケソースは存在を確認していますが出現と消滅の時間が不明です。"+_lastmin+"</div>";
		} else {
			var _poptimes_view = getPokeSourcePoptimesView(_key);
		}
		
		next_PokeSourcePokemons = true;
		_poplog_html = "<div>ポケソース出現ログ:<br>"+getPokeSourcePokemonsView(_key)+"</div>";
	
		if (pokemon_list[_key]["longtime"] == "1") {
			//_caution = "<div style='background-color:blue;color:white;padding:5px;'>ロングソース（出現時間60分）からの出現です。</div>";
			_addpoptime = " (ロングソース)";
		} else {
			/*
			if (pokemon_list[_key].lostmin) {
				var _poptimes = (pokemon_list[_key].lostmin).split(",");
				if (_poptimes.length == 2) {
					_caution = "<div style='background-color:#cc00cc;color:white;padding:5px;'>ここは2重ポケソースです。30分ごとに2度同じ個体が出現しますが、1回目に捕まえた場合は2回目に出現しません。無駄足にならないよう注意してください。</div>";
					//_plogname = "ポケソース出現ログ";
				}
			}
			*/
		}
		if (pokemon_list[_key]["action"] == "found_ps_older") {
			_caution = "<div style='background-color:#666666;color:white;padding:5px;'>最後のポケソース変更以降、出現が確認できていません。廃止された恐れがあります。</div>";
		}

		var _buffer = "<div style='font-size:12px;font-weight:bold;'><div><b>"+getPokeSourceTypeName(_key)+_addpoptime+"</b>　<a href='"+getURLNavigation(_pos[0], _pos[1])+"' target='_blank'><img src='https://img-pmap.aquapal-cdn.net/img/icon_navi.png' border='0' width='20'></a>　<img src='https://img-pmap.aquapal-cdn.net/img/icon_danger2.png' border='0' width='20' onclick='openReport(\""+_key+"\");'></div><div style='color:gray;'>座標: "+mRound(_pos[0],9)+", "+mRound(_pos[1],9)+"</div>"+_caution+"<div class='area_pokesource_poptimes_view'>出現周期(毎時): "+_poptimes_view+"</div>"+_poplog_html+"<div id='"+_key+"' class='area_popupdetail'></div><div id='area_popup_pokesource_searchbutton' class='area_popup_pokesource_searchbutton' style='text-align:center;display:none;"+getSearchIconAlpha()+"'><a onclick='researchByLoc("+_pos[0]+", "+_pos[1]+", true);'><img src='https://img-pmap.aquapal-cdn.net/img/icon_search2.png' border='0' width='35'></a></div><div id='area_popup_pokesource_popfound' class='area_popup_pokesource_popfound' style='text-align:center;display:none;'></div></div>";
	} else if (pokemon_list[_key]["action"] == "fort") {
		var _type = "";
		
		if (pokemon_list[_key]["type"] == "1") {
			_type = "ポケストップ (Pokestop)";
			var _buffer = "<div style='font-size:12px;font-weight:bold;'><div><b>"+_type+"</b>　<a href='"+getURLNavigation(_pos[0], _pos[1])+"' target='_blank'><img src='https://img-pmap.aquapal-cdn.net/img/icon_navi.png' border='0' width='20'></a></div><div style='color:gray;'>座標: "+mRound(_pos[0],9)+", "+mRound(_pos[1],9)+"</div><div id='"+_key+"' class='area_popupdetail'></div><div id='area_popup_pokesource_searchbutton' class='area_popup_pokesource_searchbutton' style='text-align:center;display:none;"+getSearchIconAlpha()+"'><a onclick='researchByLoc("+_pos[0]+", "+_pos[1]+", true);'><img src='https://img-pmap.aquapal-cdn.net/img/icon_search2.png' border='0' width='35'></a></div><div id='area_popup_pokesource_popfound' class='area_popup_pokesource_popfound' style='text-align:center;display:none;'></div></div>";
		} else {
			_type = "ジム (Gym)";
			
			var _addfaviconstyle = "";
			var _tmp = _key.split(",");
			var _keyname = ""+mRound(_tmp[0], 9)+","+mRound(_tmp[1], 9);
			if (area_favgym.indexOf(""+_keyname) != -1) {
				_addfaviconstyle = "opacity:0.5;";
			}
			
							
			var _buffer = "<div style='font-size:12px;font-weight:bold;'><div><b>"+_type+"</b>　<a href='"+getURLNavigation(_pos[0], _pos[1])+"' target='_blank'><img src='https://img-pmap.aquapal-cdn.net/img/icon_navi.png' border='0' width='20'></a>　<a onclick='openAddFavGym("+_pos[0]+", "+_pos[1]+")' target='_blank'><img id='icon_gymfav_add_"+_keyname+"' src='https://img-pmap.aquapal-cdn.net/img/icon_fav.png' border='0' width='20' style='"+_addfaviconstyle+"'></a></div><div style='color:gray;'>座標: "+mRound(_pos[0],9)+", "+mRound(_pos[1],9)+"</div><div id='"+_key+"' class='area_popupdetail'></div><div id='area_popup_pokesource_searchbutton' class='area_popup_pokesource_searchbutton' style='text-align:center;display:none;"+getSearchIconAlpha()+"'><a onclick='researchByLoc("+_pos[0]+", "+_pos[1]+", true);'><img src='https://img-pmap.aquapal-cdn.net/img/icon_search2.png' border='0' width='35'></a></div><div id='area_popup_pokesource_popfound' class='area_popup_pokesource_popfound' style='text-align:center;display:none;'></div></div>";
		}
		

	}
	
	var popup = L.popup({offset: L.point(0, -10), closeButton: false, closeOnClick: true})
    .setLatLng([_pos[0], _pos[1]])
    .setContent(_buffer)
    .openOn(map);
	
	last_popup_window = _key;
	
	/*
	if (last_popup_timeout) { clearTimeout(last_popup_timeout); }
	last_popup_timeout = setTimeout(function(){ 
		//closeDetailPopup();
	 }, 1000*7);
	 */
	
	setTimeout(function(){
		if (next_PokeSourcePokemons) {
			requestPokeSourcePokemons(_key);
		}
		timeoutCountdown();
	}, 50);
}

		function dressNumberColor(_num, _max) {
			var _per = (_num / _max) * 100;
			
			var _color = "black";
			if (_per == 100) { _color = "#FF0000"; }
			else if (_per >= 95) { _color = "#FF00E7"; }
			else if (_per >= 90) { _color = "#028702"; }
			else if (_per >= 80) { _color = "#5700FF"; }
			
			return "<font color='"+_color+"'>"+_num+"</font>";
		}

		function getMobIV(_item) {
			try {
				var _num = Math.round((( parseInt(_item["individual_attack"]) + parseInt(_item["individual_defense"]) + parseInt(_item["individual_stamina"]) )/45) * 100);
				if (_num > 0) {
					return _num;
				}
			}catch(e) {
			}
			return false;
		}
		
		function viewMobMove(_val) {
			try{
				return move_list[_val];
			} catch(e) {
				return "(不明)";
			}
		}
		
		function viewMobCP(_id, _atk, _def, _sta) {
			try{
				return ""+calcMobCP(_id, _atk, _def, _sta, 0.7317)+" (強化後 "+calcMobCP(_id, _atk, _def, _sta, 0.79030001)+")";
			} catch(e) {
				return "(不明)";
			}
		}
		
			function calcMobCP(_id, _atk, _def, _sta, _cpm) {
				try{
					var _base = base_list[_id].split(",");
					var _cp = ( 0.1 * ((parseInt(_atk) + parseInt(_base[0])) * Math.sqrt(parseInt(_def) + parseInt(_base[1])) * Math.sqrt(parseInt(_sta) + parseInt(_base[2])) * Math.pow(_cpm, 2)) );
					return Math.round(_cp);
				} catch(e) {
					return "(不明)";
				}
			}

	function getSearchIconAlpha() {
		if (!nextRefreshResearchHandle) {
			return "opacity:1;";
		}
		return "opacity:0.2;";
	}

	function getURLNavigation(_loc1, _loc2) {
		var _tmp;
					_tmp = "https://maps.google.com/maps?";
					
		var _nowloc = "現在地";
					
		_tmp = "" + _tmp + "saddr="+encodeURIComponent(_nowloc)+"&daddr="+encodeURIComponent(_loc1+","+_loc2)+"";
		
					if (configpush_movemethod) {
				if (configpush_movemethod >= 40) {
					//_tmp = ""+ _tmp +"&directionsmode=transit";
					_tmp = ""+ _tmp +"&directionsmode=car";
				} else if (configpush_movemethod >= 20) {
					//_tmp = ""+ _tmp +"&directionsmode=bicycling";
					_tmp = ""+ _tmp +"&directionsmode=walking";
				} else {
					_tmp = ""+ _tmp +"&directionsmode=walking";
				}
			}
				
		return _tmp;
	}
	
	function jumpIOSNavigationApp(_loc1, _loc2) {
		var _url = getURLNavigation(_loc1, _loc2);
		
		if (config_navi_app == "googlemaps") {
			_url = _url.split("https://maps.google.com/maps").join("comgooglemaps://");
		} else {
		}
		
		AirBridge.evoke('action=extopen;url='+encodeURIComponent(_url)+';');
	}

	function getPokeSourceTypeName(_key) {
		var _name = "ポケソース";
		//if (pokemon_list[_key]["pokesource_type_water"]) {
		//	_name = "水棲ポケソース";
		//}
		
		if (pokemon_list[_key].lostmin) {
			var _poptimes = (pokemon_list[_key].lostmin).split(",");
			if (_poptimes.length > 1) {
				_name = ""+_poptimes.length+"重" + _name;
			}
		}
		
		return _name;
	}

	function getPokeSourcePoptimesView(_key) {
		var _poptimes_view = "";
		var _spawn_min = 30;
		if (pokemon_list[_key]["longtime"] == "1") {
			_spawn_min = 60;
		}
		var _poptimes = (pokemon_list[_key].lostmin).split(",");
		var _losttimes = pokemon_list[_key]["losttime"].split(",");
		for (var x in _poptimes) {
			if (!_poptimes[x]) continue;
			if (_poptimes_view) _poptimes_view += ", ";
			
			var _losttime = parseInt(_losttimes[x]);
			
			var _nowpop = false;
			if (checkPokeSourcePoptimeSingle(_losttime, pokemon_list[_key]["longtime"])) {
				_nowpop = true;
				_poptimes_view += "<b style='color:red;'>";
			}
			
			//console.log("debug: "+( _losttime - (60*15)) );
			
			var _losttime_date = new Date();
			_losttime_date.setTime( _losttime * 1000 );
			var _poptime_date = new Date();
			_poptime_date.setTime( ( _losttime - (60*_spawn_min) ) * 1000 );
			
			_poptimes_view += ""+Num2(_poptime_date.getMinutes())+"分<font style='font-size:80%;'>"+Num2(_poptime_date.getSeconds())+"秒頃</font>～"+Num2(_losttime_date.getMinutes())+"分<font style='font-size:80%;'>"+Num2(_losttime_date.getSeconds())+"秒</font>";
			
			if (_nowpop) {
				_poptimes_view += "</b>";
			}
		}
		
		return _poptimes_view;
	}
	
	function keyToIdtag(_key) {
		var _pos = _key.split(",");
		var _tagid = ""+(_pos[0].split(".").join("_"))+"_"+(_pos[1].split(".").join("_"));
		return ""+(_pos[0].split(".").join("_"))+"_"+(_pos[1].split(".").join("_"));
	}
	
	function htmlWriteByClass(_class, _html) {
		var _elem = document.getElementsByClassName(_class);
		for (var i=0; i<_elem.length; i++) {
			_elem[i].innerHTML = _html;
		}
	}
	
	
	function htmlToggleDisplayByClass(_class, _display) {
		var _elem = document.getElementsByClassName(""+_class);
		for (var i=0; i<_elem.length; i++) {
			_elem[i].style.display = ""+_display;
		}
	}
	
	function htmlOpacityByClass(_class, _opacity) {
		var _elem = document.getElementsByClassName(""+_class);
		for (var i=0; i<_elem.length; i++) {
			_elem[i].style.opacity = _opacity;
		}
	}
	
	function getPokeSourcePokemonsView(_key) {
		
		//いったんpendingのdivを出しておいて、ajax受信後に書き換える
		
		return "<div class='area_pokesource_pokemon_poplog_"+keyToIdtag(_key)+"'><font color='#666666'>(データ受信中...)</font></div>";
		
	}
		var requestPokeSourcePokemonsNextUncert = false;
		function requestPokeSourcePokemons(_key) {
			console.log("requestPokeSourcePokemons: "+_key);
			
			if (getLocalConfig("poptimelines_fullopen") == "1") {
				flagPoptimelinesINPopup = true;
			}
			
			var _action = "getPokeSourceDetailSingle";
			if (pokemon_list[_key]["action"] == "found_ps_uncert" || requestPokeSourcePokemonsNextUncert) {
				_action = "getPokeSourceDetailSingleUncert";
			}
			requestPokeSourcePokemonsNextUncert = false;
			
			var _pos = _key.split(",");
			var _tagid = keyToIdtag(_key);
			
			$.ajax({
			    url: "https://"+using_dbserver+"/_dbserver.php?uukey=39aa0e9c09e006a6d0ce427a33f84135&sysversion=1001&action="+_action+"&loc1="+encodeURIComponent(parseFloat(_pos[0]))+"&loc2="+encodeURIComponent(parseFloat(_pos[1])),
			    type: "GET",
			    data: "",
			    timeout: 8000,
			    cache: false
			}).done(function(data, status, xhr) {
				if (data.indexOf("action=found_ps") != -1) {
					var _pokemon_ids_view = "";
					var _pokemon_ids_view_timelinewin = "";
					
					var data = data.split("\n");
					for (var i=0; i<data.length; i++) {
						var _ent = parseValue(data[i]);
						if (_ent["action"] == "found_ps" || _ent["action"] == "found_ps_older" || _ent["action"] == "found_ps_uncert") {
							
							var _poptime_sec = 30*60;
							//if (_ent["longtime"] == "1") {
							var _key_pokesource = _pos[0]+","+_pos[1]+","+_ent["action"];
							if (pokemon_list[_key_pokesource]) {
								if (pokemon_list[_key_pokesource]["longtime"] == "1") {
									_poptime_sec = 60*60;
								}
							}
							
							var _cnt = 0;
							var _pokemon_ids = _ent["timeline"].split(",");
							for (var x in _pokemon_ids) {
								if (!_pokemon_ids[x]) continue;
								if (_pokemon_ids_view) _pokemon_ids_view += " ";
								
								var _tmp = _pokemon_ids[x].split("@");
								var _addattr = "";
								
								if ((new Date()).getTime() <= parseInt(_tmp[0])*1000) {
									_addattr = "color:rgba(255,0,0,0.6);font-weight:bold;";
									_pokemon_ids_view += "<img onclick='openPoptimelines();' src='"+getIconImage(_tmp[1])+"' width='20' style='background-color:rgba(255,0,0,0.6);'>";
								} else {
									_pokemon_ids_view += "<img onclick='openPoptimelines();' src='"+getIconImage(_tmp[1])+"' width='20'>";
								}
								if (_cnt == 7) {
									if (flagPoptimelinesINPopup) {
										_pokemon_ids_view += "<span id='area_poptimelines_add'>";
									} else {
										_pokemon_ids_view += "<span id='area_poptimelines_add' style='display:none;'>";
									}
								}
								_cnt ++;
								
								var _tol = "--:--:--";
								
								if (_ent["action"] == "found_ps_uncert") {
									if (parseInt(_tmp[0])) {
										var _tmptol = viewToLDate( (parseInt(_tmp[0]))*1000 ).split(" ");
										_tol = "<div style='font-size:80%;'>"+_tmptol[0]+"</div><div>"+_tmptol[1]+"</div>";
									}
								} else {
									if (parseInt(_tmp[0])) { _tol = viewToL( (parseInt(_tmp[0]) - _poptime_sec)*1000 ); }
								}
								_pokemon_ids_view_timelinewin += "<div><div style='display: table-cell;vertical-align: middle;'><img src='"+getIconImage(_tmp[1])+"' width='30'></div><div style='display: table-cell;vertical-align: middle;padding-left:5px;font-size:90%;color:#333333;"+_addattr+"'>"+_tol+"</div></div>";
							}
							if (_cnt >= 7) {
								_pokemon_ids_view += "</span>";
							}
							
							var _opentimelineimg = "icon_yopen.png?v=1";
							if (flagPoptimelinesINPopup) {
								_opentimelineimg = "icon_yclose.png?v=1";
							}
							
							_pokemon_ids_view += "<img id='area_poptimelines_add_icon' onclick='togglePoptimelinesINPopup();openPoptimelines();' src='https://img-pmap.aquapal-cdn.net/img/"+_opentimelineimg+"' width='20' style='cursor:pointer;'>";
							
							if (_ent["lostmin"]) {
								if (_ent["lostmin"].indexOf(",") != -1) {
									if (_ent["first2ndpop"]) {
										var _tmp1 = (new Date());
										_tmp1.setTime( (_ent["first2ndpop"] - 15*60)*1000 );
										var _tmp2 = (new Date());
										_tmp2.setTime( (_ent["first2ndpop"] - 15*60 + 30*60)*1000 );
										_pokemon_ids_view += "<div>1回目 毎時"+Num2(_tmp1.getMinutes())+"分 → 2回目 毎時"+Num2(_tmp2.getMinutes())+"分</div>";
										
										//2回目出現予想(実際に取れていない場合のみ)
										if (_ent["next2ndpop"]) {
											var _tmp = _ent["next2ndpop"].split("@");
											
											//出現中個体がもうある場合はパス
											var _find = false;
											var _key_found = pokemon_list_lastid[_pos[0]+","+_pos[1]];
											if (_key_found) {
												if (pokemon_list[_key_found]) {
													if (Math.abs(parseInt(_tmp[0])*1000 - pokemon_list[_key_found]["tol"]) < 100*1000) {
														_find = true;
													}
												}
											}
											if (!_find) {
												if ((new Date()).getTime() <= parseInt(_tmp[0])*1000) {
													_pokemon_ids_view = "<img onclick='openPoptimelines();' src='"+getIconImage(_tmp[1])+"' width='20' title='次回予告 (２重ポケソース)' style='opacity:0.8;background-color:rgba(0,255,0,0.6);'>"+_pokemon_ids_view;
													
													var _tol = "--:--:--";
													if (parseInt(_tmp[0])) { _tol = viewToL( (parseInt(_tmp[0]) - _poptime_sec)*1000 ); }
													_pokemon_ids_view_timelinewin = "<div><div style='display: table-cell;vertical-align: middle;opacity:0.6;'><img src='"+getIconImage(_tmp[1])+"' width='30'></div><div style='display: table-cell;vertical-align: middle;padding-left:5px;font-size:90%;color:#333333;color:green;'>"+_tol+"</div></div>" + _pokemon_ids_view_timelinewin;
												}
											}
										}
									}
								}
								
								if (_ent["lostmin"].indexOf(",") != -1) {
									_pokemon_ids_view_timelinewin = "<div style='font-weight:bold;font-size:80%;'>出現記録</div>" + _pokemon_ids_view_timelinewin;
								} else {
									_pokemon_ids_view_timelinewin = "<div style='font-weight:bold;font-size:80%;'>出現記録</div>" + _pokemon_ids_view_timelinewin;
								}
							} else {
								_pokemon_ids_view_timelinewin = "<div style='font-weight:bold;font-size:80%;'>存在を確認した<br>日時の一覧<br>(未確定ソース)</div>" + _pokemon_ids_view_timelinewin;
							}
							
							//出現中個体に危険表記がある場合はポケソース危険表記はパス
							var _key_found = pokemon_list_lastid[_pos[0]+","+_pos[1]];
							var _danger_pass = false;
							if (_key_found) {
								if (pokemon_list[_key_found]) {
									if (pokemon_list[_key_found]["danger"] == "1") {
										_danger_pass = true;
									}
								}
							}
							if (!_danger_pass) {
								if (_ent["danger_caution"] == "1") {
									_pokemon_ids_view = _pokemon_ids_view + "<div style='background-color:red;color:white;padding:5px;'>危険な場所または立入禁止であると多数の報告が寄せられています。</div>";
								}
							}
							
							break;
						}
					}
			
					htmlWriteByClass("area_pokesource_pokemon_poplog_"+_tagid, _pokemon_ids_view);
					
					writePoptimelines(_pokemon_ids_view_timelinewin);
											openPoptimelines();
											
				} else {
					htmlWriteByClass("area_pokesource_pokemon_poplog_"+_tagid, "<font color='#666666'>(記録なし)</font>");
				}
			}).fail(function(xhr, status, error) {
				htmlWriteByClass("area_pokesource_pokemon_poplog_"+_tagid, "<font color='#666666'>(データ受信エラー)</font>");
			});
		}

		function openPoptimelines() {
			try {
				var _masterarea = document.getElementById('area_poptimeline');

				_masterarea.style.width = '150px';
				_masterarea.style.right = '0px';
				
				_masterarea.style.top = '70px';
				updateFooterHeight();
				
				//viewWindowCloseButton(true);
				
				_masterarea.style.display = "block";
			} catch(e) {
				console.log("openPoptimelines(): error: "+e);
			}
			
		}
		
		var flagPoptimelinesINPopup = false;
		function togglePoptimelinesINPopup() {
			try {
				var _newconfig = "";
				if (flagPoptimelinesINPopup) {
					flagPoptimelinesINPopup = false;
					$("#area_poptimelines_add").css({"display": "none"});
					document.getElementById('area_poptimelines_add_icon').src = "https://img-pmap.aquapal-cdn.net/img/icon_yopen.png?v=1";
				} else {
					_newconfig = "1";
					flagPoptimelinesINPopup = true;
					$("#area_poptimelines_add").css({"display": "inline"});
					document.getElementById('area_poptimelines_add_icon').src = "https://img-pmap.aquapal-cdn.net/img/icon_yclose.png?v=1";
				}
				
				saveLocalConfig("poptimelines_fullopen", _newconfig);
			} catch(e) {
				console.log("togglePoptimelinesINPopup: error: "+e);
			}
		}
		
			function writePoptimelines(_htmldata) {
				$("#area_poptimeline_data").html(_htmldata);
			}
			
			function closePoptimelines() {
				$("#area_poptimeline").css({"display": "none"});
			}


var error_nextgen_pokemons = false;
function getIconImage(_id) {
	if (_id == -1) {
		return "https://img-pmap.aquapal-cdn.net/img/-1.png";
	}
	
	try{
		if (config_custom_icon_url) {
			if (config_custom_icon_url.indexOf("http") == 0) {
				
				//151以上が正常判定されていない
				if (error_nextgen_pokemons && _id > 151) {
					return "https://img-pmap.aquapal-cdn.net/img/type1_gen2/"+_id+".png";
				}
				
				var _tmpurl = config_custom_icon_url;
				
				_tmpurl = _tmpurl.trim();
				//console.log("test: "+_tmpurl);
				
				if (_tmpurl.indexOf("@ID") == -1) {
					_tmpurl = _tmpurl + "@ID@.png";
				}
				
				_tmpurl = _tmpurl.split("@ID@").join(""+_id);
				for (var i=2; i<10; i++) {
					_tmpurl = _tmpurl.split("@ID"+i+"@").join(""+zeroPadding(_id, i));
				}
				return "https://img-pmap.aquapal-cdn.net/gateway.png/?url="+encodeURIComponent(_tmpurl)+"&version=101";
			}
		}
	}catch(e){
	}
	
	return "https://img-pmap.aquapal-cdn.net/img/type1_gen2/"+_id+".png";
}
	function getIconImageWithLoc(_key) {
		try{
			if (checkCheckMonster(_key)) {
				return "https://img-pmap.aquapal-cdn.net/img/icon_check.png";
			}
		} catch(e) {
			console.log("getIconImageWithLoc: error(1): "+e);
		}
		
		try{
			var _tmp = _key.split(",");
			return getIconImage(_tmp[3]);
		} catch(e) {
			console.log("getIconImageWithLoc: error(2): "+e);
		}
	}

var last_popup_timeout = false;

var timeout_viewServerError = false;
function viewServerError(_status) {
	if (_status) {
		$("#area_window_error_msg").html(""+_status);
		$("#area_window_error").css({
			"display": "block",
			"top": "29px",
		});
			
		clearInterval(timeout_viewServerError);
		timeout_viewServerError = setTimeout(function(){
			viewServerError(false);
		}, 1000*3);
	} else {
		$("#area_window_error").css({"display": "none"});
	}
}

var timeout_viewUpdateMessage = false;
var lastkey_viewUpdateMessage = "";
function viewUpdateMessage(_key, _status) {
	if (cookie.get("cookie_updatekey") == _key) {
		return;
	}
	
	if (_status) {
		lastkey_viewUpdateMessage = _key;
		
		$("#area_window_update_msg").html(""+decodeURIComponent(_status));
		$("#area_window_update").css({
			"display": "block",
			"top": "120px",
		});
			
		clearInterval(timeout_viewUpdateMessage);
		timeout_viewUpdateMessage = setTimeout(function(){
			closeUpdateMessage();
		}, 1000*20);
	} else {
		$("#area_window_update").css({"display": "none"});
	}
}
	function closeUpdateMessage(_key) {
		$("#area_window_update").css({"display": "none"});
		cookie.set("cookie_updatekey", lastkey_viewUpdateMessage);
	}

var _uptime = (new Date).getTime();
var pokemon_list_cnt = 0;
var lock_proc = false;
var check_jst = false;
var last_protPokemonData = "";
var timeout_last_protPokemonData = false;
function protPokemon(_data) {
	
	console.log("protPokemon()")
	lock_proc = true;
	
	console.log("old_latlng: "+old_latlng);
	var _latlng = old_latlng.split(",");
	_latlng[0] = parseFloat(_latlng[0]);
	_latlng[1] = parseFloat(_latlng[1]);
	
	//clearData();
	//pokemon_list = new Array();
	
	pokemon_list_enable = _data.split("action=found;").length - 1;
	fort_list_enable = _data.split("action=fort;").length - 1;
	
	if (_data.indexOf("mysql_dberror=") != -1) {
		viewServerError("サーバ側エラー");
	} else {
		viewServerError(false);
	}
	
	//最後のデータを5秒間キャッシュしておく
	last_protPokemonData = _data;
	clearTimeout(timeout_last_protPokemonData);
	timeout_last_protPokemonData = setTimeout(function(){
		last_protPokemonData = "";
	}, 5000);
	
	//var _data = "";
	_data = _data.split("\n");
	for (var i=0; i<_data.length; i++) {
		var _ent = parseValue(_data[i]);
				if (_ent["action"] == "notice") {
			try{
				if (_ent["key"] && _ent["message"]) {
					viewUpdateMessage(_ent["key"], _ent["message"]);
				}
			} catch(e) {
				console.log("error: action=notice: "+e);
			}
		}
		if (_ent["action"] == "fort") {
			if (!_ent["loc"]) continue;
			if (func_fortpokestop != "1") {
				if (_ent["type"] == "1") continue;
			}
			if (func_fortgym != "1") {
				if (_ent["type"] == "0") continue;
			}
			
			var _tmp = _ent["loc"].split(",");
			_ent["loc"] = ""+mRound(_tmp[0],9)+","+mRound(_tmp[1],9)+","+_ent["action"]+","+_ent["type"];
			
			//ジム
			if (_ent["type"] == "0") {
				//最終更新時間チェック
				_ent["time_update_over"] = "";
				if (_ent["time_update"]) {
					var _lefttime = (new Date()).getTime() - (_ent["time_update"]*1000);
					if (_lefttime >= 60*60*24*1000) { //1日以上更新されていない
						_ent["time_update_over"] = "1";
					}
				}
				
				//ジムレベル生成
				if (_ent["gym_points"]) {
					_ent["gym_level"] = viewGymLevel(_ent["gym_points"]);
				}
			}
			
			//既に表示済み
			if (pokemon_list[_ent["loc"]]) {
				if (pokemon_list[""+_ent["loc"]]["delete"] == false) {
					if (_ent["type"] == "0") {
						//ジム
						if (_ent["owned_by_team"] != pokemon_list[""+_ent["loc"]]["owned_by_team"] || _ent["time_update_over"] != pokemon_list[""+_ent["loc"]]["time_update_over"] || _ent["gym_level"] != pokemon_list[""+_ent["loc"]]["gym_level"]) {
							//チーム、最終更新超過、ジムレベルが変わった場合は初期化して再生成
							deleteMarker(_ent["loc"]);
							pokemon_list[_ent["loc"]]["delete"] = true;
							pokemon_list[_ent["loc"]] = null;
						} else {
							//チームが変わっていない場合はデータだけ書換
							//pokemon_list[_ent["loc"]]["owned_by_team"] = _ent["owned_by_team"];
							pokemon_list[_ent["loc"]]["time_update"] = _ent["time_update"];
							pokemon_list[_ent["loc"]]["gym_points"] = _ent["gym_points"];
							continue;
						}
					} else if (_ent["type"] == "1") {
						//ポケスト
						if (_ent["tol_module"] != pokemon_list[""+_ent["loc"]]["tol_module"]) {
							//モジュール情報が変わった場合は再生成
							//console.log("fort rebuild: モジュール情報が変わった場合は再生成: "+_ent["tol_module"]+" != "+pokemon_list[""+_ent["loc"]]["tol_module"]);
							
							deleteMarker(_ent["loc"]);
							pokemon_list[_ent["loc"]]["delete"] = true;
							pokemon_list[_ent["loc"]] = null;
						} else {
							continue;
						}
					}
				}
			}
			
			//console.log("pokemon_list: "+_ent["loc"]);
			pokemon_list[_ent["loc"]] = _ent;
			
			//表示
			/*
			if (checkBoundsDiffOver(_ent["loc"]) || lock_zoom || lock_drag) {
				//遠すぎ
				pokemon_list[_ent["loc"]]["diffover"] = true;
			} else {
				pokemon_list[_ent["loc"]]["diffover"] = false;
			}
			*/
			pokemon_list[_ent["loc"]]["diffover"] = true;
			pokemon_list[_ent["loc"]]["noview"] = false;
			
			//var _color;
			//if (!pokemon_list[_ent["loc"]]["noview"] && !pokemon_list[_ent["loc"]]["diffover"]) {
			//	genOverlayAndView(_ent["loc"]);
			//}
			
			pokemon_list[_ent["loc"]]["delete"] = false;
			
			refresh_markers = true;
			
			fort_list_enable ++;
		}
		if (_ent["action"] == "found_ps" || _ent["action"] == "found_ps_older" || _ent["action"] == "found_ps_uncert") {
			
			if (!_ent["loc"]) continue;
			if (func_ps != "1") continue;
			
			var _tmp = _ent["loc"].split(",");
			_ent["oloc"] = ""+mRound(_tmp[0],9)+","+mRound(_tmp[1],9);
			_ent["loc"] = ""+_ent["oloc"]+","+_ent["action"];
			
			if (pokemon_list[_ent["loc"]]) {
				if (!pokemon_list[_ent["loc"]]["delete"]) {
					//ポケソース確定状態が変化すれば再生成
					if (pokemon_list[_ent["loc"]]["action"] != _ent["action"]) {
						deleteMarker(_ent["loc"]);
						pokemon_list[_ent["loc"]]["delete"] = true;
						pokemon_list[_ent["loc"]] = null;
					} else {
						continue;
					}
				}
			}
			
			pokemon_list[_ent["loc"]] = _ent;
			
			var _color;
			/*
			if (lock_zoom || lock_drag) {
				pokemon_list[_ent["loc"]]["diffover"] = true;
				_color = getPokeSourceMarkerColor(_ent["loc"]);
			} else {
				if (func_ps_onlynearby != "1") {
					//全部のポケソース表示
					if (!checkBoundsDiffOver(_ent["loc"])) {
						//範囲内
						pokemon_list[_ent["loc"]]["diffover"] = false;
						_color = genOverlayAndView(_ent["loc"]);
					} else {
						//範囲外
						pokemon_list[_ent["loc"]]["diffover"] = true;
						_color = getPokeSourceMarkerColor(_ent["loc"]);
						
						//console.log("範囲外: "+_ent["loc"]+"  @@@@ "+old_latlng)
					}
				} else {
					//200m範囲内のポケソースだけ表示
					if (gpslog_loc) {
						if (getDistance(gpslog_loc.latitude, gpslog_loc.longitude, _tmp[0], _tmp[1]) <= 210) {
							//200m範囲内
							pokemon_list[_ent["loc"]]["diffover"] = false;
							_color = genOverlayAndView(_ent["loc"]);
						} else {
							//範囲外
							pokemon_list[_ent["loc"]]["diffover"] = true;
							_color = getPokeSourceMarkerColor(_ent["loc"]);
						}
					} else {
						//gpsなし
						pokemon_list[_ent["loc"]]["diffover"] = true;
						_color = getPokeSourceMarkerColor(_ent["loc"]);
					}
				}
			}
			*/
			pokemon_list[_ent["loc"]]["diffover"] = true;
			_color = getPokeSourceMarkerColor(_ent["loc"]);
				
			pokemon_list[_ent["loc"]]["noview"] = false;
			
			pokemon_list[_ent["loc"]]["color"] = _color;
			pokemon_list[_ent["loc"]]["delete"] = false;
			
			refresh_markers = true;
		}
		if (_ent["action"] == "found" || (_ent["action"] == "found_history" && func_historydisable != "1")) {
			if (!_ent["loc"]) continue;
			
							if (_ent["tol"] == -1) {
					_ent["tol"] = (new Date()).getTime() + (60*10*1000);
				}
						
			if (!_ent["tol"] || _ent["tol"] < 0) continue;
			
			//アイコンサイズ
			try{
				var _iconsize = 32;
				_iconsize = _iconsize + rare_table[_ent["id"]];
				//if (rare_table[_ent["id"]] >= 6) { _iconsize *= 1.1; }
				_ent["iconsize"] = _iconsize;
			}catch(e){
				_ent["iconsize"] = 32;
			}
			
			var _tmp = _ent["loc"].split(",");
			if (_ent["action"] == "found") {
				//_ent["loc"] = ""+mRound(_tmp[0],9)+","+mRound(_tmp[1],9)+","+_ent["action"]+","+_ent["id"]+","+Math.floor(_ent["tol"]/1000);
				_ent["loc"] = ""+mRound(_tmp[0],9)+","+mRound(_tmp[1],9)+","+_ent["action"]+","+_ent["id"]+","+_ent["eid"];
				
				_ent["iv"] = getMobIV(_ent);
							
				if (pokemon_list[_ent["loc"]]) {
					if (pokemon_list[""+_ent["loc"]]["delete"] == false) {
						if (pokemon_list[""+_ent["loc"]]["tol"] == _ent["tol"] && pokemon_list[""+_ent["loc"]]["iv"] == _ent["iv"] && pokemon_list[""+_ent["loc"]]["move_1"] == _ent["move_1"]) {
							//ToL、個体値情報同じものはパス
							//console.log("npass: "+pokemon_list[""+_ent["loc"]]["individual_attack"]);
							continue;
						} else {
							//ToLが違う(未確定ソース個体)は初期化
							deleteMarker(_ent["loc"]);
							pokemon_list[_ent["loc"]]["delete"] = true;
							pokemon_list[_ent["loc"]] = null;
						}
					}
				}
			}
			if (_ent["action"] == "found_history") {
				//_ent["loc"] = ""+mRound(_tmp[0],9)+","+mRound(_tmp[1],9)+","+_ent["action"]+","+_ent["id"]+","+Math.floor((_ent["tol"]/1000)/(30*60));
				_ent["loc"] = ""+mRound(_tmp[0],9)+","+mRound(_tmp[1],9)+","+_ent["action"]+","+_ent["id"];
				
				if (pokemon_list[_ent["loc"]]) {
					if (pokemon_list[""+_ent["loc"]]["delete"] == false) {
						continue;
					}
				}
			}
			
			
			if (_ent["action"] == "found") {
				pokemon_list_lastid[""+mRound(_tmp[0],9)+","+mRound(_tmp[1],9)] = _ent["loc"];
			}
			
			//console.log("new: "+_ent["loc"]);
			
			/*
			if (_ent["danger"]) {
				if (_ent["danger"] == "1") {
					if (func_disabledanger != "1") {
						console.log("danger-skip: "+_ent["loc"]);
						continue;
					}
				}
			}
			*/
			
			//console.log("pokemon_list: "+_ent["loc"]);
			pokemon_list[_ent["loc"]] = _ent;
			
			var _forceview = false;
			if (getLocalConfig("noviewforceiv") == "1") {
				if (_ent["iv"] >= 85) _forceview = true;
			}
			
			if (_ent["action"] == "found" && ((config_viewlist[_ent["id"]] == "1" && !_forceview) || func_pokemondisable == "1")) {
				//非表示
				pokemon_list[_ent["loc"]]["noview"] = true;
				pokemon_list[_ent["loc"]]["diffover"] = false;
			} else if (_ent["action"] == "found_history" && func_historydisable == "1") {
				//非表示
				continue;
			} else {
				//表示
				/*
				if (checkBoundsDiffOver(_ent["loc"]) || lock_zoom || lock_drag) {
					//遠すぎ
					pokemon_list[_ent["loc"]]["diffover"] = true;
				} else {
					pokemon_list[_ent["loc"]]["diffover"] = false;
				}
				*/
				pokemon_list[_ent["loc"]]["diffover"] = true;
				pokemon_list[_ent["loc"]]["noview"] = false;
			}
			
			var _color;
			//if (!pokemon_list[_ent["loc"]]["noview"] && !pokemon_list[_ent["loc"]]["diffover"]) {
			//	_color = genOverlayAndView(_ent["loc"]);
			//} else {
				_color = getColorFromToL(_ent["tol"]);
			//}
			
			pokemon_list[_ent["loc"]]["color"] = _color;
			pokemon_list[_ent["loc"]]["delete"] = false;
			
			pokemon_list_enable ++;
			
			refresh_markers = true;
		}
	}
	
	redrawMap();
}

function genOverlayAndView(_locid) {
	var _ent = pokemon_list[_locid];
	var _color = "";
	
	var _loc = _ent["loc"].split(",");
	var _opacity = 1;
	
	if (_ent["action"] == "found_history") {
		_opacity = 0.4;
		_zindex = 40000;
	}
	if (_ent["action"] == "found_ps" || _ent["action"] == "found_ps_older" || _ent["action"] == "found_ps_uncert") {
		_color = getPokeSourceMarkerColor(_locid);
		
		if (_color == -1) {
			return -1;
		}
		
		_zindex = 50000;
		if (_ent["action"] == "found_ps_older") _zindex = 30000;
		if (_ent["action"] == "found_ps_uncert") _zindex = 20000;
	}
	if (_ent["action"] == "found") {
		_opacity = 1;
		_zindex = 60000;
		
		if (rare_table[_ent["id"]]) {
			if (rare_table[_ent["id"]] > 0) {
				_zindex += rare_table[_ent["id"]] * 10000;
			}
		}
	}
	
	var _icon;
	
	if (_ent["action"] == "fort") {
		var _type = "";
		_opacity = 0.8;
		_zindex = 0;
		
		if (_ent["type"] == "0") {
			_type = "gym";
			
			_zindex = 40000;
			_opacity = 1;
			
			var _iconimg = getGymIcon(_ent["owned_by_team"], _ent["gym_level"]);
			
			if (_ent["time_update_over"]) {
				_opacity = 0.5;
			}
			
			_icon = L.icon({
				iconUrl: ''+_iconimg,
				iconSize: [30, 30],
				iconAnchor: [15, 15],
				popupAnchor: [0, -15]
			});
		} else if (_ent["type"] == "1") {
			_type = "pokestop";
			
			_opacity = 0.8;
			
			var _iconimg = "https://img-pmap.aquapal-cdn.net/img/icon_pokestop_normal.png?v=1";
			if (((new Date()).getTime() / 1000) < _ent["tol_module"]) {
				_iconimg = "https://img-pmap.aquapal-cdn.net/img/icon_pokestop_module.png?v=1";
			}
			
			_icon = L.icon({
				iconUrl: _iconimg,
				iconSize: [20, 20],
				iconAnchor: [10, 10],
				popupAnchor: [0, -10]
			});
		} else {
			return -1;
		}
		

	} else if (_ent["action"] == "found_ps" || _ent["action"] == "found_ps_older") {
		var _iconsize = [22, 22];
		var _tmp = _ent["lostmin"].split(",");
		
		var _spawn_min = 30;
		if (_ent["longtime"] == "1") {
			_spawn_min = 60;
		}
		
		var _tmpview = "";
		if (_tmp.length >= 3) {
			_tmpview = "★";
		} else if (_tmp.length >= 2) {
			_iconsize = [44, 22];
			
			_tmp[0] = _tmp[0] - _spawn_min;
			if (_tmp[0] < 0) { _tmp[0] += 60; }
			
			_tmp[1] = _tmp[1] - _spawn_min;
			if (_tmp[1] < 0) { _tmp[1] += 60; }
			
			_tmpview = ""+Num2(_tmp[0])+","+Num2(_tmp[1]);
			
		} else if (_tmp.length >= 1) {
			_tmp[0] = _tmp[0] - _spawn_min;
			if (_tmp[0] < 0) { _tmp[0] += 60; }
			
			_tmpview = ""+Num2(_tmp[0]);
		} else {
			_tmpview = ""+_tmp;
		}
		
		if (_ent["longtime"] == "1") {
			_tmpview = "<u>"+_tmpview+"</u>";
		}
		
		_icon = L.divIcon({
			html: ''+_tmpview, 
			className: _color,
		    iconSize: _iconsize,
		    iconAnchor: [11, 11],
		    popupAnchor: [0, -11]
		});
	} else if (_ent["action"] == "found_ps_uncert") {
		var _iconsize = [17, 17];
		
		//console.log("found_ps_uncert: "+_color);
		
		var _lastmin = "";
		if (_ent["lastfound"]) {
			_lastmin = Num2(new Date(parseInt(_ent["lastfound"])*1000).getMinutes());
		}
		
		_icon = L.divIcon({
			html: ''+_lastmin, 
			className: _color,
		    iconSize: _iconsize,
		    iconAnchor: [8, 8],
		    popupAnchor: [0, -8]
		});
	} else {
		
		var _iconsize = _ent["iconsize"];
		
		var _imgurl = getIconImageWithLoc(_ent["loc"]);
		
		//console.log("id: "+_ent["id"]+", rare: "+rare_table[_ent["id"]]+", _iconsize: "+_iconsize);
		
		_icon = L.icon({
			    iconUrl: _imgurl,
			    //iconRetinaUrl: _imgurl,
			    iconSize: [_iconsize, _iconsize],
			    iconAnchor: [Math.floor(_iconsize/2), Math.floor(_iconsize/2)],
			    popupAnchor: [0, 0-Math.floor(_iconsize/2)]
			});
	}
	
	if (_ent["action"] == "found") {
		_color = getColorFromToL(_ent["tol"]);
		
		//個体値判定
		var _fillcolor = "rgba(255,255,255,0)";
		var _fillalpha = 1;
		var _fillenable = false;
		if (getLocalConfig("disableviewiv") != "1") {
			if (_ent["iv"]) {
				if (_ent["iv"] >= 85) {
					_fillalpha = (_ent["iv"]/100)/1.6;
					if (_ent["iv"] >= 100) {
						_fillcolor = "#9D06FF";
						_fillalpha = 1;
					}
					else {
						_fillcolor = "#FF06F9";
					}
					_fillenable = true;
					_zindex += 10000;
				}
			}
		}
		
		//残り時間サークル
		var circleOverlay = L.circleMarker( 
			[_loc[0], _loc[1]], 
			{
				weight: 1.5, 
				color: _color, 
				linecap:"butt", 
				linejoin: "mitter", 
				fill: _fillenable, 
				fillColor: _fillcolor,
				fillOpacity: _fillalpha,
				dashArray: getToLBarWidth(_ent["tol"], (_iconsize/2)+3)
			}
		).setRadius((_iconsize/2)+3);
		
		circleOverlay.addTo(map);
		pokemon_list[_locid]["overlay_circle"] = circleOverlay;
	} else if (_ent["action"] == "found_history") {
		_color = getColorFromToL(_ent["tol"]);
	}
			
	var markerOverlay = L.marker([_loc[0], _loc[1]], 
	{
		icon: _icon, 
		opacity: _opacity,
		zIndexOffset: _zindex
	});
	markerOverlay._locid = _locid
	
	//if (_ent["action"] == "fort") {
	//	markerOverlay.addTo(map);
	//} else {
		markerOverlay.addTo(map).on('click', onClickMarkerMap);
	//}
	pokemon_list[_locid]["overlay"] = markerOverlay;
	
	
	return _color;
}

	function getGymIcon(_team, _level) {
		if (_level > 10) _level = 10; //最大レベル
		
		var _iconimg = "gym_white.png";
		if (_team == 1) {
			_iconimg = "gym2/blue"+_level+".png";
		} else if (_team == 2) {
			_iconimg = "gym2/red"+_level+".png";
		} else if (_team == 3) {
			_iconimg = "gym2/yellow"+_level+".png?v=1";
		}
		
		return "https://img-pmap.aquapal-cdn.net/img/"+_iconimg;
	}
	

function onClickMarkerMap(e) {
    openDetailPopup(this._locid);
}

function getCenterMap() {
	if (!map) return [0,0];
	
	var _center = map.getCenter();
	return [_center.lat, _center.lng];
}

function redrawMap() {
	//var latlng = Map_GetCenter();
	//map.getView().setCenter(ol.proj.transform([latlng[0], latlng[1]], 'EPSG:4326', 'EPSG:3857'));
}

function getPokemonLocal(_num) {
	return pokemon_table_ja[_num];
}

var old_latlng = "";
var old_extent = false;
var old_zoomlevel = 16;
var old_p1 = 0;
var old_p2 = 0;
var autoRequestDBServerTimeout = false;
var refreshMarkersTimeout = false;
var pokemon_list_enable = 0;
var fort_list_enable = 0;
var debug_centerbox = false;
var marker_searchpoint_circle = false;
var marker_searchpoint_centerpoint = false;
var refresh_markers = false;

//地図の移動を検出
function checkMapViewMoved() {
	if (!map) return;
	if (lock_zoom || lock_drag) return;
	
	var zoomLevel = map.getZoom();
	old_zoomlevel = zoomLevel;
	
	var flag_unvisible = false;
	var flag_unvisible_msg = "";
	if (zoomLevel <= visible_zoomlevel) {
		flag_unvisible = true;
		
		if (flag_unvisible_msg) flag_unvisible_msg += ",";
		flag_unvisible_msg += "出現中情報";
	}
	if (func_fortpokestop == "1" || func_fortgym == "1") {
		if (zoomLevel <= visible_zoomlevel_fort) {
			flag_unvisible = true;
			
			if (flag_unvisible_msg) flag_unvisible_msg += ",";
			flag_unvisible_msg += "ポケスト";
		}
	}
	if (func_ps == "1") {
		if (zoomLevel <= visible_zoomlevel_pokesource) {
			flag_unvisible = true;
			
			if (flag_unvisible_msg) flag_unvisible_msg += ",";
			flag_unvisible_msg += "ポケソース";
		}
	}
	
	if (flag_unvisible) {
		$("#area_window_visibleinfo").css({
			"display": "block"
		});
		$("#area_window_visibleinfo_typeview").html("("+flag_unvisible_msg+" 非表示)");
	} else {
		$("#area_window_visibleinfo").css({"display": "none"});
	}
	
	var extent = map.getBounds();
	old_extent = extent;
	
	var latlng = getCenterMap();
	if (old_latlng != ""+latlng[0]+","+latlng[1] || refresh_markers) {
		refresh_markers = false;
		
		if (old_latlng) {
			mapdrag_lasttime = (new Date()).getTime();
		}
		old_latlng = ""+latlng[0]+","+latlng[1];
		
		if (parseFloat(latlng[0]) && parseFloat(latlng[1])) {
			
			//サーチ範囲視覚化
			if (marker_searchpoint_circle) {
				marker_searchpoint_circle.remove();
				marker_searchpoint_circle = false;
			}
			if (marker_searchpoint_centerpoint) {
				marker_searchpoint_centerpoint.remove();
				marker_searchpoint_centerpoint = false;
			}
			if (getLocalConfig("searchcircle") == "1") {
				//150mサークル
				marker_searchpoint_circle = L.circle(
					[latlng[0], latlng[1]], 
					150,
					{
						"fill": true,
						"fillOpacity": 0.2,
						stroke: false,
						"fillColor": "#1F6CDD"
					}
				).addTo(map);
				
				//中央十字
				var _icon = L.icon({
				    iconUrl: "https://img-pmap.aquapal-cdn.net/img/icon_centerpoint.png",
				    iconSize: [30, 30],
				    iconAnchor: [15, 15]
				});
				marker_searchpoint_centerpoint = L.marker([latlng[0], latlng[1]], 
				{
					icon: _icon,
					opacity: 0.35
				});
				marker_searchpoint_centerpoint.addTo(map);
			}
			
							location.href = "#"+mRound(latlng[0],6)+","+mRound(latlng[1],6)+","+zoomLevel;
						
			cookie.set("cookie_locations", ""+parseFloat(latlng[0])+","+parseFloat(latlng[1])+","+zoomLevel);
			
			//マップデータDB再取得
			var _reloaddbserver = false;
			if (requestDBServerLastPos) {
				var _dblastpos = requestDBServerLastPos.split(",");
				
				var _reload_diff = 0.006;
				
				if (Math.abs(_dblastpos[0] - parseFloat(latlng[0])) >= _reload_diff || Math.abs(_dblastpos[1] - parseFloat(latlng[1])) >= _reload_diff) {
					//通常では0.006離れたらdbリロード
					_reloaddbserver = true;
				} else if (mRound(_dblastpos[0],1) != mRound(latlng[0],1) || mRound(_dblastpos[1],1) != mRound(latlng[1],1)) {
					//console.log("map area move: checkdbserver: "+mRound(_dblastpos[0],1)+", "+mRound(latlng[0],1)+", "+mRound(_dblastpos[1],1)+", "+mRound(latlng[1],1));
					_reloaddbserver = true;
				}
			} else {
				_reloaddbserver = true;
			}
			if (_reloaddbserver) {
				console.log("map area move: reloaddbserver = true");
				
				requestDBServerReload(300);
			}
			
			if (refreshMarkersTimeout) clearInterval( refreshMarkersTimeout );
			refreshMarkersTimeout = setTimeout(function() {
				//離れすぎたマーカーを削除
				//pokemon_list_enable = 0;
				//fort_list_enable = 0;
				
				for (var i in pokemon_list) {
					if (!pokemon_list[i]) continue;
					if (pokemon_list[i]["delete"]) continue;
					if (pokemon_list[i]["noview"]) continue;
					
					//pokemon_list_enable ++;
					//if (pokemon_list[i]["action"] == "fort") fort_list_enable ++;

					//離れすぎたマーカーを削除
					if (!lock_zoom && !lock_drag) {
						
						if (pokemon_list[i]["action"] == "found_ps" || pokemon_list[i]["action"] == "found_ps_older" || pokemon_list[i]["action"] == "found_ps_uncert") {
							var _loc = (pokemon_list[i].loc).split(",");
							var _diffover = false;
							if (func_ps_onlynearby != "1") {
								//全部のポケソース表示: 地図領域ベース
								_diffover = checkBoundsDiffOver(i);
							} else {
								//かくれているポケソースだけ: GPS座標ベース
								if (gpslog_loc) {
									if (getDistance(gpslog_loc.latitude, gpslog_loc.longitude, _loc[0], _loc[1]) <= 210) {
										_diffover = false;
									} else {
										_diffover = true;
									}
								} else {
									_diffover = true;
								}
							}
							
							if (!_diffover) {
								//200m以内
								if (pokemon_list[i]["diffover"] == true) {
									pokemon_list[i]["diffover"] = false;
									
									if (!pokemon_list[i]["overlay"]) {
										if (genOverlayAndView(i) == -1) continue;
									}
									pokemon_list[i]["overlay"].addTo( map ).on('click', onClickMarkerMap);
								}
							} else {
								//200m範囲外
								if (pokemon_list[i]["diffover"] == false) {
									pokemon_list[i]["diffover"] = true;
									deleteMarker(i);
								}
							}
						} else {
							//地図表示位置ベース
							if (checkBoundsDiffOver(i)) {
								if (pokemon_list[i]["diffover"] == false) {
									pokemon_list[i]["diffover"] = true;
									deleteMarker(i);
								}
							} else if (pokemon_list[i]["diffover"] == true) {
								//離れすぎたけど戻ってきた
								pokemon_list[i]["diffover"] = false;
								
								if (!pokemon_list[i]["overlay"]) {
									if (genOverlayAndView(i) == -1) continue;
								}
								if (pokemon_list[i]["action"] == "fort") {
									pokemon_list[i]["overlay"].addTo( map );
								} else {
									pokemon_list[i]["overlay"].addTo( map ).on('click', onClickMarkerMap);
								}
								if (pokemon_list[i]["overlay_circle"]) { pokemon_list[i]["overlay_circle"].addTo( map ); }
							}
						}
						
					}
				}
			}, 100);
			
			old_p1 = latlng[0];
			old_p2 = latlng[1];
		}
		
	}
}

var visible_zoomlevel = 13;
var visible_zoomlevel_fort = 13;
var visible_zoomlevel_pokesource = 13;
function checkBoundsDiffOver(_pos) {
	if (!_pos) return false;
	
	//if (_pos.indexOf(",found,") != -1) {
	//	var _tmp = _pos.split(",");
	//	if (push_setpid[_tmp[3]]) return false;
	//}
	
	var _this_visible_zoomlevel = visible_zoomlevel;
	if (_pos.indexOf(",fort") != -1) {
		if (fort_list_enable >= 400) {
			_this_visible_zoomlevel = 15;
		} else if (fort_list_enable >= 200) {
			_this_visible_zoomlevel = 15;
		} else {
			_this_visible_zoomlevel = 14;
		}
		if (!func_fortpokestop) _this_visible_zoomlevel = 13;
		visible_zoomlevel_fort = _this_visible_zoomlevel;
	} else if (_pos.indexOf(",found_ps") != -1) {
		if (func_ps_onlynearby != "1") {
			_this_visible_zoomlevel = 15;
		} else {
			_this_visible_zoomlevel = 14;
		}
		visible_zoomlevel_pokesource = _this_visible_zoomlevel;
	}
	
	if (old_zoomlevel <= _this_visible_zoomlevel) {
		return true;
	} else if (old_zoomlevel <= 15) {
		var _latlng = old_latlng.split(",");
		_latlng[0] = parseFloat(_latlng[0]);
		_latlng[1] = parseFloat(_latlng[1]);
		_pos = _pos.split(",");

		if (_latlng[0]-0.04 < _pos[0] && _latlng[1]-0.04 < _pos[1] && _latlng[0]+0.04 > _pos[0] && _latlng[1]+0.04 > _pos[1]) {
			return false;
		} else {
			return true;
		}
	} else {
		_pos = _pos.split(",");
		if (!old_extent) return false;

		if (old_extent.getSouthWest().lat < _pos[0] && old_extent.getSouthWest().lng < _pos[1] && old_extent.getNorthEast().lat > _pos[0] && old_extent.getNorthEast().lng > _pos[1]) {
			return false;
		} else {
			return true;
		}
	}
}

function checkPosDiffOver(_pos1, _pos2) {
	if (!_pos1 || !_pos2) return false;
	//console.log("checkPosDiffOver: "+_pos1+" "+_pos2);
	_pos1 = _pos1.split(",");
	_pos2 = _pos2.split(",");
	if (Math.abs(_pos1[0] - _pos2[0]) >= 0.02 || Math.abs(_pos1[1] - _pos2[1]) >= 0.02) {
		return true;
	} else {
		return false;
	}
}

function getToLBarWidth(_tol, _circleradius) {
	var _leftsec = _tol - ((new Date()).getTime());
	var _width = Math.floor(((_leftsec/1000) / (15*60)) * (2*3.14*_circleradius));
	if (_width >= (2*3.14*_circleradius)) { _width = (2*3.14*_circleradius); }
	
	var _r = Math.abs((2*3.14*_circleradius) - _width);
	
	//return _width;
	return ""+_width+" "+_r;
}

var now_target_tol = 0;
var proc_2sec = 0;
function timeoutCountdown() {
	
	if (lock_zoom || lock_drag) return;
	
	console.log("timeoutCountdown(): "+last_popup_window);
	
	//現在表示中のウィンドウ
	try {
		if (last_popup_window) {
			var _key = last_popup_window;
			if (!pokemon_list[_key]) {
				closeDetailPopup();
			} else {
				var _buffer = "";
				if (pokemon_list[_key]["action"] == "found") {
					
					//捕獲済み
					try{
						if (checkCheckMonster(_key)) {
							_buffer += "<div style='padding:5px;background-color:#BFE254;color:#516809;'>この個体は捕獲済み（または逃げられた）としてマークされています。</b></div>";
						}
					} catch(e) {
						console.log("error: 捕獲済みチェック: "+e);
					}
						
					if (pokemon_list[_key]["no_tol"] == "1") {
						//消滅時間不明
					} else {
						//消滅時間判明済み
						_buffer += "<div><b style='color:"+getColorFromToL(pokemon_list[_key].tol)+";'>消滅まで "+viewLeftToL(pokemon_list[_key].tol)+"</b></div>";
						
						//ルアー出現の場合はルアーモジュールの時間取得
						try{
							var _tmp = _key.split(",");
							var _key_fort = _tmp[0]+","+_tmp[1]+",fort,1";
							if (pokemon_list[_key_fort]) {
								if (pokemon_list[_key_fort]["tol_module"]) {
									if (((new Date()).getTime() / 1000) < pokemon_list[_key_fort]["tol_module"]) {
										_buffer += "<div style='padding:5px;background-color:#FFC9E3;color:#A51762;'>ルアーモジュール使用中 (残り"+viewSecToTime(Math.ceil(parseInt(pokemon_list[_key_fort]["tol_module"]) - ((new Date()).getTime() / 1000)))+")</div>";
									}
								}
							}
						} catch(e) {
							console.log("error: ルアー出現の場合はルアーモジュールの時間取得: "+e);
						}
					
					}
				} else if (pokemon_list[_key]["action"] == "found_ps" || pokemon_list[_key]["action"] == "found_ps_older" || pokemon_list[_key]["action"] == "found_ps_uncert" || pokemon_list[_key]["action"] == "fort") {
					
					console.log("timeoutCountdown(): "+pokemon_list[_key]["action"]);
					
					//出現中モンスターを検出
					var _popfound = false;
					try{
						var _tmp = _key.split(",");
						var _key_found = pokemon_list_lastid[_tmp[0]+","+_tmp[1]];
						if (_key_found) {
							if (pokemon_list[_key_found]) {
								if ((new Date()).getTime() < pokemon_list[_key_found]["tol"]) {
									//出現中
									_popfound = true;
								}
							}
						}
					} catch(e) {
						console.log("error: 出現中モンスターを検出: "+e);
					}
					
					if (pokemon_list[_key]["action"] == "fort") {
						
						if (pokemon_list[_key]["type"] == "1") {
							//ポケスト
							
							if (pokemon_list[_key]["tol_module"]) {
								if (((new Date()).getTime() / 1000) < pokemon_list[_key]["tol_module"]) {
									_buffer += "<div style='padding:5px;background-color:#FFC9E3;color:#A51762;'>ルアーモジュール使用中 (残り"+viewSecToTime(Math.ceil(parseInt(pokemon_list[_key]["tol_module"]) - ((new Date()).getTime() / 1000)))+")</div>";
								}
							}
							
							if (_popfound) {
								_buffer += "<div>ルアーで出現中:<br><b style='color:"+getColorFromToL(pokemon_list[_key_found].tol)+";'>消滅まで "+viewLeftToL(pokemon_list[_key_found].tol)+"</b></div>";
							
								try{
									var _tmploc = pokemon_list[_key_found]["loc"].split(",");
									_buffer_popfound = "<img src='"+getIconImageWithLoc(_key_found)+"' width='35' height='35'>";
									htmlWriteByClass("area_popup_pokesource_popfound", _buffer_popfound);
								}catch(e) {
									console.log("fort: "+e);
								}
								
								htmlToggleDisplayByClass("area_popup_pokesource_popfound", "block");
								htmlToggleDisplayByClass("area_popup_pokesource_searchbutton", "none");
							} else {
								htmlToggleDisplayByClass("area_popup_pokesource_popfound", "none");
								htmlToggleDisplayByClass("area_popup_pokesource_searchbutton", "block");
							}
							
							htmlWriteByClass("area_popupdetail", _buffer);
						}
						
						if (pokemon_list[_key]["type"] == "0") {
							//ジム
							
							if (pokemon_list[_key]["time_update"] > 0) {
								var _teamname = "(なし)";
								if (pokemon_list[_key]["owned_by_team"] == 1) {
									_teamname = "<b style='color:blue;'>ミスティック (青)</b>";
								} else if (pokemon_list[_key]["owned_by_team"] == 2) {
									_teamname = "<b style='color:red;'>ヴァーラー (赤)</b>";
								} else if (pokemon_list[_key]["owned_by_team"] == 3) {
									_teamname = "<b style='color:#FFD511;'>インスティンクト (黄)</b>";
								}
								
								var _lefttime = (new Date()).getTime() - (pokemon_list[_key]["time_update"]*1000);
								_lefttimecolor = "green";
								if (_lefttime >= 60*60*1*1000) {
									//1時間以上経過
									_lefttimecolor = "#666666";
								} else if (_lefttime >= 60*60*24*1000) {
									//24時間以上経過
									_lefttimecolor = "red";
								}
								
								_buffer = "<div>占拠チーム: "+_teamname+"</div><div>レベルと名声: Lv."+viewGymLevel(pokemon_list[_key]["gym_points"])+" ("+comma(pokemon_list[_key]["gym_points"])+" / "+comma(viewNextGymLevelPoint(pokemon_list[_key]["gym_points"]))+")</div><div style='background-color:#eeeeee;padding:5px;margin-top:3px;margin-bottom:3px;color:"+_lefttimecolor+";'>"+viewSecToTime(Math.ceil(_lefttime/1000))+"前に取得した情報です。</div>";
								htmlWriteByClass("area_popupdetail", _buffer);
								
								htmlToggleDisplayByClass("area_popup_pokesource_searchbutton", "block");
							}
						}
					} else if (pokemon_list[_key]["action"] == "found_ps_uncert") {
						//未確定ポケソース
						
						if (_popfound) {
							try{
								var _tmploc = pokemon_list[_key_found]["loc"].split(",");
								_buffer_popfound = "<img src='"+getIconImageWithLoc(_key_found)+"' width='35' height='35'>";
								htmlWriteByClass("area_popup_pokesource_popfound", _buffer_popfound);
							}catch(e) {
								console.log("error: found_ps_uncert: "+e);
							}
							
							htmlToggleDisplayByClass("area_popup_pokesource_popfound", "block");
							htmlToggleDisplayByClass("area_popup_pokesource_searchbutton", "none");
						} else {
							htmlToggleDisplayByClass("area_popup_pokesource_popfound", "none");
							htmlToggleDisplayByClass("area_popup_pokesource_searchbutton", "block");
						}
					} else {
						//確定ポケソース
						var _diff = getPokeSourceNowActiveLosttimeDiff(_key);
						if (_diff) {
							_buffer = "<div><b style='color:"+getColorFromDiff(_diff * 1000)+";'>消滅まで "+viewSecToTime(_diff)+"</b></div>";
							
							if (_popfound) {
								try{
									var _tmploc = pokemon_list[_key_found]["loc"].split(",");
									_buffer_popfound = "<img src='"+getIconImageWithLoc(_key_found)+"' width='35' height='35'>";
									htmlWriteByClass("area_popup_pokesource_popfound", _buffer_popfound);
								}catch(e) {
									console.log("found_ps: "+e);
								}
								
								htmlToggleDisplayByClass("area_popup_pokesource_popfound", "block");
								htmlToggleDisplayByClass("area_popup_pokesource_searchbutton", "none");
							} else {
								htmlToggleDisplayByClass("area_popup_pokesource_popfound", "none");
								htmlToggleDisplayByClass("area_popup_pokesource_searchbutton", "block");
							}
							
						} else {
							_diff = getPokeSourceNextActivePoptimeDiff(_key);
							if (_diff > 0) {
								_buffer = "<div>出現予想時刻まで約"+viewSecToTime(_diff)+"</div>";
							}
							
							htmlToggleDisplayByClass("area_popup_pokesource_popfound", "none");
							htmlToggleDisplayByClass("area_popup_pokesource_searchbutton", "none");
						}
					}
				}
				
				if (gpslog_loc && (new Date()).getTime() - gpslog_lasttime <= 300*1000) {
					var _loc = (pokemon_list[_key].loc).split(",");
					var _meter = parseInt(getDistance(gpslog_loc.latitude, gpslog_loc.longitude, _loc[0], _loc[1]));
					
					var _methodname = "徒歩";
					var _movetime = MeterToMoveMethodSec(_meter,4);
					var _addmsg = "";
					
					try{
													if (configpush_movemethod) {
								_methodname = Table_MoveMethod[configpush_movemethod];
								_movetime = MeterToMoveMethodSec(_meter,parseInt(configpush_movemethod));
							}
												if (pokemon_list[_key]["action"] == "found") {
							if ((new Date()).getTime() + _movetime * 1000 <= pokemon_list[_key].tol) {
								_addmsg = "<br><b style='color:green;'>◎ 間に合う!</b>";
							} else {
								_addmsg = "<br><b style='color:red;'>× 間に合わない...</b>";
							}
						}
					} catch(e) {
						console.log("error: 移動手段検出:"+e);
					}
					
					_buffer += "<div><b>距離 "+viewmeter(_meter)+" ("+_methodname+"で "+viewSecToTime(_movetime)+")</b>"+_addmsg+"</div>";
				}
				
				htmlWriteByClass("area_popupdetail", _buffer);
			}
		}
	} catch(e) {
		console.log("error: 現在表示中のウィンドウ: "+e);
	}
	
	if (!lock_zoom && !lock_drag) {
		proc_2sec ++;
		if (proc_2sec >= 2) {
			proc_2sec = 0;

			for (var i in pokemon_list) {
				if (!pokemon_list[i]) continue;
				if (pokemon_list[i]["delete"]) continue;
				
				//ポケストップモジュール
				if (pokemon_list[i]["action"] == "fort") {
					try {
						if (pokemon_list[i]["tol_module"] > 0) {
							if (((new Date()).getTime() / 1000) > pokemon_list[i]["tol_module"]) {
								//モジュール時間満了
								//console.log("モジュール時間満了: "+i);
								pokemon_list[i]["tol_module"] = 0;
								
								deleteMarker(i);
								if (!pokemon_list[i]["noview"] && !pokemon_list[i]["diffover"]) {
									genOverlayAndView(i);
								}
							}
						}
					} catch(e) {
						console.log("error: 残り時間チェック(fort-pokestop):"+e);
					}
				}
				
				//有効なポケソース
				if (pokemon_list[i]["action"] == "found_ps" || pokemon_list[i]["action"] == "found_ps_older" || pokemon_list[i]["action"] == "found_ps_uncert") {
					if (!pokemon_list[i]["noview"] && !pokemon_list[i]["diffover"]) {
						//残り時間色表示
						try {
							var _oldcolor = pokemon_list[i]["color"]; //過去
							//if (_oldcolor == -1) {
							//	continue;
							//}
							var _color = getPokeSourceMarkerColor(i);
							if (_color != _oldcolor) {
								//console.log("update [#"+i+"_font] color: "+pokemon_list[i]["color"]+" => now:"+_color);
								
								pokemon_list[i]["color"] = _color;
								$("#"+i+"_font").css({"color": _color});
								
								if (pokemon_list[i]["overlay"]) {
									pokemon_list[i]["overlay"].remove();
								}
								
								if (_color != -1) {
									genOverlayAndView(i);
								} else {
									pokemon_list[i]["overlay"] = null;
								}
							}
						} catch(e) {
							console.log("error: 残り時間色表示(pokesource):"+e);
						}
					}
				}
				
				//タイムアウト消込
				if (pokemon_list[i]["action"] == "found") {
					var _tmp = new Date();
					var _diff = pokemon_list[i]["tol"] - _tmp.getTime();
					if (_diff <= 0) {
						//タイムアウト消込
						//if (!pokemon_list[i]["noview"] && !pokemon_list[i]["diffover"]) {
							deleteMarker(i);
						//}
						pokemon_list[i]["delete"] = true;
						pokemon_list[i] = null;
					} else {
						if (!pokemon_list[i]["noview"] && !pokemon_list[i]["diffover"]) {
							//残り時間色表示
							try {
								var _color = getColorFromToL(pokemon_list[i]["tol"]); //現在
								var _oldcolor = pokemon_list[i]["color"]; //過去
								if (_color != _oldcolor) {
									pokemon_list[i]["color"] = _color;
									if (pokemon_list[i]["overlay_circle"]) { pokemon_list[i]["overlay_circle"].setStyle({color: _color}); }
									
									//console.log("update color: "+pokemon_list[i]["color"]+" => now:"+_color);
								}
								
								//残り時間バー表示
								if (pokemon_list[i]["overlay_circle"]) { pokemon_list[i]["overlay_circle"].setStyle({dashArray: getToLBarWidth(pokemon_list[i]["tol"], (pokemon_list[i]["iconsize"]/2)+3)}); }
							} catch(e) {
								console.log("error: 残り時間色表示");
							}
						}
					}
				}
			}
		}
	
		//マップ移動検出
		checkMapViewMoved();
	}
		
	if ((new Date()).getTime() - requestDBServerLastTime >= 30 *1000) {
		//30秒以上更新されていない場合は更新
		console.log("refresh by requestDBServerLastTime");
		
		requestDBServerReload(300);
	}
}

	function viewGymLevel(_gympoint) {
		if (_gympoint >= 50000) return 10;
		if (_gympoint >= 40000) return 9;
		if (_gympoint >= 30000) return 8;
		if (_gympoint >= 20000) return 7;
		if (_gympoint >= 16000) return 6;
		if (_gympoint >= 12000) return 5;
		if (_gympoint >= 8000) return 4;
		if (_gympoint >= 4000) return 3;
		if (_gympoint >= 2000) return 2;
		return 1;
	}
	
	function viewNextGymLevelPoint(_gympoint) {
		if (_gympoint >= 50000) return 50000;
		if (_gympoint >= 40000) return 50000;
		if (_gympoint >= 30000) return 40000;
		if (_gympoint >= 20000) return 30000;
		if (_gympoint >= 16000) return 20000;
		if (_gympoint >= 12000) return 16000;
		if (_gympoint >= 8000) return 12000;
		if (_gympoint >= 4000) return 8000;
		if (_gympoint >= 2000) return 4000;
		return 2000;
	}

/*
function getPokeSourcePoptimeStartMin(_losttime) {
	var _poptime = parseInt(_losttime) - 15;
	if (_poptime < 0) {
		_poptime += 60;
	}
	
	return _poptime;
}
*/

//function checkPokeSourcePoptimeSingle(_losttime, _losttime_sec) {

function checkPokeSourcePoptimeSingle(_losttime, _longtime) {
	var _nowdate = new Date();
	
	var _spawntime = 30;
	if (_longtime == "1") { _spawntime = 60; }
	
	var _tmp = new Date();
	_tmp.setTime( _losttime * 1000 );
	
	//そのままの時間
	var _lostdate = new Date();
	if (_tmp.getMinutes() < _nowdate.getMinutes()) {
		_lostdate.setHours( _lostdate.getHours() + 1 );
	}
	_lostdate.setMinutes( _tmp.getMinutes() );
	_lostdate.setSeconds( _tmp.getSeconds() );
	
	var _popdate = new Date();
	_popdate.setTime( _lostdate.getTime() - ((_spawntime*60) * 1000) );
	
	if (_popdate.getTime() <= _nowdate.getTime() && _lostdate.getTime() >= _nowdate.getTime()) {
		return true;
	}
	
	return false;
}

function getPokeSourceNextActivePoptimeDiff(_target) {
	var _mostmin_diff = -1;
	var _losttimes = pokemon_list[_target]["losttime"].split(",");
	var _spawntime = 30;
	if (pokemon_list[_target]["longtime"] == "1") { _spawntime = 60; }
	for (var x in _losttimes) {
		var _losttime = parseInt(_losttimes[x]);
		//console.log("getPokeSourceNextActivePoptimeDiff: 1: "+_losttime);
		if (!checkPokeSourcePoptimeSingle(_losttime, pokemon_list[_target]["longtime"])) {
			//現在出現中ではない
			
			var _tmp = new Date();
			_tmp.setTime( _losttime * 1000 );
			
			var _lostdate = new Date();
			if (_tmp.getMinutes() < (new Date()).getMinutes()) {
				_lostdate.setHours( _lostdate.getHours() + 1 );
			}
			_lostdate.setMinutes( _tmp.getMinutes() );
			_lostdate.setSeconds( _tmp.getSeconds() );
			
			_diff = Math.floor((((_lostdate.getTime()-((_spawntime*60)*1000)) - (new Date()).getTime()) / 1024));
			
			if (_diff < 0) {
				
				var _lostdate = new Date();
				if (_tmp.getMinutes() <= (new Date()).getMinutes()) {
					_lostdate.setHours( _lostdate.getHours() + 1 );
				}
				_lostdate.setMinutes( _tmp.getMinutes() );
				_lostdate.setSeconds( _tmp.getSeconds() );
				
				_diff = Math.floor((((_lostdate.getTime()-((_spawntime*60)*1000)) - (new Date()).getTime()) / 1024));
			
			}
			
			//console.log("getPokeSourceNextActivePoptimeDiff: 2: "+_diff);
			
			if (_mostmin_diff == -1 || _mostmin_diff >= _diff) {
				_mostmin_diff = _diff;
			}
		}
	}
	
	return _mostmin_diff;
}

function getPokeSourceNowActiveLosttimeDiff(_target) {
	var _losttimes = pokemon_list[_target]["losttime"].split(",");
	for (var x in _losttimes) {
		var _losttime = parseInt(_losttimes[x]);
		if (checkPokeSourcePoptimeSingle(_losttime, pokemon_list[_target]["longtime"])) {
			//現在出現中
			var _tmp = new Date();
			_tmp.setTime( _losttime * 1000 );
					
			var _lostdate = new Date();
			if (_tmp.getMinutes() < (new Date()).getMinutes()) {
				_lostdate.setHours( _lostdate.getHours() + 1 );
			}
			_lostdate.setMinutes( _tmp.getMinutes() );
			_lostdate.setSeconds( _tmp.getSeconds());
	
			return Math.floor(((_lostdate.getTime() - (new Date()).getTime()) / 1024));
		}
	}
	
	return false;
}

function checkPokeSourcePoptime(_target) {
	if (pokemon_list[_target]["losttime"]) {
		var _losttimes = pokemon_list[_target]["losttime"].split(",");
		for (var x in _losttimes) {
			var _losttime = parseInt(_losttimes[x]);
			if (checkPokeSourcePoptimeSingle(_losttime, pokemon_list[_target]["longtime"])) {
				return true;
			}
		}
	}
	
	return false;
}

function getPokeSourceMarkerColor(_target) {
	
	//未確定ポケソースは出現時間無視
	if (pokemon_list[_target]["action"] == "found_ps_uncert") {
		//出現中時間で個体も取得している場合
		if (getPokeSourceMarkerColorCheckPop(_target)) {
			return "pokesource-div-icon-unknown-noviewid";
		}
			
		return "pokesource-div-icon-unknown";
	}
	
	var _now = checkPokeSourcePoptime(_target);
	
	if (func_ps_viewunpop != "1") {
		//出現時間中のポケソースのみ表示
		if (!_now) {
			//出現時間外
			return -1;
		}
	}
	
	if (pokemon_list[_target]["action"] == "found_ps") {
		if (_now) {
			
			//出現中時間で個体も取得している場合
			if (getPokeSourceMarkerColorCheckPop(_target)) {
				return "pokesource-div-icon-noviewid";
			}
			
			return "pokesource-div-icon-now";
		} else {
			return "pokesource-div-icon-normal";
		}
	}
	if (pokemon_list[_target]["action"] == "found_ps_older") {
		if (_now) {
			return "pokesource-div-icon-older-now";
		} else {
			return "pokesource-div-icon-older-normal";
		}
	}

}

	function getPokeSourceMarkerColorCheckPop(_target) {
		try{
			var _key_found = pokemon_list_lastid[pokemon_list[_target]["oloc"]];
			if (_key_found) {
				if (pokemon_list[_key_found]) {
					if (!pokemon_list[_key_found]["delete"]) {
						return true;
					}
				}
			}
		}catch(e) {
			console.log("error: getPokeSourceMarkerColor: "+e)
		}
		
		return false;
	}

var requestDBServerLastPos = false;
var requestDBServerLastTime = (new Date()).getTime();
var using_dbserver = "sv-db.pmap.kuku.lu";
var timeout_requestDBServer = false;
var dbserver_request_lock = 0;
function requestDBServer(_mode) {
	//if (research_runserver["dbserver"]) {
	//	using_dbserver = research_runserver["dbserver"];
	//}
	
	console.log("requestDBServer: "+using_dbserver);
	
	var latlng = getCenterMap();
	console.log("latlng: "+latlng);
	
	requestDBServerLastPos = latlng[0]+","+latlng[1];
	requestDBServerLastTime = (new Date()).getTime();
	
	var history_pokemonid = "";
	for (var i in config_history) {
		if (!i || config_history[i] != "1") continue;
		if (history_pokemonid != "") history_pokemonid += ",";
		history_pokemonid += ""+i;
	}
	
			
	var _pokesource = "";
	if (func_ps == "1") {
		if (gpslog_loc && func_ps_onlynearby == "1") {
			//かくれているポケソース
			_pokesource = ""+gpslog_loc.latitude+","+gpslog_loc.longitude;
		} else {
			_pokesource = ""+latlng[0]+","+latlng[1];
		}
	}
	
	var _fort = "";
	if (func_fortpokestop || func_fortgym) {
		_fort = "1";
	}
	
	if (dbserver_request_lock >= 2) {
		console.log("dbserver_request_lock: busy");
		
		requestDBServerReload(100);
		
		return;
	}
	
	dbserver_request_lock ++;
	
	$.ajax({
	   	url: "https://"+using_dbserver+"/_dbserver.php?uukey=39aa0e9c09e006a6d0ce427a33f84135&sysversion=1001&action="+encodeURIComponent(_mode)+"&fort="+_fort+"&pokesource_loc="+encodeURIComponent(_pokesource)+"&history_pokemonid="+encodeURIComponent(history_pokemonid)+"&sv="+encodeURIComponent(research_runserver["server"])+"&research_key="+encodeURIComponent(research_key)+"&loc1="+encodeURIComponent(latlng[0])+"&loc2="+encodeURIComponent(latlng[1]),
	    type: "GET",
	    data: "",
	    timeout: 8000,
	    cache: false
	}).done(function(data, status, xhr) {
		dbserver_request_lock --;
		
		//console.log("DBServer: "+data);
		
		viewServerError(false);
		
		if (data.indexOf("OLDER_VERSION_ERROR") != -1) {
							cookie.set("cookie_forceupgrade", ""+((new Date()).getTime()));
				
//■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
//				openAlertWindow(
//					'システム自動更新中です...', 
//					false, 
//					false
//				);
//				setTimeout(function(){location.reload(); }, 1000);
//■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
					}
		
		
		if (data.indexOf("action=") != -1) {
			protPokemon(data);
		}
	}).fail(function(xhr, status, error) {
		dbserver_request_lock --;
		
		//console.log("DBServer: error: "+error);
	    //alert("操作に失敗しました。インターネット接続が安定している場所で再度お試しください。");
	    viewServerError("接続エラー");
	});
}

var research_faildcnt = 0;
var research_retrycnt = 0;
function researchResult() {
	
	if (research_runserver["server"] == "busy") {
		return;
	}
	
	var _checkurl = "";
	if (research_runserver["server"]) {
		//_checkurl = "https://"+research_runserver["server"]+"/check_result.php?run_key="+research_key;
		_checkurl = "https://sv-webdb1.pmap.kuku.lu/check_result.php?target="+encodeURIComponent(research_runserver["server"])+"&run_key="+research_key;
			}
	
	console.log("checkurl: "+_checkurl);
	
	$.ajax({
	    url: _checkurl,
	    type: "GET",
	    data: "",
	    timeout: 5000,
	    cache: false
	}).done(function(data, status, xhr) {
		if (data.indexOf("WAIT") != -1) {
			viewTopMessage("サーチ中...", "");
		} else if (data.indexOf("QUEUE:") != -1) {
			var _tmp = data.split("QUEUE:");
			if (parseInt(_tmp[1]) >= 0) {
				var _tmpdot = "";
				for (var _i=0; _i<parseInt(_tmp[1]); _i++) {
					_tmpdot += "<img src='img/gray.png' height='2' width='3' style='margin-left:1px;'>";
				}
				viewTopMessage("サーチ中..", "<center>"+_tmpdot+"</center>");
			} else {
				viewTopMessage("サーチ中..", "");
			}
		} else if (data.indexOf("QUEUE") != -1) {
			viewTopMessage("サーチ中..", "");
		} else if (data.indexOf("action=process_complete;") != -1) {
			
			if (research_timeout) {
				clearInterval(research_timeout);
				research_timeout = false;
			}
			
			research_retrycnt = 0;
			
			viewTopMessage("完了!", false);
			
			if (nextRefreshResearchTimeout <= 0) {
				//完了時点で保護時間が切れている場合は再度保護
				nextRefreshResearch(1);
			}
			
			//dbサーバにデータを取りに行かせる
			requestDBServerReload(1500);
		}
	}).fail(function(xhr, status, error) {
	    //alert("操作に失敗しました。インターネット接続が安定している場所で再度お試しください。");
	});
	
	research_faildcnt ++;
	if (research_faildcnt >= 200) {
		//50sec?
		if (research_timeout) {
			clearInterval(research_timeout);
			research_timeout = false;
		}
	}
}


var last_viewTopMessage_title = "";
function viewTopMessage(_title, _msg) {
	if (!_title) _title = last_viewTopMessage_title;
	
	if (_msg) {
		$('#area_topmessage').html("<div style='font-size:80%;'>"+_title+"<div style='font-size:80%;'>"+_msg+"</div></div>");
	} else {
		$('#area_topmessage').html("<a href='https://magical.kuku.lu/?num=100' target='_blank'>"+_title+"</a>");
	}
	
	last_viewTopMessage_title = _title;
}

function reloaddata() {
    nextRefreshResearch(3);
    requestDBServer('viewData');
}
		
var research_key = "";
var research_timeout = false;
var research_runserver = new Array();
var searchAreaOverlay = false;
var searchAreaOverlay_init = false;
function research() {
	var latlng = getCenterMap();
	researchByLoc(latlng[0], latlng[1], false);
}

var marker_searchPointOverlay = false;
var marker_lastsearchpoint_circle = false;

function researchByLoc(_loc1, _loc2, _pointsearch) {
	
			
	//保護時間内、サーチが完了していない
	if (nextRefreshResearchTimeout > 0 || research_timeout) {
		//キャンセル
		
		if ((new Date()).getTime() - requestDBServerLastTime >= 10 *1000) {
			//10秒以上更新されていない場合はdb更新
			console.log("refresh by researchByLoc (cancel)");
			
			requestDBServerReload(300);
		}
		
		return;
	}
	nextRefreshResearch(3);
	
	//debug
		
	var latlng = new Array(_loc1, _loc2);
	console.log("latlng: "+latlng[0]+","+latlng[1]);

	//if (_area_lat >= 0.04 || _area_lat >= 0.04) {
	//	alert("もっとズームしてから捜索開始してください。");
	//	return;
	//}
	
	viewResearch(true);
	
	research_key = uuid();
	if (_pointsearch) {
		research_key = "psearch-"+research_key;
	}
	
	research_faildcnt = 0;
	
		
	$.ajax({
	    url: "https://sv-webdb1.pmap.kuku.lu/_server.php",
	    type: "GET",
	    data: "&uukey=39aa0e9c09e006a6d0ce427a33f84135&sysversion=1001&action=addServerQueue&run_key="+research_key+"&loc1="+latlng[0]+"&loc2="+latlng[1]+"",
	    timeout: 6000,
	    cache: false
	}).done(function(data, status, xhr) {
		if (data.indexOf("OK") != 0) {
			if (data.indexOf("NG:") != -1) {
				var _tmp = data.split("NG:");
				var _res = parseValue(_tmp[1]);
				if (_res["reason_key"] == "REQ_CAPTCHA") {
					viewTopMessage("操作が必要", false);
					
											$.getScript("https://www.google.com/recaptcha/api.js", function(){
							openAlertWindow(
								'通常とは異なる操作を検出しました。ロボットによる大量アクセスを防ぐため、下記のreCAPTCHAにて有人操作であることを確認させていただきます。お手数をお掛けして申し訳ありません。'+'<center><div class="g-recaptcha" data-callback="syncerRecaptchaCallback" data-sitekey="'+_res["sitekey"]+'"></div></center>', 
								false, 
								function(){  }
							);
						});
									} else {
					if (_res["msg"]) {
						viewTopMessage(""+_res["msg"], false);
					} else {
						viewTopMessage("大混雑", false);
					}
				}
			} else {
				viewTopMessage("大混雑", false);
			}

		    //viewResearch(false);
		    nextRefreshResearch(5);
		    
			requestDBServerReload(300);
		} else {
			var _tmp = data.split("OK:");
			var _res = parseValue(_tmp[1]);
			
			console.log("run-server: "+_res["server"]);
			if (_res["server"] == "busy") {
				viewTopMessage("大混雑", false);
				
				research_runserver = _res;
				
				requestDBServerReload(300);
			} else if (_res["server"] == "") {
				viewTopMessage("リクエスト完了", false);
				nextRefreshResearch(5);
				
				research_runserver = _res;
				
				requestDBServerReload(300);
			} else {
				
									if (_res["jst"]) {
						if (!check_jst) {
							check_jst = true;
															var _servertime = parseInt(_res["jst"]);
								var _jstdiff = Math.abs( _servertime - ((new Date()).getTime()/1000) );
								console.log("_jstdiff: "+_jstdiff);
								if (_jstdiff > 60) {
									openAlertWindow("お使いの端末は日本標準時から60秒以上ずれています。正しいデータが表示できません。時計を合わせてから開きなおしてください。", 
									function(){
									});
								}
													}
					}
								
				if (_res["server"] == "pmap.kuku.lu") {
					if ("" != "pmap.kuku.lu") {
						_res["server"] = "";
						console.log("force-run-server: "+_res["server"]);
					}
				}
				
				research_runserver = _res;
				
				if (research_timeout) {
					clearInterval(research_timeout);
					research_timeout = false;
				}
				research_timeout = setInterval(researchResult, 1000);

				nextRefreshResearch(17);
				
				requestDBServerReload(300);
				
				//サーチポイントオーバーレイ
				var _imgpath = "https://img-pmap.aquapal-cdn.net/img/icon_mwand3.png";
				if ((Math.floor( Math.random() * 10 )+1) == 5) {
					_imgpath = "https://img-pmap.aquapal-cdn.net/img/icon_bar3.png";
				}
				
				var _icon = L.icon({
				    iconUrl: ""+_imgpath,
				    //iconRetinaUrl: ""+_imgpath,
				    iconSize: [100, 100],
				    iconAnchor: [50, 50]
				});
				if (marker_searchPointOverlay) {
					marker_searchPointOverlay.remove();
					marker_searchPointOverlay = false;
				}
				marker_searchPointOverlay = L.marker([latlng[0], latlng[1]], 
				{
					icon: _icon,
					opacity: 0.5
				});
				marker_searchPointOverlay.addTo(map);
				
				setTimeout(function(){
					if (marker_searchPointOverlay) {
						marker_searchPointOverlay.remove();
						marker_searchPointOverlay = false;
					}
				}, 3000);
			}
			
		}
	}).fail(function(xhr, status, error) {
	    viewTopMessage("操作に失敗", false);
	    viewResearch(false);
	    
	    viewServerError("接続エラー");
	});
}

	function syncerRecaptchaCallback( _code )
	{
		closeAlertWindow();
		
		if (_code != "") {
			
			$.ajax({
			    url: "https://sv-webdb1.pmap.kuku.lu/_server.php",
			    type: "GET",
			    data: "&uukey=39aa0e9c09e006a6d0ce427a33f84135&sysversion=1001&action=sendRecaptchaCode&code="+encodeURIComponent(_code),
			    timeout: 10000,
			    cache: false
			}).done(function(data, status, xhr) {

				if (data == "OK") {
					viewTopMessage("確認成功", false);
				} else {
					viewTopMessage("確認に失敗", false);
				}

			}).fail(function(xhr, status, error) {
			    viewTopMessage("操作に失敗", false);
			    viewResearch(false);
			    
			    viewServerError("接続エラー");
			});
	
		}
	}

function viewResearch(_flag) {

	if (_flag) {
		viewTopMessage("サーチ中.", "");
		document.getElementById("button_headerreload").value = "...";
		document.getElementById("button_headerreload").disabled = "disabled";
	} else {
		document.getElementById("button_headerreload").value = "　";
		document.getElementById("button_headerreload").disabled = "";
	}


}

var nextRefreshResearchHandle = false;
var nextRefreshResearchTimeout = 0;
var nextRefreshResearchLockTime = 0;
function nextRefreshResearch(_sec) {
	//保護時間
	nextRefreshResearchLockTime = new Date().getTime() + (_sec)*1000;
	nextRefreshResearchTimeout = _sec+1;
	
	document.getElementById("button_headerreload").value = "("+nextRefreshResearchTimeout+"s)";
	document.getElementById("button_headerreload").disabled = "disabled";
	htmlOpacityByClass("area_popup_pokesource_searchbutton", 0.2);
	
	if (nextRefreshResearchHandle) clearInterval( nextRefreshResearchHandle );
	nextRefreshResearchHandle = setInterval(nextRefreshResearchRun, 1000);
	nextRefreshResearchRun();
	
}

	function nextRefreshResearchRun() {
		//nextRefreshResearchTimeout --;
		//if (nextRefreshResearchTimeout <= 0) {
		nextRefreshResearchTimeout = Math.round((nextRefreshResearchLockTime - ((new Date()).getTime())) / 1000);
		if (((new Date()).getTime()) >= nextRefreshResearchLockTime) {
			//保護時間満了
			document.getElementById("button_headerreload").value = "　";
			document.getElementById("button_headerreload").disabled = "";
				
			if (research_timeout) {
				//サーチが完了していない
			} else {
				//サーチが完了した
				viewTopMessage(false, false);

				clearInterval( nextRefreshResearchHandle );
				nextRefreshResearchHandle = false;
				
				$("#area_buttonsearch").css({"opacity": 1});
				htmlOpacityByClass("area_popup_pokesource_searchbutton", 1);
			}
		} else {
			//保護時間中
			document.getElementById("button_headerreload").value = "("+nextRefreshResearchTimeout+"s)";
			document.getElementById("button_headerreload").disabled = "disabled";
			
			//サーチ完了済み
			if (!research_timeout) {
				viewTopMessage(false, "(再サーチ可能まで"+nextRefreshResearchTimeout+"秒)");
			}
			
			$("#area_buttonsearch").css({"opacity": 0.2});
			htmlOpacityByClass("area_popup_pokesource_searchbutton", 0.2);
		}
	}

/*
function appPokemonFound(_data) {
	protPokemon(_data);
}
*/

function uuid() {
	var uuid = "", i, random;
	for (i = 0; i < 32; i++) {
		random = Math.random() * 16 | 0;
		if (i == 8 || i == 12 || i == 16 || i == 20) {
			uuid += "-";
		}
		uuid += (i == 12 ? 4 : (i == 16 ? (random & 3 | 8) : random)).toString(16);
	}
	
			
		
			return uuid;
	}

///////////////////////////////////////////////////////////////////////////

function getColorFromToL(_tol) {
	var _tmp = new Date();
	var _diff = _tol - _tmp.getTime();
	if (_diff < 0) return "";
	return getColorFromDiff(_diff);
}

function getColorFromDiff(_diff) {
	if (_diff < 0) return "";
	
	_diff = Math.floor(_diff / 1000);
	var _rcol = Math.floor((_diff / (60*15)) * 255);
	_rcol = _rcol - (_rcol % 10);
	
	return "rgb("+(255-_rcol)+", "+(Math.floor(_rcol/2))+", "+_rcol+")";
}

function viewToL(_time) {
	var _tmp = new Date();
	_tmp.setTime(_time);
	
	return ""+Num2(_tmp.getHours())+":"+Num2(_tmp.getMinutes())+":"+Num2(_tmp.getSeconds());
}

function viewToLDate(_time) {
	var _tmp = new Date();
	_tmp.setTime(_time);
	
	return ""+Num2(_tmp.getMonth()+1)+"/"+Num2(_tmp.getDate())+" "+Num2(_tmp.getHours())+":"+Num2(_tmp.getMinutes())+":"+Num2(_tmp.getSeconds());
}

function viewLeftToL(_time) {
	var _tmp = new Date();
	var _diff = parseInt(_time) - _tmp.getTime();
	if (_diff < 0) return "00:00";
	
	_diff = Math.floor(_diff / 1000);
	return viewSecToTime(_diff);
}

if(!String.prototype.trim) {
  String.prototype.trim = function () {
    return this.replace(/^\s+|\s+$/g,'');
  };
}

///////////////////////////////////////////////////////////////////////////
//AD
///////////////////////////////////////////////////////////////////////////

var timer_adSetVisible = false;
var last_adViewStatus = "";
function adViewStatus(_status) {
	
	if (last_adViewStatus == _status) {
		return;
	}
	
	last_adViewStatus = _status;
	

	if (_status == "on") {

		if (timer_adSetVisible) {
			clearTimeout( timer_adSetVisible );
			timer_adSetVisible = false;
		}
		adSetHidden();

	}
	if (_status == "off") {
		
		if (timer_adSetVisible) {
			clearTimeout( timer_adSetVisible );
			timer_adSetVisible = false;
		}
		timer_adSetVisible = setTimeout(adSetVisible, 2000);

	}
}


function adSetHidden() {
	$("#area_ad_footer").css({"display": "none"});
	
	updateFooterHeight();
}

function adSetVisible() {
	
	$.ajax({
	    url: "ad.php?slot=app_bottom",
	    type: "GET",
	    timeout: 8000,
	    cache: false
	}).done(function(data, status, xhr) {
		if (data.indexOf("AD_RECV_OK") != -1) {
			$("#area_ad_footer").html(data).trigger( "create" );
			$("#area_ad_footer").css({"display": "block"});
			
			updateFooterHeight();
		} else {
			//alert('ng2');
		}
	}).fail(function(xhr, status, error) {
		//alert('ng1');
	});
	
}

function updateFooterHeight() {
	$("#area_footer").css({"height": ""+getFooterHeight()+"px"});
	$("#area_map_frame").css({"marginBottom": ""+getFooterHeight()+"px"});
	
	$("#area_customcontrol_push").css({"bottom": ""+(getFooterHeight())+"px"});
	$("#area_customcontrol_push_mailnowlogin").css({"bottom": ""+(getFooterHeight())+"px"});
	$("#area_customcontrol_area").css({"bottom": ""+getFooterHeight()+"px"});
	$("#area_customcontrol_config").css({"bottom": ""+(getFooterHeight())+"px"});
	$("#area_customcontrol_history").css({"bottom": ""+(getFooterHeight())+"px"});
	
		
	$("#area_poptimeline").css({"bottom": ""+(getFooterHeight())+"px"});
	$("#area_searchmob_result").css({"bottom": ""+(getFooterHeight())+"px"});
	
	$("#area_buttonsearch").css({ "bottom": ""+(getFooterHeight())+"px", "display": "block" });
	
	$("#area_window_visibleinfo").css({"bottom": ""+(getFooterHeight()-26)+"px"});
}

function getFooterHeight() {
    var _height = 115;
    	
    if (document.getElementById('area_ad_footer').style.display == "block") {
    	_height += 50;
    }
    	
	return _height;
}

function adLoad(_target) {
	
		
}

///////////////////////////////////////////////////////////////////////////
//GPS
///////////////////////////////////////////////////////////////////////////

var func_push_gpsoverride = false;
function GPSOverrideFromMapCenter(_lock) {
	if (_lock) {
		var _mapcenter = getCenterMap();
		$("#area_customcontrol_push_mailnow_gpslocation").html("地点ロック設定中...");
		func_push_gpsoverride = _mapcenter;
		
					//地点ロック中はGPS位置を置換
			updateGPSLocation(parseFloat(_mapcenter[0]), parseFloat(_mapcenter[1]));
				
		serverRequestPushLocation(_mapcenter[0], _mapcenter[1], false);
		
		cookie.set("cookie_func_push_gpsoverride", _mapcenter[0]+","+_mapcenter[1]);
	} else {
		$("#area_customcontrol_push_mailnow_gpslocation").html("(GPSを使用)");
		func_push_gpsoverride = false;
		
		cookie.set("cookie_func_push_gpsoverride", "");
	}
}

var flex_gps_enable_turn_disable = false;
function Flex_GPSenable() {
	//if (mode_gps) return;
	
	lasttime_serverRequestPushLocation = 0;
	
	if (flex_gps_enable_turn_disable) {
		flex_gps_enable_turn_disable = false;
		GPSdisable();
	}
	
	mode_gps = true;
	$('#button_gps').css("border-bottom", "2px solid #87d156");
	$('#button_gps').css("font-weight", "bold");
	$('#button_gps').val("常時測位中");
	
	//mapdrag_lasttime = 0;
	
	cookie.set("cookie_config_gps", "1");
}

function Flex_GPSdisable() {
	//if (!mode_gps) return;
	
	mode_gps = false;
	$('#button_gps').css("border-bottom", "rgba(255,255,255,0)");
	$('#button_gps').css("font-weight", "");
	$('#button_gps').val("　");
	
	cookie.set("cookie_config_gps", "");
}

function Flex_GPSdeny() {
	mode_gps = false;
	$('#button_gps').css("border-bottom", "rgba(255,255,255,0)");
	$('#button_gps').css("font-weight", "");
	$('#button_gps').val("使用不可");
}

function Flex_GPSupdate(_loc) {
	//if (!mode_gps && !mode_gps_once) return;
	
	console.log("Flex_GPSupdate: "+_loc);
	
	mode_gps_once = false;
	
	if (mode_gps) {
		//$("#area_status").html("GPS測位しました: "+(new Date()).toLocaleTimeString());
	}
	
	var _loc = _loc.split(",");
	
	var _firstgps = false;
	if (!gpslog_loc) {
		//最初の測位
		_firstgps = true;
	}
	
	gpslog_loc = {latitude: parseFloat(_loc[0]), longitude: parseFloat(_loc[1])};
	gpslog_lasttime = (new Date()).getTime();
	
	procGPS(gpslog_loc.latitude, gpslog_loc.longitude);
	
	if (_firstgps) {
		//最初の測位
		requestDBServerReload(300);
	}
}

var mode_gps = false;
var mode_gps_once = false;
var gps_watch = false;
function gpslocation() {
	//ボタン押してGPSをトグル
	
	if (mode_gps) {
		//有効な場合は無効に
		GPSdisable();
	} else {
		//無効な場合は有効に
		if (navigator.geolocation) {
			
			//GPS記録がある場合はジャンプしておく
			if (gpslog_loc) {
				jumpMap( gpslog_loc.latitude+","+gpslog_loc.longitude, false );
			}
			
			GPSenable();
		} else {
			//alert("GPS非対応端末であるか、プライバシー設定で使用が拒否されています。");
			viewTopMessage("GPS非対応", false);
		}
	}
}

function GPSenable() {
	
	console.log("GPSenable()");
	
	mapdrag_lasttime = 0;
	
	lasttime_serverRequestPushLocation = 0;
	
			
		if (navigator.geolocation) {
			mode_gps = true;
			$('#button_gps').css("border-bottom", "2px solid #87d156");
			$('#button_gps').css("font-weight", "bold");
			$('#button_gps').val("常時測位中");
			
			mapdrag_lasttime = 0;
			
			if (gps_watch) {
				navigator.geolocation.clearWatch(gps_watch);
			}
			
			gps_watch = navigator.geolocation.watchPosition(GPSsuccessCallback, GPSerrorCallback, {enableHighAccuracy:true, timeout:15000, maximumAge:0});
			//navigator.geolocation.getCurrentPosition(GPSsuccessCallback, GPSerrorCallback, {enableHighAccuracy:true, timeout:15000, maximumAge:0});
			
			cookie.set("cookie_config_gps", "1");
		}
		
	}

function GPSdisable() {
	//if (!mode_gps) return;
	
	console.log("GPSdisable()");
	
		
		mode_gps = false;
		$('#button_gps').css("border-bottom", "rgba(255,255,255,0)");
		$('#button_gps').css("font-weight", "");
		$('#button_gps').val("　");
		
		cookie.set("cookie_config_gps", "");
		
		mapdrag_lasttime = 0;
		
		if (gps_watch) {
			navigator.geolocation.clearWatch(gps_watch);
		}
		
		gps_watch = navigator.geolocation.watchPosition(GPSsuccessCallback, GPSerrorCallback, {enableHighAccuracy:true, timeout:25000, maximumAge:3000});
		
	}

var my_marker = false;
var gpslog_lasttime = 0;
var gpslog_loc = false;
var gpslog_overridelock = false;
var gpslog_first = false;
function GPSsuccessCallback(pos) {
	//if (!mode_gps && !mode_gps_once) return;
	
	console.log("GPSsuccessCallback(plain): "+pos.coords.latitude+","+pos.coords.longitude);
	
	mode_gps_once = false;
	//$("#area_status").html("GPS測位しました: "+(new Date()).toLocaleTimeString());
	
	updateGPSLocation(pos.coords.latitude, pos.coords.longitude);

}

	function updateGPSLocation(_loc1, _loc2) {
		gpslog_loc = {latitude: _loc1, longitude: _loc2};
		gpslog_lasttime = (new Date()).getTime();
		
		//pcはgpsロック中の座標を測位にオーバーライド
		gpslog_overridelock = false;
					if (func_push_gpsoverride) {
				gpslog_loc.latitude = parseFloat(func_push_gpsoverride[0]);
				gpslog_loc.longitude = parseFloat(func_push_gpsoverride[1]);
				gpslog_overridelock = true;
			}
					
		console.log("updateGPSLocation: "+gpslog_loc.latitude+","+gpslog_loc.longitude);
		
		procGPS(gpslog_loc.latitude, gpslog_loc.longitude);
		
		if (!gpslog_first) {
			//最初の測位
			requestDBServerReload(300);
			
			gpslog_first = true;
		}
	}

function GPSerrorCallback(error) {
	if (error.code == 1 || error.code == 2) {
		//GPSdisable();
		viewTopMessage("GPS非対応", false);
	}
	if (error.code == 3) {
		//GPS測位タイムアウト
	}
}

function onClickMarkerMyPin(e) {
	if (gpslog_loc) {
		console.log(gpslog_loc);
		researchByLoc(gpslog_loc.latitude, gpslog_loc.longitude, true);
	}
}

function updateSpawnCircle() {
	if (marker_gpsloc_circle_spawn) {
		marker_gpsloc_circle_spawn.remove();
		marker_gpsloc_circle_spawn = false;
	}
	
	//45mサークル
	if (gpslog_loc) {
		if (getLocalConfig("spawncircle") == "1") {
			
			marker_gpsloc_circle_spawn = L.circle(
				[gpslog_loc.latitude, gpslog_loc.longitude], 
				45,
				{
					"fill": false,
					"opacity": 0.8,
					"weight": 2,
					"color": "#FC5151"
				}
			).addTo(map);

		}
	}
}

var marker_gpsloc = false;
var marker_gpsloc_circle = false;
var marker_gpsloc_circle_spawn = false;
//var marker_gpsloc_circle_75m = false;
function procGPS(_latitude, _longitude) {
	console.log("procGPS: "+_latitude+","+_longitude);
	
	//1度でも測位できたことを記録しておく
	cookie.set("cookie_config_gps_checked", "1");
	
	if (marker_gpsloc) {
		marker_gpsloc.remove();
		marker_gpsloc = false;
	}
	if (marker_gpsloc_circle) {
		marker_gpsloc_circle.remove();
		marker_gpsloc_circle = false;
	}

	if (last_popup_to_gps_polyline_target) {
		protPolylineFromGPS(last_popup_to_gps_polyline_target.latitude, last_popup_to_gps_polyline_target.longitude);
	}
	
			serverRequestPushLocation(_latitude, _longitude, true);
			
	var _gpsicon = "mypin_gps.png";
	if (gpslog_overridelock) {
		_gpsicon = "mypin_locked.png";
	}
	
	var _icon = L.icon({
	    iconUrl: 'https://img-pmap.aquapal-cdn.net/img/'+_gpsicon+'',
	    iconSize: [16, 16],
	    iconAnchor: [8, 8]
	});
	marker_gpsloc = L.marker([_latitude, _longitude], {icon: _icon});
	marker_gpsloc.addTo(map).on('click', onClickMarkerMyPin);
	
	//200mサークル
	if (func_ps == "1") {
		marker_gpsloc_circle = L.circle(
			[_latitude, _longitude], 
			200,
			{
				"fill": false,
				//"opacity": 0.8,
				"weight": 3,
				"color": "#fba21c"
			}
		).addTo(map);
	}
	
	updateSpawnCircle();
	
	if (mode_gps) {
		checkMapViewMoved();
		
		//ドラッグしている場合はマップを移動しない
		if (mapdrag_lasttime == 0 || (new Date()).getTime() - mapdrag_lasttime >= 1000*4) {
			//現在のマップの中にGPS座標がなくなった場合に移動
			
			var extent = map.getBounds();
			console.log(extent);
			
			if (_latitude > extent.getSouthWest().lat && _longitude > extent.getSouthWest().lng && _latitude < extent.getNorthEast().lat && _longitude < extent.getNorthEast().lng) {
				console.log("extent inside");
			} else {
				//alert("左上: "+extent[1]+","+extent[0]+"\n"+"中央: "+_latitude+","+_longitude+"\n"+"右下: "+extent[3]+","+extent[2]);
				console.log("extent outside");
				map.setView( [_latitude, _longitude] );
			}
		}
	}
}

//-->
</SCRIPT>
<script>
var start_gps = true;
$(window).load(function () {
	var start_p1 = 35.67256762833872;
	var start_p2 = 139.70062494277957;
	var start_zoom = 16;
	//var start_gps = true;
	
	var _cookie_locations = "34.45784496222598,135.38542270660403,15";
	
	var _location_history = "";
	if (location.hash){
		//URLから初期位置をせってい
		var _tmp = location.hash.split("#").join("");
		_location_history = _tmp;
		if (_location_history.indexOf("pushloc") != -1) {
			start_gps = false;
		}
	} else {
		//cookieから初期位置をせってい
		_location_history = _cookie_locations;
	}
	_tmp = _location_history.split(",");
	if (_tmp.length >= 4) {
		if (_tmp[0] == "pushloc") {
			jumpMapAreaByPush(""+parseFloat(_tmp[1])+","+parseFloat(_tmp[2])+","+parseInt(_tmp[3]));
			
			_location_history = _cookie_locations;
			_tmp = _location_history.split(",");
		}
	}
	
	if (parseFloat(_tmp[0]) && parseFloat(_tmp[1])) {
		start_p1 = parseFloat(_tmp[0]);
		start_p2 = parseFloat(_tmp[1]);
	}
	if (parseInt(_tmp[2])) {
		start_zoom = parseInt(_tmp[2]);
	}

	console.log("start:"+start_p1+"," +start_p2+" @"+start_zoom);
	initMap(start_p1, start_p2, start_zoom);
	
		
			
	});

function Flex_InitPage() {
	
	setTimeout(function(){
			}, 500);
	
}

//var status_afk = 0;
</script>

<STYLE type="text/css">
<!--
* {
	-webkit-box-sizing : border-box;
	-moz-box-sizing    : border-box;
	-o-box-sizing      : border-box;
	-ms-box-sizing     : border-box;
	box-sizing         : border-box;
}
input[type="button"],input[type="submit"],input[type="text"],input[type="search"],select {
	border-radius: 0;
	-webkit-appearance: none;
}
html, body {
	width         : 100%;
	height        : 100%;
	margin        : 0;
	padding       : 0;
	font-family:Meiryo;
	-webkit-text-size-adjust: 100%;
}
input {
	font-family:Meiryo;
}
p {
    margin        : 0;
    padding       : 0;
    line-height   : 120%;
}
header {
    width         : 100%;
	height : 70px;
    position      : absolute;
    background    : #FFDD4D;
    top           : 0;
    border-bottom : 0px solid #FFB000;
    padding       : 0px;
    overflow      : hidden;
}
.map_frame {
    position      : absolute;
    top           : 0;
    bottom        : 0;
    width         : 100%;
	margin-top : 70px;
    margin-bottom : 115px;
}
#map-canvas {
    width         : 100%;
    height        : 100%;
}
footer {
    position      : absolute;
    width         : 100%;
	height : 115px;
    bottom        : 0;
    background    : #FFDD4D;
    border-top    : 0px solid #FFB000;
    padding       : 0px;
    overflow      : hidden;
}

.class_marker_master{
	width:40px;
	height:42px;
	text-align:center;
}

.testclass{
	padding:50px;
	margin:50px;
}

input[type="button"],input[type="submit"] {
	-webkit-appearance: none;
}

.pokesource-div-icon-normal, .pokesource-div-icon-now, .pokesource-div-icon-noviewid {
	font-weight: bold;
	padding:3px;
	border-radius: 10px;
	text-align:center;
}

.pokesource-div-icon-older-normal, .pokesource-div-icon-older-now {
	padding:3px;
	border-radius: 10px;
	text-align:center;
}

.pokesource-div-icon-normal {
	background-color: #91b982;
	opacity: 0.8;
}
.pokesource-div-icon-older-normal{
	background-color: #91b982;
	opacity: 0.4;
}
.pokesource-div-icon-noviewid{
	background-color: #FFA476;
	opacity: 0.8;
}

.pokesource-div-icon-now {
	background-color: #e75454;
	opacity: 0.8;
}
.pokesource-div-icon-older-now {
	background-color: #e75454;
	opacity: 0.4;
}

.pokesource-div-icon-unknown, .pokesource-div-icon-unknown-noviewid {
	padding:2px;
	border-radius: 8px;
	text-align:center;
	color: #666666;
	font-size: 9px;
}
.pokesource-div-icon-unknown-noviewid {
	background-color: #FFA476;
}
.pokesource-div-icon-unknown {
	background-color: rgba(128,128,128,0.5);
}

.polyline-viewmeter-icon {
	white-space: nowrap;
	font-weight:bold;
	background-color: transparent;
	left:45px;
	top:-1px;
}

.ol-popup {
	position: absolute;
	background-color: white;
	-webkit-filter: drop-shadow(0 1px 4px rgba(0,0,0,0.2));
	filter: drop-shadow(0 1px 4px rgba(0,0,0,0.2));
	padding: 6px;
	border-radius: 10px;
	border: 1px solid #cccccc;
	bottom: 12px;
	min-width: 200px;
	left: -50px;
	margin-bottom:38px;
}
.ol-popup:after, .ol-popup:before {
	top: 100%;
	border: solid transparent;
	content: " ";
	height: 0;
	width: 0;
	position: absolute;
	pointer-events: none;
}
.ol-popup:after {
	border-top-color: white;
	border-width: 10px;
	left: 48px;
	margin-left: -10px;
}
.ol-popup:before {
	border-top-color: #cccccc;
	border-width: 11px;
	left: 48px;
	margin-left: -11px;
}

.toggleconfig_withicon{
	width:260px;
	cursor:pointer;
	padding:3px;
	padding-left:35px;
	margin:3px;
	background-size:30px auto;
	background-repeat:no-repeat;
}

-->
</STYLE>
	

<!--■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■-->
<script src="extention.js"></script>
<!--■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■-->

</HEAD>
	
<body>
    <header>
    
        
    	    			
	

				
					
			<TABLE border="0" cellpadding="0" cellspacing="0" width="100%" bgcolor="#ffffff" style="height:28px;background-color : #ffffff;border-bottom-width : 1px;border-bottom-style : solid;border-bottom-color : #cccccc;">
			<TBODY>
			<TR>
			<TD nowrap>

				<TABLE border="0" cellpadding="0" cellspacing="0" style="font-family:'Meiryo UI',Meiryo,'ＭＳ Ｐゴシック',sans-serif;height:28px;text-align : center;">
				<TBODY>
				<TR>
					
				<TD style="width:2px;"></TD>
					
									<TD nowrap width="85" style="font-size : 12px;border-top-width : 2px;border-top-style : solid;border-top-color : #eeeeee;">
					<A href="http://live.kukulu.erinn.biz/?force=1" style="color:#3765ce;">生放送</a>
					</TD>
					<TD style="width:2px;"></TD>
									<TD nowrap width="85" style="font-size : 12px;border-top-width : 2px;border-top-style : solid;border-top-color : #eeeeee;">
					<A href="http://s.kuku.lu/" style="color:#3765ce;">画面画像共有</a>
					</TD>
					<TD style="width:2px;"></TD>
									<TD nowrap width="85" style="font-size : 12px;border-top-width : 2px;border-top-style : solid;border-top-color : #eeeeee;">
					<A href="http://v.kuku.lu/" style="color:#3765ce;">画面動画共有</a>
					</TD>
					<TD style="width:2px;"></TD>
									<TD nowrap width="85" style="font-size : 12px;border-top-width : 2px;border-top-style : solid;border-top-color : #eeeeee;">
					<A href="http://d.kuku.lu/" style="color:#3765ce;">ファイル転送</a>
					</TD>
					<TD style="width:2px;"></TD>
									<TD nowrap width="85" style="font-size : 12px;border-top-width : 2px;border-top-style : solid;border-top-color : #eeeeee;">
					<A href="http://draw.kuku.lu/" style="color:#3765ce;">絵チャレンタル</a>
					</TD>
					<TD style="width:2px;"></TD>
									<TD nowrap width="85" style="font-size : 12px;border-top-width : 2px;border-top-style : solid;border-top-color : #eeeeee;">
					<A href="http://f5.si/" style="color:#3765ce;">DynamicDNS</a>
					</TD>
					<TD style="width:2px;"></TD>
									<TD nowrap width="85" style="font-size : 12px;border-top-width : 2px;border-top-style : solid;border-top-color : #eeeeee;">
					<A href="http://m.kuku.lu/" style="color:#3765ce;">捨てメアド</a>
					</TD>
					<TD style="width:2px;"></TD>
								
				<TD nowrap width="85" onclick="open_header_mabinogi();">
					<center>
					<table border="0" cellpadding="0" cellspacing="0">
					<tr>
					<td width="12"><img src="https://kukulu.erinn.biz/img/header_ar.png"></td>
					<td style="cursor:pointer;font-size:12px;color:gray;">マビノギ</td>
					</tr>
					</table>
					</center>
				</TD>
				<TD style="width:2px;"></TD>
					
			    </TR>
				</TBODY>
				</TABLE>
				
				<script>
				function open_header_mabinogi(){
					var _tar = document.getElementById("area_header_mabinogi");
					if (_tar.style.display=="none") {
						_tar.style.display = "block";
					} else {
						_tar.style.display = "none";
					}
				}
				</script>
						
			</TD>
			<TD>&nbsp;</TD>
			<TD nowrap style="padding-right:5px;text-align : right;font-size : 11px; font-family:'Meiryo UI',Meiryo,'ＭＳ Ｐゴシック',sans-serif;">
			<span ><A style="color:#666666;" href="javascript:goShortURL_Header();">URL短縮</A></span>
			 | 
			<span ><a style="color:#666666;" href="http://magical.kuku.lu/page.contact.php" target="_blank">問い合わせ</a></span>
			 | 
			<span><a style="color:#666666;" href="http://status.aquapal.net/" target="_blank">稼働状況</a></span>

			</TD>
			<TD width="20" nowrap align="center">
			<a href="http://magical.kuku.lu/?1969"><img src="https://kukulu.erinn.biz/img/t.gif" border="0" alt="Twitter アカウントの情報" title="Twitter アカウントの情報"></a>
			</TD>
			<TD width="20" nowrap align="center" >
			<a href="http://mc.erinn.biz/"><img src="https://kukulu.erinn.biz/img/m.gif" border="0" alt="Kukulu Minecraft Server" title="Kukulu Minecraft Server"></a>
			</TD>
			<TD width="20" nowrap align="center" >
			<a href="http://aquapal.net/"><img src="https://kukulu.erinn.biz/img/a.gif" border="0" alt="aquapal" title="aquapal"></a>
			</TD>
			</TR>
			</TBODY>
			</TABLE>
			
			<TABLE id="area_header_mabinogi" border="0" cellpadding="0" cellspacing="0" width="100%" bgcolor="#ffffff" style="display:none;height:28px;background-color : #ffffff;border-bottom-width : 1px;border-bottom-style : solid;border-bottom-color : #cccccc;">
			<TBODY>
			<TR>
			<TD nowrap>

				<TABLE border="0" cellpadding="0" cellspacing="0" style="font-family:'Meiryo UI',Meiryo,'ＭＳ Ｐゴシック',sans-serif;height:28px;text-align : center;">
				<TBODY>
				<TR>
					
				<TD style="width:2px;"></TD>
					
									<TD nowrap width="85" style="font-size : 12px;">
					<A href="http://kukulu.erinn.biz/?force=1" style="color:#3765ce;">キャラ・放送</a>
					</TD>
					<TD style="width:2px;"></TD>
									<TD nowrap width="85" style="font-size : 12px;">
					<A href="http://rua.erinn.biz/" style="color:#3765ce;">相場調査</a>
					</TD>
					<TD style="width:2px;"></TD>
									<TD nowrap width="85" style="font-size : 12px;">
					<A href="http://weather.erinn.biz/" style="color:#3765ce;">攻略情報</a>
					</TD>
					<TD style="width:2px;"></TD>
									<TD nowrap width="85" style="font-size : 12px;">
					<A href="http://labo.erinn.biz/" style="color:#3765ce;">ツール</a>
					</TD>
					<TD style="width:2px;"></TD>
									<TD nowrap width="85" style="font-size : 12px;">
					<A href="http://labo.erinn.biz/cs/" style="color:#3765ce;">キャラシミュ</a>
					</TD>
					<TD style="width:2px;"></TD>
									<TD nowrap width="85" style="font-size : 12px;">
					<A href="http://magical.kuku.lu/" style="color:#3765ce;">お知らせ</a>
					</TD>
					<TD style="width:2px;"></TD>
									
			    </TR>
				</TBODY>
				</TABLE>
						
			</TD>
			<TD>&nbsp;</TD>
			</TR>
			</TBODY>
			</TABLE>
				
			<script>
				function goShortURL_Header() {
					window.open("http://kuku.lu/?surl="+encodeURIComponent(location.href),"_blank");
				}
			</script>
			
				
	    	    
		<TABLE border="0" width="100%" height="40" cellpadding="0" cellspacing="0">
		<TR>
		<TD style="text-align:left;width:100px;background-image:url('https://img-pmap.aquapal-cdn.net/img/icon_reload.png');background-repeat:no-repeat;background-position:center center;background-size:contain;">
			<div id="area_header_left">
									<input id="button_headerreload" type="button" value=" " onclick="research();" style="background-color:rgba(255,255,255,0);width:100%;height:100%;border:0px;font-size:15px;">
							</div>
		</TD>
		<TD style="text-align:center;">
			<div id="area_topmessage"><a href="javascript:location.reload();">読み込み中です...</a></div>
		</TD>
		<TD style="text-align:right;width:100px;background-image:url('https://img-pmap.aquapal-cdn.net/img/icon_gps.png');background-repeat:no-repeat;background-position:center center;background-size:contain;">
			<input id="button_gps" type="button" value="　" onclick="gpslocation();" style="background-color:rgba(255,255,255,0);width:100%;height:100%;border:0px;border-bottom:2px solid rgba(255,255,255,0);">
		</TD>
		</TR>
		</TABLE>

    </header>
    	
    <div class="map_frame" id="area_map_frame">
        <div id="map-canvas">
        
        </div>
    </div>
    		
    <footer id="area_footer">

		<TABLE border="0" width="100%" height="100%" cellspacing="0">
		<TR>
		<TD height="22" valign="middle">
			
			<table border="0" width="100%" cellspacing="0">
			<tr>
			<td style="text-align:left;font-size:70%;padding:5px;" >
												<a href="https://itunes.apple.com/ja/app/p-go-search/id1138890512" target="_blank">iOSアプリ</a> | 
								Powered by <a href="http://aquapal.net/" target="_blank">@kukusama</a>. | <a href="https://magical.kuku.lu/?num=100" target="_blank">使い方</a>
						</td>
						</tr>
			</table>
				
		</TD>
		</TR>
		<TR>
		<TD style="text-align:center;border-top:solid 1px #999999;background-color:white;width:100%;" valign="bottom">
			
							<div>
					<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
					<!-- PGOSEARCH ウェブ下部 -->
					<ins class="adsbygoogle"
					     style="display:block"
					     data-ad-client="ca-pub-6235967741013519"
					     data-ad-slot="8724862608"
					     data-ad-format="auto"></ins>
					<script>
					(adsbygoogle = window.adsbygoogle || []).push({});
					</script>
				</div>
												
			<div id="area_ad_footer" style="display:none;">
			</div>
			
		</TD>
		</TR>
		</TABLE>
        
    </footer>
    	
    <div id="area_customcontrol_push" style="display:none;position:fixed;background-color:rgba(255,255,255,0.9);padding:10px;z-index:1000050;">
		<div style='width:100%;height:100%;overflow-y: scroll;overflow-x: none;-webkit-overflow-scrolling: touch;'>
			<div style='padding:5px;'>
			指定したモンスターが出現した場合にプッシュ通知します。16種類まで設定できます。
							<b style='color:red;'>現在地設定から<u>[最大通知距離]</u>圏内で、かつ、残り時間に対して指定した<u>[移動手段]</u>で間に合う場合のみ通知します。</b>
				<div style="padding:5px;background-color:red;color:white;">パソコン版では、<b><a style="color:white;" href="https://chrome.google.com/webstore/detail/aquapal-notification-for/ogkpiajfbpnahnepoeiigdlnckcfkjhk" target="_blank">Chromeの拡張機能「aquapal Notification for Chrome」</a></b>を使用して通知します。こちらからインストールしてください。設定は不要です。Chrome以外のブラウザには現在対応していません。ごめん。ごめんね。</div>
						</div>
		
						
								
			<div style='padding-bottom:10px;margin:3px;'>
				<input type='button' onclick='requestPushLog();' value='通知履歴の表示' style='width:100%;height:30px;border:1px solid #eeeeee;'>
				<div id="area_push_log" style="display:none;">
					<div id="area_push_log_list">
						<font color="#cccccc">(データ受信中...)</font>
					</div>
					<div>※6時間以内の履歴を50件まで表示します。履歴を押すと地図で表示します。</div>
				</div>
			</div>
					
			<div>
			<input id="button_push_disable" type='button' onclick='togglePushDisable();' value='オフにする' style='width:100%;height:30px;border:1px solid #eeeeee;'>
			</div>
		
			<div id="area_push_data">
				
				<div style='padding-top:10px;padding-bottom:10px;margin:3px;'>
					現在地設定: <br>
					<b id='area_customcontrol_push_mailnow_gpslocation'>(GPSを使用)</b><br>
					<input type='button' onclick='GPSOverrideFromMapCenter(true);' value='地図の中心を現在地としてロック' style='width:50%;height:30px;border:1px solid #eeeeee;'><input type='button' onclick='GPSOverrideFromMapCenter(false);' value='ロック解除' style='width:50%;height:30px;border:1px solid #eeeeee;'><br>
					※GPSの測位を使わず地図上の任意地点をプッシュ通知の起点にしたい場合は、ロック機能をご利用ください。ロック解除した場合は、最後にGPS測位した現在地を使用します。
				</div>
				
								
				<div style='padding-top:10px;padding-bottom:10px;margin:3px;'>
					最大通知距離: <br>
					<select id='area_configpush_distkm' style="font-size:110%;width:80%;">
											<option value='0.05'>自宅GO (半径50m)</option>
											<option value='0.1'>豪邸GO (半径100m)</option>
											<option value='0.2'>コンビニGO (半径200m)</option>
											<option value='0.5'>イオンモールGO (半径500m)</option>
											<option value='0.8'>ユニバGO (半径800m)</option>
											<option value='1'>ネズミーランドGO (半径1km)</option>
											<option value='1.5'>公園GO (半径1.5km)</option>
											<option value='2'>お台場GO (半径2km)</option>
											<option value='2.5'>駅と駅のあいだGO (半径2.5km)</option>
											<option value='3'>ゴルフ場GO (半径3km)</option>
											<option value='3.5'>空港GO (半径3.5km)</option>
											<option value='4'>明石海峡大橋GO (半径4km)</option>
											<option value='5'>区内GO (半径5km)</option>
											<option value='6'>大阪環状線の内側GO (半径6km)</option>
											<option value='7'>山手線の内側GO (半径7km)</option>
											<option value='8'>どこまでもGO (半径8km)</option>
										</select>
				</div>
						
				<div style='padding-bottom:10px;margin:3px;'>
					移動手段: <br>
					<select id='area_configpush_movemethod' style="font-size:110%;width:80%;">
											<option value='1'>ほふく (時速1km)</option>
											<option value='5'>徒歩 (時速5km)</option>
											<option value='8'>競歩 (時速8km)</option>
											<option value='10'>走り (時速10km)</option>
											<option value='15'>自転車 (時速15km)</option>
											<option value='17'>猫ひろし (時速17km)</option>
											<option value='20'>立ち漕ぎ (時速20km)</option>
											<option value='30'>原付 (時速30km)</option>
											<option value='40'>車 (時速40km)</option>
											<option value='44'>ウサインボルト (時速44km)</option>
											<option value='110'>チーター (時速110km)</option>
											<option value='140'>プロボックス (時速140km)</option>
											<option value='270'>新幹線 (時速270km)</option>
											<option value='1000'>飛行機 (時速1,000km)</option>
											<option value='12144'>X-43 (時速12,144km)</option>
										</select><br>
				</div>
						
										
				<div style='padding-top:10px;padding-bottom:10px;margin:3px;'>
					<input type='button' onclick='allChangePush("0");' value='すべて解除' style='width:100%;height:30px;border:1px solid #eeeeee;'>
				</div>
				<div style='padding-bottom:10px;margin:3px;'>
					<input id='search_push_filter' type='search' placeholder='モンスターの名前で検索' style='width:100%;font-size:120%;'>
				</div>
			
							
				<div id="area_customcontrol_push_list"></div>
			</div>
		</div>
    </div>
    		
    <div id="area_customcontrol_push_mailnowlogin" style="display:none;position:fixed;background-color:rgba(255,255,255,0.9);padding:10px;z-index:1000050;">
		<div style='width:100%;height:100%;overflow-y: scroll;overflow-x: none;-webkit-overflow-scrolling: touch;'>
			<div style='padding:5px;'>
			<div>Web版での出現速報プッシュ通知は、「捨てメアド」を介して行います。お手数ですが下記の手順で設定をお願いします。</div>
			<br>

				1. 「<a href="https://play.google.com/store/apps/details?id=air.kukulive.mailnow" target="_blank">捨てメアド</a>」のアプリをインストールしてください。<br>
				※P-GO SEARCHと同じ開発者のアプリです。既にお持ちの方は飛ばしてください。<br>
				<br>
				2. 「捨てメアド」のアプリのアカウントIDを入力してください。<br>
				アカウントID: <input type="text" value="" id="mailnowlogin_id" placeholder="例）123456789" style="width:230px;"><br>
				※アカウントIDの確認方法は<a href="https://m.kuku.lu/help.php?n=61#qanda" target="_blank">こちらの解説</a>をご覧ください。<br>
				<br>
				3. 「捨てメアド」のアプリのアカウントパスワードを入力してください。<br>
				パスワード: <input type="text" id="mailnowlogin_password" value="" placeholder="例）0123" style="width:230px;"><br>
				※アカウントパスワードは上記のIDと同じ個所に表示されています。<br>
				<br>
				4. すべての設定が完了したら、「次へ」を押してください。<br>
				<b style="color:red;">出現速報は「捨てメアド」のプッシュ通知で届きます。通知センターからアプリを開くと個体情報をブラウザで開きます。メールは届きません。</b><br>
			<br>
			<div><input type="button" value=" 次へ " style="font-size:140%;width:100px;" onclick="MailNowLogin();">　<input type="button" value=" キャンセル " style="font-size:140%;width:180px;" onclick="closePushMailnowLoginWindow();"></div>
			</div>
		</div>
    </div>
    	
    <div id="area_customcontrol_config" style="display:none;position:fixed;background-color:rgba(255,255,255,0.9);padding:10px;z-index:1000000;">
    	<div style='width:100%;height:100%;overflow-y: scroll;overflow-x: none;-webkit-overflow-scrolling: touch;'>
    	
    		<div id="area_customcontrol_config_data">
    			
    			<div style='padding:5px;border-bottom:2px solid #eeeeee;font-weight:bold;color:green;'>■ データ設定 (<a href="https://magical.kuku.lu/?num=100#customfile" target="_blank">詳しい説明</a>)</div>
    			<div style='padding:5px;'>アイコンや表示名を着せ替えできます。よくわからない場合は「<a href="https://www.google.co.jp/search?q=p-go+%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3" target="_blank">P-GO カスタムアイコン</a>」で検索してね。</div>
				<div style='margin:5px;padding-bottom:5px;'>
					カスタムアイコンファイルのURL:<br>
					<input type="text" id="config_custom_icon" value="" placeholder="http:// または https:// から記入してください" style="width:100%;"><br>
				</div>
				<div style='margin:5px;padding-bottom:5px;'>
					カスタム種類名ファイルのURL:<br>
					<input type="text" id="config_custom_name" value="" placeholder="http:// または https:// から記入してください" style="width:100%;">
				</div>
				<br>
    			
    			<div style='padding:5px;border-bottom:2px solid #eeeeee;font-weight:bold;color:green;'>■ 地図設定</div>
				<div style='margin:5px;padding-bottom:5px;'>
					P-GO SEARCHの地図デザイン:<br>
					<select id='area_config_map_style' style="font-size:110%;width:100%;">
						<option value=''>すっきり見やすい地図 (OpenStreetMap)</option>
						<option value='maptile3'>情報量の多い地図 (OpenStreetMap)</option>
						<!--<option value='gsibasic'>国土地理院標準地図 (国土地理院)</option>-->
						<option value='skyphoto'>航空写真 (国土地理院)</option>
						<option value='skyphoto_old'>昭和50年ごろの航空写真 (国土地理院)</option>
					</select>
				</div>
								<br>
					<div><input type='button' onclick='closeConfigWindowWithReload();' value='システム再読み込み' style='width:260px;height:30px;border:1px solid #eeeeee;'></div>
									<br>
					
    			<div style='padding:5px;border-bottom:2px solid #eeeeee;font-weight:bold;color:green;margin-bottom:10px;'>■ 表示設定</div>
				<div id='area_configwindow_func_fortpokestop' class="toggleconfig_withicon" style='background-image:url("https://img-pmap.aquapal-cdn.net/img/icon_pokestop_normal.png?v=1");background-color:rgba(251,157,0,0.8);' onclick='toggleConfigFortPokestop();'>ポケストップを表示</div>
				<div id='area_configwindow_func_fortgym' class="toggleconfig_withicon" style='background-image:url("https://img-pmap.aquapal-cdn.net/img/gym_white.png");background-color:rgba(251,157,0,0.8);' onclick='toggleConfigFortGym();'>ジムを表示</div>
				<div id='area_configwindow_func_disablepolyline' class="toggleconfig_withicon" style='background-image:url("https://img-pmap.aquapal-cdn.net/img/icon_polyline.png");background-color:rgba(251,157,0,0.8);' onclick='toggleConfigPolyline();'>ラピュタ光を表示</div>
  				<div id='area_configwindow_func_searchcircle' class="toggleconfig_withicon" style='background-image:url("https://img-pmap.aquapal-cdn.net/img/icon_searchcircle2.png");background-color:rgba(251,157,0,0.8);' onclick='toggleConfigSearchCircle();'>サーチ範囲を表示</div>
  				<div id='area_configwindow_func_spawncircle' class="toggleconfig_withicon" style='background-image:url("https://img-pmap.aquapal-cdn.net/img/icon_spawncircle.png");background-color:rgba(251,157,0,0.8);' onclick='toggleConfigSpawnCircle();'>出現限界範囲を表示</div>
  				<div id='area_configwindow_func_shortcut' class="toggleconfig_withicon" style='background-image:url("https://img-pmap.aquapal-cdn.net/img/icon_pop.png?v=2");background-color:rgba(251,157,0,0.8);' onclick='toggleConfigShortcut();'>機能ショートカットを表示</div>
  				<div id='area_configwindow_func_viewiv' class="toggleconfig_withicon" style='background-image:url("https://img-pmap.aquapal-cdn.net/img/icon_viewiv.png");background-color:rgba(251,157,0,0.8);' onclick='toggleConfigViewIV();'>個体値(IV/CP/技)を表示</div>
  					
				<br>
				

    			<div style='padding:5px;border-bottom:2px solid #eeeeee;font-weight:bold;color:green;'>■ 出現中モンスター非表示設定</div>
    			<div style='padding:5px;'>不要なモンスター（出現中表示）は非表示にできます。</div>
				<div style="margin:3px;"><input type='button' id='button_pokemon_disable' onclick='togglePokemonDisable();' value='出現中モンスター表示機能をオフにする' style='width:100%;height:30px;border:1px solid #eeeeee;'></div>
    			
	    		<div id="area_pokemon_data">
	    			
  					<div id='area_configwindow_func_noviewforceiv' class="toggleconfig_withicon" style='margin-top:10px;background-image:url("https://img-pmap.aquapal-cdn.net/img/icon_viewiv.png");background-color:rgba(251,157,0,0.8);' onclick='toggleConfigNoviewForceIV();'>高個体値は非表示設定を無視</div>
  					
	    			<div style='padding-top:10px;padding-bottom:10px;margin:3px;'>
	    				<input type='button' onclick='allChangeConfigView("0");' value='すべて表示' style='width:50%;height:30px;border:1px solid #eeeeee;'><input type='button' onclick='allChangeConfigView("1");' value='すべて非表示' style='width:50%;height:30px;border:1px solid #eeeeee;'>
	    			</div>
	    			<div style='padding-bottom:10px;margin:3px;'>
	    				<input id='search_config_filter' type='search' placeholder='モンスターの名前で検索' style='width:100%;font-size:120%;'>
	    			</div>
	    			
		    		<div id="area_customcontrol_config_data_list">
		    		</div>
	    		</div>
    			
    			<div id="area_customicon_viewtest"></div>
    		
    		</div>
    		
    	</div>
    </div>
    		
    <div id="area_customcontrol_history" style="display:none;position:fixed;background-color:rgba(255,255,255,0.9);padding:10px;z-index:1000000;">
    	<div style='width:100%;height:100%;overflow-y: scroll;overflow-x: none;-webkit-overflow-scrolling: touch;'>
    	

			<div style='padding:5px;border-bottom:2px solid #eeeeee;font-weight:bold;color:green;'>■ ポケソース表示 (<a href="https://magical.kuku.lu/?num=100#pokesource" target="_blank">詳しい説明</a>)</div>
				<div style='padding:5px;'>
					出現時間中ポケソースのうち、未サーチのものは<b style="color:#e75454;">赤色</b>、サーチ済みのものは<b style="color:#FFA476;">オレンジ色</b>です。出現時間外は<b style="color:#91b982;">緑色</b>です。数字は出現時間で、毎時の「分」です。小さなポケソースは出現と消滅時間が不明です。
				</div>
					
				<div style="margin:3px;"><input type='button' id='button_pokesource_enable' onclick='togglePokesourceEnable();' value='オフにする' style='width:100%;height:30px;border:1px solid #eeeeee;'></div>
				<div id="area_pokesource_data">
					<div id='area_configwindow_func_ps_onlynearby' style='width:260px;cursor:pointer;padding:3px;padding-left:10px;margin:3px;background-color:rgba(251,157,0,0.8);' onclick='toggleConfigPokeSourceOnlyNearby();'>「かくれている」範囲内のみ表示</div>
					<div id='area_configwindow_func_ps_viewunpop' style='width:260px;cursor:pointer;padding:3px;padding-left:10px;margin:3px;background-color:rgba(251,157,0,0.8);' onclick='toggleConfigPokeSourceViewUnPop();'>出現時間外のポケソースも表示</div>
		    	</div>
		    	<br>
				
			
			<div style='padding:5px;border-bottom:2px solid #eeeeee;font-weight:bold;color:green;'>■ 出現履歴</div>
				<div style='padding:5px;'>
					指定したモンスターの過去6時間の出現記録を表示できます。同時に5種類まで設定できます。出現記録は薄いアイコンで表示されます。
				</div>
					
				<div style="margin:3px;"><input type='button' id='button_history_disable' onclick='toggleHistoryDisable();' value='オフにする' style='width:100%;height:30px;border:1px solid #eeeeee;'></div>
				<div id="area_history_data">
						
					<div style='padding-top:10px;padding-bottom:10px;margin:3px;'>
						<input type='button' onclick='allChangeHistory("0");' value='すべて解除' style='width:100%;height:30px;border:1px solid #eeeeee;'>
					</div>
					
					<div style='padding-bottom:10px;margin:3px;'>
						<input id='search_history_filter' type='search' placeholder='モンスターの名前で検索' style='width:100%;font-size:120%;'>
					</div>
		    			
		    			
		    		<div id="area_customcontrol_history_data_list">
		    		</div>
		    			
		    	</div>
    		
    	</div>
    </div>	
    
    <div id="area_customcontrol_area" style="display:none;position:fixed;background-color:rgba(255,255,255,0.9);padding:10px;z-index:1000001;">
    	
			<div style='width:100%;height:100%;overflow-y: scroll;overflow-x: none;-webkit-overflow-scrolling: touch;'>
		
				<div style='padding:5px;border-bottom:2px solid #eeeeee;font-weight:bold;color:green;'>■ キーワードから場所を検索</div>
				<div style='padding:5px;'>住所、施設名、座標で検索して地図を表示できます。正式名称で検索してください。同じ名前の違う地点にジャンプしてしまう場合は「○○県○○」「○○駅」「○○公園」などとしてください。</div>
				<div style='margin:3px;'><input id='search_area_geolocation' type='search' maxlength="32" placeholder='例）西日暮里' style='width:100%;font-size:120%;' onKeyPress="searchAreaGeolocationCheck(event);"></div>
				<div style='margin:3px;'><input type='button' onclick='searchAreaGeolocation();' value='OK' style='width:100%;height:30px;border:1px solid #eeeeee;'> </div>
								<br>
					
				<div onclick='toggleView("area_searchmob_master");' style='cursor:pointer;padding:5px;padding-left:35px;border:1px solid #eeeeee;font-weight:bold;color:blue;margin-bottom:5px;background-repeat:no-repeat;background-size:30px auto;background-image:url("https://img-pmap.aquapal-cdn.net/img/icon_search2.png");'>最寄りの個体を検索 ≫</div>
					<div id="area_searchmob_master" style="display:none;">
						<div style='padding:5px;'>現在出現中の最寄りの個体を検索できます。調べたいモンスターを押してください。</div>
					
						<div style='padding-bottom:10px;margin:3px;'>
							<input id='search_searchmob_filter' type='search' placeholder='モンスターの名前で検索' style='width:100%;font-size:120%;'>
						</div>
			    			
			    			
			    		<div id="area_customcontrol_searchmob_data_list">
			    		</div>
					<br>
					</div>
							
				<div onclick='openFavGymList();' style='cursor:pointer;padding:5px;padding-left:35px;border:1px solid #eeeeee;font-weight:bold;color:blue;margin-bottom:5px;background-repeat:no-repeat;background-size:30px auto;background-image:url("https://img-pmap.aquapal-cdn.net/img/gym_white.png");'>お気に入りジム ≫</div>
					<div id="area_favgymlist_master" style="display:none;">
						<div style='padding:5px;'>ジムのポップアップの <img src='https://img-pmap.aquapal-cdn.net/img/icon_fav.png' width='22'> を押すとジムをお気に入りに追加でき、状況を一覧で確認できます。押すと地図がジャンプします。</div>
						<div id="area_customcontrol_area_favgym" style="padding-top:5px;"></div>
						<br>
					</div>
						
				<div onclick='openAreaList();' style='cursor:pointer;padding:5px;padding-left:35px;border:1px solid #eeeeee;font-weight:bold;color:blue;margin-bottom:5px;background-repeat:no-repeat;background-size:30px auto;background-image:url("https://img-pmap.aquapal-cdn.net/img/icon_area.png");'>トレーナーの多い地域 ≫</div>
					<div id="area_arealist_master" style="display:none;">
						<div style='padding:5px;'>下記はトレーナーが多く、モンスターが出現しやすい地点の一覧です。「ふしぎなちから」により、データの量も比較的豊富です。</div>
						<div style='margin:3px;'><input id='search_area_filter' type='search' placeholder='地点を検索' style='width:100%;font-size:120%;'></div>
							
						<div id="area_customcontrol_area_arealist" style='padding-top:10px;padding-bottom:10px;'>
						</div>
							
												<br>
					</div>
				<br>
					
				<div style='clear:both;padding:5px;border-bottom:2px solid #eeeeee;font-weight:bold;color:green;'>■ お気に入り地点</div>
					<div style='padding:5px;'>現在地図で表示している場所をお気に入り地点として保存でき、いつでもジャンプできます。</div>
					<div style='margin:3px;'><input type='button' onclick='openAddFavArea();' value='地図表示位置を保存' style='width:100%;height:30px;border:1px solid #eeeeee;'> </div>
					<div id="area_customcontrol_area_favarea" style="padding-top:5px;"></div>
				<br>

			</div>
				
				
    </div>
    	
    	
    <div id="area_poptimeline" style="display:none;position:fixed;background-color:rgba(255,255,255,0.9);padding:0px;z-index:1000001;">
    	
			<div style='width:100%;height:100%;overflow-y: auto;overflow-x: none;-webkit-overflow-scrolling: touch;'>
				
				<div id="area_poptimeline_data" style="padding:5px;"></div>
					
			</div>
				
				
    </div>
  
    			
    <div id="area_report" style="position:fixed;background-color:rgba(255,255,255,0.9);padding:10px;z-index:1000010;top:200px;left:0px;right:0px;width:100%;display:none;">
			<div style='width:100%;'>
			<div style='padding:5px;text-align:left;'>選択された場所が「<b>危険な場所（道路の上、崖の上など）</b>」または「<b>立入禁止または物理的に入れない場所（柵に囲まれている、私有地、民家の中など）</b>」または「<b>立入禁止または物理的に入れず、近づくことも危険な場所（海の上、川の上、空港内、高速道路など）</b>」とお考えの場合は、下記よりご報告ください。キッズトレーナーの安全確保のため、素敵な大人の皆さまのご協力をお願いいたします。</div>
			<div style='padding:5px;text-align:left;'>座標: <b><span id="area_report_loc">---, ---</span></b></div>
			<div style='padding:5px;text-align:left;'>
				理由を選択してください: <br>
				<select id="area_report_reason" style="font-size:110%;">
					<option value=""> -- 理由を選択してください -- </option>
					<option value="1">危険な場所</option>
					<option value="2">立入禁止または物理的に入れない場所</option>
					<option value="3">その両方</option>
				</select>
			</div>
			
			<div style='padding-top:5px;padding-bottom:5px;text-align:right;'>
				<input type='button' onclick='sendReport();' value='OK' style='width:30%;height:30px;border:1px solid #eeeeee;'> 
				<input type='button' onclick='closeReport();' value='キャンセル' style='width:30%;height:30px;border:1px solid #eeeeee;'>
			</div>
			</div>
    </div>
    		
    <div id="area_searchmob_result" style="position:fixed;background-color:rgba(255,255,255,0.9);padding:0px;z-index:1000010;top:200px;left:0px;right:0px;width:100%;display:none;">
		<div style='width:100%;height:100%;overflow-y: scroll;overflow-x: none;-webkit-overflow-scrolling: touch;'>
			<div id="area_searchmob_result_html" style='padding:5px;text-align:center;'></div>
		</div>
    </div>
    				
    <div id="area_alert" style="position:fixed;background-color:rgba(255,255,255,0.96);padding:10px;z-index:1000020;top:200px;left:0px;right:0px;width:100%;display:none;">
			<div style='width:100%;height:100%;overflow-y: scroll;overflow-x: none;-webkit-overflow-scrolling: touch;'>
			<br>
			<div id="area_alert_message" style='padding:5px;text-align:center;'>メッセージ</div>
			<div style='padding-top:10px;padding-bottom:10px;text-align:center;'><br>
				<center>
				<input type='button' id="button_alert_ok" onclick='acceptAlertWindow();' value='OK' style='width:200px;height:30px;border:1px solid #eeeeee;'>
				<input type='button' id="button_alert_cancel" onclick='closeAlertWindow();' value='キャンセル' style='width:200px;margin-top:15px;height:30px;border:1px solid #eeeeee;'>
				</center>
			</div>
			</div>
    </div>
    	
     <div id="area_buttonsearch" onclick="research();" style="display:none;cursor:pointer;position:fixed;padding:0px;z-index:9000;height:40px;bottom:0px;width:40px;left:50%;transform: translate(-50%);">
		<img src="https://img-pmap.aquapal-cdn.net/img/icon_search2.png" width="40" border="0">
    </div>
    	
    <div id="area_window_close" onclick="closeWindowAll();" style="cursor:pointer;position:fixed;background-color:rgba(255,255,255,0.9);padding:5px;z-index:1100000;top:0px;left:0px;width:200px;height:41px;display:none;">

		<TABLE border="0" cellpadding="0" cellspacing="0">
		<TR>
		<TD style="padding-left:30px;"><img src="https://img-pmap.aquapal-cdn.net/img/icon_close.png" width="30"></TD>
		<TD style="padding-left:15px;">閉じる</TD>
		</TR>
		</TABLE>
				
    </div>
    	
    <div id="area_window_visibleinfo" style="position:fixed;background-color:rgba(255,202,202,1);padding:0px;z-index:1000100;bottom:0px;left:0px;right:0px;height:25px;display:none;">
		<TABLE border="0" width="100%" height="24" cellpadding="0" cellspacing="0">
		<TR>
		<TD align="center" valign="middle">
			<span style="font-weight:bold;color:red;font-size:70%;">もっとズームしてね</span>
			<span id="area_window_visibleinfo_typeview" style="color:red;font-size:60%;"></span>
		</TD>
		</TR>
		</TABLE>
    </div>
    	
    <div id="area_window_error" style="position:fixed;background-color:rgba(255,202,202,1);padding:0px;z-index:1000200;top:0px;left:110px;right:110px;height:41px;display:none;">
		<TABLE border="0" width="100%" height="40" cellpadding="0" cellspacing="0">
		<TR>
		<TD style="font-weight:bold;color:red;font-size:80%;" align="center" valign="middle" id="area_window_error_msg"></TD>
		</TR>
		</TABLE>
    </div>
    	
    <div id="area_window_update" style="position:fixed;background-color:rgba(255,225,141,0.9);box-shadow: 0px 0px 4px rgba(0,0,0,0.9);border-radius:5px;border:2px soild #eeeeee;padding:5px;z-index:2000200;top:0px;left:20px;right:20px;display:none;">
		<TABLE border="0" width="100%" cellpadding="0" cellspacing="0">
		<TR>
		<TD>
			<div id="area_window_update_msg" style="color:#333333;font-size:85%;"></div>
		</TD>
		<TD width="40" align="right">
			<img src="https://pmap.kuku.lu/img/icon_close.png" width="30" style="cursor:pointer;" onclick="closeUpdateMessage();">
		</TD>
		</TR>
		</TABLE>
    </div>
    	
    <div id="area_window_leftshortcuts" style="position:fixed;background-color:rgba(255,255,255,0.9);box-shadow: 0px 0px 4px rgba(0,0,0,0.9);border-radius:3px 0px 0px 3px;border:2px soild #eeeeee;padding:0px;z-index:10000;top:140px;right:0px;width:42px;display:none;">
		<div style="padding:5px;" id="icon_shortcut_pop" onclick="togglePokemonDisable();"><img src='https://img-pmap.aquapal-cdn.net/img/icon_pop.png?v=2' width='30'></div>
		<div style="padding:5px;" id="icon_shortcut_pokesource" onclick="togglePokesourceEnable();requestDBServerReloadWithCache();"><img src='https://img-pmap.aquapal-cdn.net/img/icon_pokesource.png?v=1' width='30'></div>
		<div style="padding:5px;" id="icon_shortcut_history" onclick="toggleHistoryDisable();requestDBServerReloadWithCache();"><img src='https://img-pmap.aquapal-cdn.net/img/icon_timeback.png?v=1' width='30'></div>
		<div style="padding:5px;" id="icon_shortcut_pokestop" onclick="toggleConfigFortPokestop();requestDBServerReloadWithCache();"><img src='https://img-pmap.aquapal-cdn.net/img/icon_pokestop_normal.png' width='30'></div>
		<div style="padding:5px;" id="icon_shortcut_gym" onclick="toggleConfigFortGym();requestDBServerReloadWithCache();"><img src='https://img-pmap.aquapal-cdn.net/img/gym_white.png' width='30'></div>
    </div>
    	

<IFRAME id="actionwin" name="actionwin" width="1" height="1" src="about:blank" frameborder="0" scrolling="NO"></IFRAME>

<!--■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■-->
<script>
$(window).load(function(){
	startExtention();
});
</script>
<!--■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■-->


</BODY>
</HTML>
<!--
	(c) KukusamaAki.
	ServerSide Gen.2016-12-28 15:27:35 (JST)
-->